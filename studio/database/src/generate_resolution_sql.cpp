
#include "MaterialResolution.h"

const char * const VR_FMT = "INSERT INTO VideoResolution (vrn_identifier, vrn_name) VALUES (%d, '%s');\n";
const char * const FF_FMT = "INSERT INTO FileFormat (fft_identifier, fft_name) VALUES (%d, '%s');\n";
const char * const OP_FMT = "INSERT INTO OperationalPattern (opp_identifier, opp_name) VALUES (%d, '%s');\n";

int main (int argc, char * argv[])
{
    fprintf(stdout, "-- Section generated by database/src/generate_resolution_sql\n\n");
    // VideoResolution
    for (int i = 1; i < MaterialResolution::END; ++i)
    {
        MaterialResolution::EnumType res = MaterialResolution::EnumType(i);

        std::string name = MaterialResolution::Name(res);

        fprintf(stdout, VR_FMT, i, name.c_str());
    }
    fprintf(stdout, "\n");

    // FileFormat
    for (int i = 1; i < FileFormat::END; ++i)
    {
        FileFormat::EnumType pattern = FileFormat::EnumType(i);

        std::string name;

        FileFormat::GetInfo(pattern, name);

        fprintf(stdout, FF_FMT, i, name.c_str());
    }
    fprintf(stdout, "\n");

    // OperationalPattern
    for (int i = 1; i < OperationalPattern::END; ++i)
    {
        OperationalPattern::EnumType pattern = OperationalPattern::EnumType(i);

        std::string name;

        OperationalPattern::GetInfo(pattern, name);

        fprintf(stdout, OP_FMT, i, name.c_str());
    }
    fprintf(stdout, "\n");
    fprintf(stdout, "-- End of section generated by database/src/generate_resolution_sql\n\n");
}

