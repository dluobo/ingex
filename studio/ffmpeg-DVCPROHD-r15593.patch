Index: libavcodec/dv.c
===================================================================
--- libavcodec/dv.c	(revision 15593)
+++ libavcodec/dv.c	(working copy)
@@ -6,13 +6,10 @@
  * DV encoder
  * Copyright (c) 2003 Roman Shaposhnik.
  *
- * 50 Mbps (DVCPRO50) support
- * Copyright (c) 2006 Daniel Maas <dmaas@maasdigital.com>
+ * 50 Mbps (DVCPRO50) and 100 Mbps (DVCPRO HD) support
+ * Copyright (c) 2006 Maas Digital LLC (Dan Maas, <dmaas@maasdigital.com>)
+ * Funded by BBC Research & Development
  *
- * 100 Mbps (DVCPRO HD) support
- * Initial code by Daniel Maas <dmaas@maasdigital.com> (funded by BBC R&D)
- * Final code by Roman Shaposhnik
- *
  * Many thanks to Dan Dennedy <dan@dennedy.org> for providing wealth
  * of DV technical info.
  *
@@ -54,19 +51,16 @@
     uint8_t *buf;
 
     uint8_t dv_zigzag[2][64];
-    uint32_t dv_idct_factor[2][2][22][64];
-    uint32_t dv100_idct_factor[4][4][16][64];
+    uint8_t dv_idct_shift[2][2][22][64];
 
     void (*get_pixels)(DCTELEM *block, const uint8_t *pixels, int line_size);
     void (*fdct[2])(DCTELEM *block);
     void (*idct_put[2])(uint8_t *dest, int line_size, DCTELEM *block);
 } DVVideoContext;
 
-/**
- * MultiThreading - dv_anchor applies to entire DV codec, not just the avcontext
- * one element is needed for each video segment in a DV frame
- * at most there are 4 DIF channels * 12 DIF sequences * 27 video segments (1080i50)
- */
+/* MultiThreading - dv_anchor applies to entire DV codec, not just the avcontext */
+/* one element is needed for each video segment in a DV frame */
+/* at most there are 4 DIF channels * 12 DIF sequences * 27 video segments (1080i50) */
 #define DV_ANCHOR_SIZE (4*12*27)
 
 static void* dv_anchor[DV_ANCHOR_SIZE];
@@ -78,46 +72,37 @@
 #define DV_VLC_MAP_LEV_SIZE 23
 #else
 #define DV_VLC_MAP_RUN_SIZE  64
-#define DV_VLC_MAP_LEV_SIZE 512 //FIXME sign was removed so this should be /2 but needs check
+#define DV_VLC_MAP_LEV_SIZE 256
 #endif
 
 /* XXX: also include quantization */
 static RL_VLC_ELEM dv_rl_vlc[1184];
 /* VLC encoding lookup table */
-static struct dv_vlc_pair {
-   uint32_t vlc;
-   uint8_t  size;
-} dv_vlc_map[DV_VLC_MAP_RUN_SIZE][DV_VLC_MAP_LEV_SIZE];
+static uint32_t dv_vlc_map_vlc[DV_VLC_MAP_RUN_SIZE][DV_VLC_MAP_LEV_SIZE];
+static uint8_t dv_vlc_map_size[DV_VLC_MAP_RUN_SIZE][DV_VLC_MAP_LEV_SIZE];
 
+
 static void dv_build_unquantize_tables(DVVideoContext *s, uint8_t* perm)
 {
-    int i, q, a;
+    int i, q, j;
 
     /* NOTE: max left shift is 6 */
     for(q = 0; q < 22; q++) {
         /* 88DCT */
-        i=1;
-        for(a = 0; a<4; a++) {
-            for(; i < dv_quant_areas[a]; i++) {
-                /* 88 table */
-                s->dv_idct_factor[0][0][q][i] = dv_iweight_88[i]<<(dv_quant_shifts[q][a] + 1);
-                s->dv_idct_factor[1][0][q][i] = s->dv_idct_factor[0][0][q][i]<<1;
-
-                /* 248 table */
-                s->dv_idct_factor[0][1][q][i] = dv_iweight_248[i]<<(dv_quant_shifts[q][a] + 1);
-                s->dv_idct_factor[1][1][q][i] = s->dv_idct_factor[0][1][q][i]<<1;
-            }
+        for(i = 1; i < 64; i++) {
+            /* 88 table */
+            j = perm[i];
+            s->dv_idct_shift[0][0][q][j] =
+                dv_quant_shifts[q][dv_88_areas[i]] + 1;
+            s->dv_idct_shift[1][0][q][j] = s->dv_idct_shift[0][0][q][j] + 1;
         }
-    }
 
-    for(a = 0; a < 4; a++) {
-        for(q = 0; q < 16; q++) {
-            for(i = 1; i < 64; i++) {
-                s->dv100_idct_factor[0][a][q][i]= (dv100_qstep[q]<<(a+9))*dv_iweight_1080_y[i];
-                s->dv100_idct_factor[1][a][q][i]= (dv100_qstep[q]<<(a+9))*dv_iweight_1080_c[i];
-                s->dv100_idct_factor[2][a][q][i]= (dv100_qstep[q]<<(a+9))*dv_iweight_720_y[i];
-                s->dv100_idct_factor[3][a][q][i]= (dv100_qstep[q]<<(a+9))*dv_iweight_720_c[i];
-            }
+        /* 248DCT */
+        for(i = 1; i < 64; i++) {
+            /* 248 table */
+            s->dv_idct_shift[0][1][q][i] =
+                dv_quant_shifts[q][dv_248_areas[i]] + 1;
+            s->dv_idct_shift[1][1][q][i] = s->dv_idct_shift[0][1][q][i] + 1;
         }
     }
 }
@@ -165,7 +150,6 @@
            to accelerate the parsing of partial codes */
         init_vlc(&dv_vlc, TEX_VLC_BITS, j,
                  new_dv_vlc_len, 1, 1, new_dv_vlc_bits, 2, 2, 0);
-        assert(dv_vlc.table_size == 1184);
 
         for(i = 0; i < dv_vlc.table_size; i++){
             int code= dv_vlc.table[i][0];
@@ -193,36 +177,38 @@
                continue;
 #endif
 
-           if (dv_vlc_map[dv_vlc_run[i]][dv_vlc_level[i]].size != 0)
+           if (dv_vlc_map_size[dv_vlc_run[i]][dv_vlc_level[i]] != 0)
                continue;
 
-           dv_vlc_map[dv_vlc_run[i]][dv_vlc_level[i]].vlc = dv_vlc_bits[i] <<
+           dv_vlc_map_vlc[dv_vlc_run[i]][dv_vlc_level[i]] = dv_vlc_bits[i] <<
                                                             (!!dv_vlc_level[i]);
-           dv_vlc_map[dv_vlc_run[i]][dv_vlc_level[i]].size = dv_vlc_len[i] +
+           dv_vlc_map_size[dv_vlc_run[i]][dv_vlc_level[i]] = dv_vlc_len[i] +
                                                              (!!dv_vlc_level[i]);
         }
         for (i = 0; i < DV_VLC_MAP_RUN_SIZE; i++) {
 #ifdef DV_CODEC_TINY_TARGET
            for (j = 1; j < DV_VLC_MAP_LEV_SIZE; j++) {
-              if (dv_vlc_map[i][j].size == 0) {
-                  dv_vlc_map[i][j].vlc = dv_vlc_map[0][j].vlc |
-                            (dv_vlc_map[i-1][0].vlc << (dv_vlc_map[0][j].size));
-                  dv_vlc_map[i][j].size = dv_vlc_map[i-1][0].size +
-                                          dv_vlc_map[0][j].size;
+              if (dv_vlc_map_size[i][j] == 0) {
+                  dv_vlc_map_vlc[i][j] = dv_vlc_map_vlc[0][j] |
+                            (dv_vlc_map_vlc[i-1][0] << (dv_vlc_map_size[0][j]));
+                  dv_vlc_map_size[i][j] = dv_vlc_map_size[i-1][0] +
+                                          dv_vlc_map_size[0][j];
               }
            }
 #else
-           for (j = 1; j < DV_VLC_MAP_LEV_SIZE/2; j++) {
-              if (dv_vlc_map[i][j].size == 0) {
-                  dv_vlc_map[i][j].vlc = dv_vlc_map[0][j].vlc |
-                            (dv_vlc_map[i-1][0].vlc << (dv_vlc_map[0][j].size));
-                  dv_vlc_map[i][j].size = dv_vlc_map[i-1][0].size +
-                                          dv_vlc_map[0][j].size;
+           for (j = 1; j < DV_VLC_MAP_LEV_SIZE; j++) {
+              if (dv_vlc_map_size[i][j] == 0) {
+                  dv_vlc_map_vlc[i][j] = dv_vlc_map_vlc[0][j] |
+                            (dv_vlc_map_vlc[i-1][0] << (dv_vlc_map_size[0][j]));
+                  dv_vlc_map_size[i][j] = dv_vlc_map_size[i-1][0] +
+                                          dv_vlc_map_size[0][j];
               }
-              dv_vlc_map[i][((uint16_t)(-j))&0x1ff].vlc =
-                                            dv_vlc_map[i][j].vlc | 1;
-              dv_vlc_map[i][((uint16_t)(-j))&0x1ff].size =
-                                            dv_vlc_map[i][j].size;
+	      /*
+              dv_vlc_map_vlc[i][((uint16_t)(-j))&0x1ff] =
+                                            dv_vlc_map_vlc[i][j] | 1;
+              dv_vlc_map_size[i][((uint16_t)(-j))&0x1ff] =
+                                            dv_vlc_map_size[i][j];
+	      */
            }
 #endif
         }
@@ -262,17 +248,17 @@
 // #define printf(...) av_log(NULL, AV_LOG_ERROR, __VA_ARGS__)
 
 typedef struct BlockInfo {
-    const uint32_t *factor_table;
+    const uint8_t *shift_table;
     const uint8_t *scan_table;
+    const int *iweight_table;
     uint8_t pos; /* position in block */
-    void (*idct_put)(uint8_t *dest, int line_size, DCTELEM *block);
+    uint8_t dct_mode;
     uint8_t partial_bit_count;
     uint16_t partial_bit_buffer;
     int shift_offset;
+    int qstep; /* DV100 only */
 } BlockInfo;
 
-/* bit budget for AC only in 5 MBs */
-static const int vs_total_ac_bits = (100 * 4 + 68*2) * 5;
 /* see dv_88_areas and dv_248_areas for details */
 static const int mb_area_start[5] = { 1, 6, 21, 43, 64 };
 
@@ -286,15 +272,16 @@
     return (s->buf_end - s->buf) * 8 - put_bits_count(s);
 }
 
-/* decode ac coefficients */
-static void dv_decode_ac(GetBitContext *gb, BlockInfo *mb, DCTELEM *block)
+/* decode ac coefs */
+static void dv_decode_ac(DVVideoContext *s, GetBitContext *gb, BlockInfo *mb, DCTELEM *block)
 {
     int last_index = gb->size_in_bits;
     const uint8_t *scan_table = mb->scan_table;
-    const uint32_t *factor_table = mb->factor_table;
+    const uint8_t *shift_table = mb->shift_table;
+    const int *iweight_table = mb->iweight_table;
     int pos = mb->pos;
     int partial_bit_count = mb->partial_bit_count;
-    int level, run, vlc_len, index;
+    int level, pos1, run, vlc_len, index;
 
     OPEN_READER(re, gb);
     UPDATE_CACHE(re, gb);
@@ -339,9 +326,19 @@
         if (pos >= 64)
             break;
 
-        level = (level*factor_table[pos] + (1 << (dv_iweight_bits-1))) >> dv_iweight_bits;
-        block[scan_table[pos]] = level;
+        pos1 = scan_table[pos];
 
+	/* unweigh, round, and shift down */
+	if (DV_PROFILE_IS_HD(s->sys)) {
+	    level *= mb->qstep;
+	    level = (level*iweight_table[pos]) >> 5;
+	} else {
+	    level <<= shift_table[pos1];
+	    level = (level*iweight_table[pos] + (1 << (dv_iweight_bits-1))) >> dv_iweight_bits;
+	}
+
+        block[pos1] = level;
+
         UPDATE_CACHE(re, gb);
     }
     CLOSE_READER(re, gb);
@@ -360,17 +357,83 @@
     }
 }
 
+/* interleave scanlines from even- and odd-numbered blocks */
+static void dv100_interleave(DVVideoContext *s, int mb_x, int mb_y, uint8_t *y_ptr, int c_offset)
+{
+    int i;
+    for (i = 0; i < 4; i++) {
+	uint8_t *p0, *p1; /* pointer to first scanline of the two adjacent blocks */
+	int stride; /* offset between successive scanlines */
+
+	/* duplicated code */
+	if (i < 2) {  /* DCT0/DCT2, DCT1/DCT3 */
+	    if (s->sys->height == 1080 && mb_y == 134) {
+		/* bottom edge: horizontal row of 4 blocks */
+		p0 = y_ptr + ((i+0)<<3);
+		p1 = y_ptr + ((i+2)<<3);
+	    } else {
+		p0 = y_ptr + ((((i+0) & 1) + ((i+0) >> 1) * s->picture.linesize[0])<<3);
+		p1 = y_ptr + ((((i+2) & 1) + ((i+2) >> 1) * s->picture.linesize[0])<<3);
+	    }
+	    stride = s->picture.linesize[0];
+	} else { /* DCT4/DCT5, DCT6/DCT7 */
+	    int j = i<<1;
+	    int chan = 2 - ((j-4)>>1);
+	    if (s->sys->height == 1080 && mb_y == 134) {
+		/* bottom edge: horizontal row of 2 blocks */
+		p0 = s->picture.data[chan] + c_offset + (((j+0)&1)<<3);
+		p1 = s->picture.data[chan] + c_offset + (((j+1)&1)<<3);
+	    } else {
+		p0 = s->picture.data[chan] + c_offset + ((((j+0) & 1) * s->picture.linesize[chan])<<3);
+		p1 = s->picture.data[chan] + c_offset + ((((j+1) & 1) * s->picture.linesize[chan])<<3);
+	    }
+	    stride = s->picture.linesize[chan];
+	}
+
+	/* GCC turns these small fixed-size memcpy()s into efficient mov sequences */
+#define SET(a,b) memcpy(a, b, 8);
+	{
+	    uint8_t temp[7][8];
+
+	    SET(temp[0],     p0+1*stride);
+	    SET(temp[1],     p0+2*stride);
+	    SET(temp[2],     p0+3*stride);
+	    SET(temp[3],     p0+4*stride);
+	    SET(temp[4],     p0+5*stride);
+	    SET(temp[5],     p0+6*stride);
+	    SET(temp[6],     p0+7*stride);
+
+	    SET(p0+1*stride, p1+0*stride);
+	    SET(p0+2*stride, temp[0]);
+	    SET(p0+3*stride, p1+1*stride);
+	    SET(p0+4*stride, temp[1]);
+	    SET(p0+5*stride, p1+2*stride);
+	    SET(p0+6*stride, temp[2]);
+	    SET(p0+7*stride, p1+3*stride);
+
+	    SET(p1+0*stride, temp[3]);
+	    SET(p1+1*stride, p1+4*stride);
+	    SET(p1+2*stride, temp[4]);
+	    SET(p1+3*stride, p1+5*stride);
+	    SET(p1+4*stride, temp[5]);
+	    SET(p1+5*stride, p1+6*stride);
+	    SET(p1+6*stride, temp[6]);
+	}
+#undef SET
+    }
+}
+
 /* mb_x and mb_y are in units of 8 pixels */
 static inline void dv_decode_video_segment(DVVideoContext *s,
                                            const uint8_t *buf_ptr1,
-                                           const uint16_t *mb_pos_ptr)
+                                           const int mb_pos_ptr[10])
 {
     int quant, dc, dct_mode, class1, j;
-    int mb_index, mb_x, mb_y, v, last_index;
-    int y_stride, linesize;
+    int mb_index, mb_x, mb_y, last_index;
     DCTELEM *block, *block1;
     int c_offset;
     uint8_t *y_ptr;
+    void (*idct_put)(uint8_t *dest, int line_size, DCTELEM *block);
     const uint8_t *buf_ptr;
     PutBitContext pb, vs_pb;
     GetBitContext gb;
@@ -379,10 +442,10 @@
     DECLARE_ALIGNED_8(uint8_t, mb_bit_buffer[80 + 4]); /* allow some slack */
     DECLARE_ALIGNED_8(uint8_t, vs_bit_buffer[5 * 80 + 4]); /* allow some slack */
     const int log2_blocksize= 3-s->avctx->lowres;
-    int is_field_mode[5];
+    int dv100_dct_mode[5]; /* dct_mode is per-macroblock in DV100, not per-block */
 
-    assert((((int)mb_bit_buffer)&7)==0);
-    assert((((int)vs_bit_buffer)&7)==0);
+    assert((((long)mb_bit_buffer)&7)==0);
+    assert((((long)vs_bit_buffer)&7)==0);
 
     memset(sblock, 0, sizeof(sblock));
 
@@ -398,7 +461,6 @@
         init_put_bits(&pb, mb_bit_buffer, 80);
         mb = mb1;
         block = block1;
-        is_field_mode[mb_index] = 0;
         for(j = 0;j < s->sys->bpm; j++) {
             last_index = s->sys->block_sizes[j];
             init_get_bits(&gb, buf_ptr, last_index);
@@ -407,17 +469,34 @@
             dc = get_sbits(&gb, 9);
             dct_mode = get_bits1(&gb);
             class1 = get_bits(&gb, 2);
-            if (DV_PROFILE_IS_HD(s->sys)) {
-                mb->idct_put = s->idct_put[0];
-                mb->scan_table = s->dv_zigzag[0];
-                mb->factor_table = s->dv100_idct_factor[((s->sys->height == 720)<<1)|(j >= 4)][class1][quant];
-                is_field_mode[mb_index] |= !j && dct_mode;
-            } else {
-                mb->idct_put = s->idct_put[dct_mode && log2_blocksize==3];
-                mb->scan_table = s->dv_zigzag[dct_mode];
-                mb->factor_table = s->dv_idct_factor[class1 == 3][dct_mode]
-                    [quant + dv_quant_offset[class1]];
-            }
+
+	    if (DV_PROFILE_IS_HD(s->sys)) {
+		if (j == 0) {
+                    /* macroblock Y location */
+                    int mb_y = mb_pos_ptr[2*mb_index+1];
+                    /* force non-field mode for 4x1 "bottom macro blocks" */
+                    if(mb_y == 134) {
+                        dv100_dct_mode[mb_index] = 0;
+                    } else {
+                        dv100_dct_mode[mb_index] = dct_mode;
+                    }
+                }
+		/* DV100 does not use the 2-4-8 DCT */
+		mb->dct_mode = 0;
+		if (s->sys->height == 1080) {
+		    mb->iweight_table = (j < 4) ? dv_iweight_1080_y : dv_iweight_1080_c;
+		} else { /* 720p */
+		    mb->iweight_table = (j < 4) ? dv_iweight_720_y : dv_iweight_720_c;
+		}
+		mb->qstep = dv100_qstep[quant] << class1;
+	    } else {
+		mb->dct_mode = dct_mode;
+		mb->iweight_table = dct_mode ? dv_iweight_248 : dv_iweight_88;
+		mb->shift_table = s->dv_idct_shift[class1 == 3][dct_mode]
+		    [quant + dv_quant_offset[class1]];
+	    }
+            mb->scan_table = s->dv_zigzag[mb->dct_mode];
+
             dc = dc << 2;
             /* convert to unsigned because 128 is not added in the
                standard IDCT */
@@ -430,7 +509,7 @@
 #ifdef VLC_DEBUG
             printf("MB block: %d, %d ", mb_index, j);
 #endif
-            dv_decode_ac(&gb, mb, block);
+            dv_decode_ac(s, &gb, mb, block);
 
             /* write the remaining bits  in a new buffer only if the
                block is finished */
@@ -451,7 +530,7 @@
         flush_put_bits(&pb);
         for(j = 0;j < s->sys->bpm; j++, block += 64, mb++) {
             if (mb->pos < 64 && get_bits_left(&gb) > 0) {
-                dv_decode_ac(&gb, mb, block);
+                dv_decode_ac(s, &gb, mb, block);
                 /* if still not finished, no need to parse other blocks */
                 if (mb->pos < 64)
                     break;
@@ -477,7 +556,7 @@
 #ifdef VLC_DEBUG
                 printf("start %d:%d\n", mb_index, j);
 #endif
-                dv_decode_ac(&gb, mb, block);
+                dv_decode_ac(s, &gb, mb, block);
             }
             if (mb->pos >= 64 && mb->pos < 127)
                 av_log(NULL, AV_LOG_ERROR, "AC EOB marker is absent pos=%d\n", mb->pos);
@@ -490,65 +569,93 @@
     block = &sblock[0][0];
     mb = mb_data;
     for(mb_index = 0; mb_index < 5; mb_index++) {
-        v = *mb_pos_ptr++;
-        mb_x = v & 0xff;
-        mb_y = v >> 8;
-        /* We work with 720p frames split in half. The odd half-frame (chan==2,3) is displaced :-( */
-        if (s->sys->height == 720 && !(s->buf[1]&0x0C)) {
-               mb_y -= (mb_y>17)?18:-72; /* shifting the Y coordinate down by 72/2 macroblocks */
+	mb_x = *mb_pos_ptr++;
+        mb_y = *mb_pos_ptr++;
+        if (s->sys->pix_fmt == PIX_FMT_YUV422P) { /* 4:2:2 */
+            y_ptr = s->picture.data[0] + ((mb_y * s->picture.linesize[0] + (mb_x>>1))<<log2_blocksize);
+            c_offset = ((mb_y * s->picture.linesize[1] + (mb_x >> 2))<<log2_blocksize);
+        } else { /* 4:1:1 or 4:2:0 */
+            y_ptr = s->picture.data[0] + ((mb_y * s->picture.linesize[0] + mb_x)<<log2_blocksize);
+            if (s->sys->pix_fmt == PIX_FMT_YUV411P)
+                c_offset = ((mb_y * s->picture.linesize[1] + (mb_x >> 2))<<log2_blocksize);
+            else /* 4:2:0 */
+                c_offset = (((mb_y >> 1) * s->picture.linesize[1] + (mb_x >> 1))<<log2_blocksize);
         }
-
-        /* idct_put'ting luminance */
-        if ((s->sys->pix_fmt == PIX_FMT_YUV420P) ||
-            (s->sys->pix_fmt == PIX_FMT_YUV411P && mb_x >= (704 / 8)) ||
-            (s->sys->height >= 720 && mb_y != 134)) {
-            y_stride = (s->picture.linesize[0]<<((!is_field_mode[mb_index])*log2_blocksize));
-        } else {
-            y_stride = (2<<log2_blocksize);
-        }
-        y_ptr = s->picture.data[0] + ((mb_y * s->picture.linesize[0] + mb_x)<<log2_blocksize);
-        linesize = s->picture.linesize[0]<<is_field_mode[mb_index];
-        mb[0]    .idct_put(y_ptr                                 , linesize, block + 0*64);
-        if (s->sys->video_stype == 4) { /* SD 422 */
-            mb[2].idct_put(y_ptr + (1<<log2_blocksize)           , linesize, block + 2*64);
-        } else {
-            mb[1].idct_put(y_ptr + (1<<log2_blocksize)           , linesize, block + 1*64);
-            mb[2].idct_put(y_ptr                       + y_stride, linesize, block + 2*64);
-            mb[3].idct_put(y_ptr + (1<<log2_blocksize) + y_stride, linesize, block + 3*64);
-        }
-        mb += 4;
-        block += 4*64;
-
-        /* idct_put'ting chrominance */
-        c_offset = (((mb_y>>(s->sys->pix_fmt == PIX_FMT_YUV420P)) * s->picture.linesize[1] +
-                     (mb_x>>((s->sys->pix_fmt == PIX_FMT_YUV411P)?2:1)))<<log2_blocksize);
-        for(j=2; j; j--) {
-            uint8_t *c_ptr = s->picture.data[j] + c_offset;
-            if (s->sys->pix_fmt == PIX_FMT_YUV411P && mb_x >= (704 / 8)) {
-                  uint64_t aligned_pixels[64/8];
-                  uint8_t *pixels = (uint8_t*)aligned_pixels;
-                  uint8_t *c_ptr1, *ptr1;
-                  int x, y;
-                  mb->idct_put(pixels, 8, block);
-                  for(y = 0; y < (1<<log2_blocksize); y++, c_ptr += s->picture.linesize[j], pixels += 8) {
-                      ptr1= pixels + (1<<(log2_blocksize-1));
-                      c_ptr1 = c_ptr + (s->picture.linesize[j]<<log2_blocksize);
-                      for(x=0; x < (1<<(log2_blocksize-1)); x++) {
-                          c_ptr[x]= pixels[x];
-                          c_ptr1[x]= ptr1[x];
-                      }
-                  }
-                  block += 64; mb++;
-            } else {
-                  y_stride = (mb_y == 134) ? (1<<log2_blocksize) :
-                                             s->picture.linesize[j]<<((!is_field_mode[mb_index])*log2_blocksize);
-                  linesize = s->picture.linesize[j]<<is_field_mode[mb_index];
-                  (mb++)->    idct_put(c_ptr           , linesize, block); block+=64;
-                  if (s->sys->bpm == 8) {
-                      (mb++)->idct_put(c_ptr + y_stride, linesize, block); block+=64;
-                  }
+        for(j = 0;j < s->sys->bpm; j++) {
+            idct_put = s->idct_put[mb->dct_mode && log2_blocksize==3];
+	    if (DV_PROFILE_IS_HD(s->sys)) { /* HD 4:2:2 */
+		if (j < 4) {  /* Four Y blocks */
+		    /* NOTE: at bottom of image in 1080i50/60, the macroblock is handled as 411 */
+                    if (s->sys->height == 1080 && mb_y == 134) {
+			idct_put(y_ptr + (j<<log2_blocksize), s->picture.linesize[0], block);
+                    } else {
+			idct_put(y_ptr + (((j & 1) + (j >> 1) * s->picture.linesize[0])<<log2_blocksize),
+                                 s->picture.linesize[0], block);
+                    }
+                } else {      /* Cr and Cb blocks */
+		    int chan = 2 - ((j-4)>>1);
+		    if (s->sys->height == 1080 && mb_y == 134) {
+			/* bottom edge: horizontal row of 2 blocks */
+			idct_put(s->picture.data[chan] + c_offset + ((j&1)<<log2_blocksize),
+				 s->picture.linesize[chan], block);
+		    } else {
+			idct_put(s->picture.data[chan] + c_offset + (((j & 1) * s->picture.linesize[chan])<<log2_blocksize),
+                                 s->picture.linesize[chan], block);
+		    }
+		}
+	    } else if (s->sys->pix_fmt == PIX_FMT_YUV422P) { /* SD 4:2:2 */
+                if (j == 0 || j == 2) {
+                    /* Y0 Y1 */
+                    idct_put(y_ptr + ((j >> 1)<<log2_blocksize),
+                             s->picture.linesize[0], block);
+                } else if(j > 3) {
+                    /* Cr Cb */
+                    idct_put(s->picture.data[6 - j] + c_offset,
+                             s->picture.linesize[6 - j], block);
+                }
+                /* note: j=1 and j=3 are "dummy" blocks in SD 4:2:2 */
+            } else { /* 4:1:1 or 4:2:0 */
+                if (j < 4) {
+                    if (s->sys->pix_fmt == PIX_FMT_YUV411P && mb_x < (704 / 8)) {
+                        /* NOTE: at end of line, the macroblock is handled as 420 */
+                        idct_put(y_ptr + (j<<log2_blocksize), s->picture.linesize[0], block);
+                    } else {
+                        idct_put(y_ptr + (((j & 1) + (j >> 1) * s->picture.linesize[0])<<log2_blocksize),
+                                 s->picture.linesize[0], block);
+                    }
+                } else {
+                    if (s->sys->pix_fmt == PIX_FMT_YUV411P && mb_x >= (704 / 8)) {
+                        uint64_t aligned_pixels[64/8];
+                        uint8_t *pixels= (uint8_t*)aligned_pixels;
+                        uint8_t *c_ptr, *c_ptr1, *ptr, *ptr1;
+                        int x, y, linesize;
+                        /* NOTE: at end of line, the macroblock is handled as 420 */
+                        idct_put(pixels, 8, block);
+                        linesize = s->picture.linesize[6 - j];
+                        c_ptr = s->picture.data[6 - j] + c_offset;
+                        ptr = pixels;
+                        for(y = 0;y < (1<<log2_blocksize); y++) {
+                            ptr1= ptr + (1<<(log2_blocksize-1));
+                            c_ptr1 = c_ptr + (linesize<<log2_blocksize);
+                            for(x=0; x < (1<<(log2_blocksize-1)); x++){
+                                c_ptr[x]= ptr[x]; c_ptr1[x]= ptr1[x];
+                            }
+                            c_ptr += linesize;
+                            ptr += 8;
+                        }
+                    } else {
+                        /* don't ask me why they inverted Cb and Cr ! */
+                        idct_put(s->picture.data[6 - j] + c_offset,
+                                 s->picture.linesize[6 - j], block);
+                    }
+                }
             }
+            block += 64;
+            mb++;
         }
+	if (DV_PROFILE_IS_HD(s->sys) && dv100_dct_mode[mb_index]) {
+		dv100_interleave(s, mb_x, mb_y, y_ptr, c_offset);
+	}
     }
 }
 
@@ -558,21 +665,21 @@
 {
     int size;
     if (run < DV_VLC_MAP_RUN_SIZE && level < DV_VLC_MAP_LEV_SIZE) {
-        *vlc = dv_vlc_map[run][level].vlc | sign;
-        size = dv_vlc_map[run][level].size;
+        *vlc = dv_vlc_map_vlc[run][level] | sign;
+        size = dv_vlc_map_size[run][level];
     }
     else {
         if (level < DV_VLC_MAP_LEV_SIZE) {
-            *vlc = dv_vlc_map[0][level].vlc | sign;
-            size = dv_vlc_map[0][level].size;
+            *vlc = dv_vlc_map_vlc[0][level] | sign;
+            size = dv_vlc_map_size[0][level];
         } else {
             *vlc = 0xfe00 | (level << 1) | sign;
             size = 16;
         }
         if (run) {
-            *vlc |= ((run < 16) ? dv_vlc_map[run-1][0].vlc :
+            *vlc |= ((run < 16) ? dv_vlc_map_vlc[run-1][0] :
                                   (0x1f80 | (run - 1))) << size;
-            size += (run < 16) ? dv_vlc_map[run-1][0].size : 13;
+            size += (run < 16) ? dv_vlc_map_size[run-1][0] : 13;
         }
     }
 
@@ -584,12 +691,12 @@
     int size;
 
     if (run < DV_VLC_MAP_RUN_SIZE && level < DV_VLC_MAP_LEV_SIZE) {
-        size = dv_vlc_map[run][level].size;
+        size = dv_vlc_map_size[run][level];
     }
     else {
-        size = (level < DV_VLC_MAP_LEV_SIZE) ? dv_vlc_map[0][level].size : 16;
+        size = (level < DV_VLC_MAP_LEV_SIZE) ? dv_vlc_map_size[0][level] : 16;
         if (run) {
-            size += (run < 16) ? dv_vlc_map[run-1][0].size : 13;
+            size += (run < 16) ? dv_vlc_map_size[run-1][0] : 13;
         }
     }
     return size;
@@ -597,24 +704,29 @@
 #else
 static av_always_inline int dv_rl2vlc(int run, int l, int sign, uint32_t* vlc)
 {
-    *vlc = dv_vlc_map[run][l].vlc | sign;
-    return dv_vlc_map[run][l].size;
+    *vlc = dv_vlc_map_vlc[run][l] | sign;
+    return dv_vlc_map_size[run][l];
 }
 
 static av_always_inline int dv_rl2vlc_size(int run, int l)
 {
-    return dv_vlc_map[run][l].size;
+    return dv_vlc_map_size[run][l];
 }
 #endif
 
 typedef struct EncBlockInfo {
     int area_q[4];
     int bit_size[4];
-    int prev[5];
+    int prev[5]; /* first nonzero component before each area start (not used in DV100) */
     int cur_ac;
     int cno;
+    int min_qlevel; /* DV100 only: minimum qlevel (for AC coefficients >255) */
     int dct_mode;
     DCTELEM mb[64];
+    /* used by DV100 only: a copy of the weighted and classified but
+       not-yet-quantized AC coefficients.  this is necessary for
+       re-quantizing at different steps. */
+    DCTELEM save[64];
     uint8_t next[64];
     uint8_t sign[64];
     uint8_t partial_bit_count;
@@ -664,15 +776,15 @@
     return pb;
 }
 
-static av_always_inline void dv_set_class_number(DCTELEM* blk, EncBlockInfo* bi,
-                                              const uint8_t* zigzag_scan, const int *weight, int bias)
+static inline void dv_set_class_number_sd(DCTELEM* blk, EncBlockInfo* bi,
+					  const uint8_t* zigzag_scan, const int *weight, int bias)
 {
     int i, area;
     /* We offer two different methods for class number assignment: the
        method suggested in SMPTE 314M Table 22, and an improved
        method. The SMPTE method is very conservative; it assigns class
        3 (i.e. severe quantization) to any block where the largest AC
-       component is greater than 36. FFmpeg's DV encoder tracks AC bit
+       component is greater than 36. ffmpeg's DV encoder tracks AC bit
        consumption precisely, so there is no need to bias most blocks
        towards strongly lossy compression. Instead, we assign class 2
        to most blocks, and use class 3 only when strictly necessary
@@ -680,7 +792,7 @@
 
 #if 0 /* SMPTE spec method */
     static const int classes[] = {12, 24, 36, 0xffff};
-#else /* improved FFmpeg method */
+#else /* improved ffmpeg method */
     static const int classes[] = {-1, -1, 255, 0xffff};
 #endif
     int max=classes[0];
@@ -734,6 +846,133 @@
     }
 }
 
+/* After quantization, set the class number by looking at the largest
+   AC component. Increase the class number until it fits in 8 bits. */
+static inline void dv100_set_cno(EncBlockInfo *bi, int max, int bias)
+{
+    int prev, i;
+    int delta = 0;
+
+    /* starting cno */
+    bi->cno = bias;
+
+    /* bump the class number up if the maximum AC coefficient is too
+       large for 8 bits */
+    while ((max & ~(0xFF)) && (bi->cno < 3)) {
+	bi->cno++;
+	delta++;
+	max >>= 1;
+    }
+
+    /* if cno stays the same, we are done */
+    if(delta == 0) {
+	return;
+    }
+
+    /* divide AC components by 2^(delta), re-building the run-length table and
+       updating bit_size as we go */
+    bi->bit_size[0] = 4; /* EOB code is 4 bits */
+
+    /* skip through the run-length table, visiting all nonzero components */
+    prev = 0;
+
+    /* visit nonzero components and rescale them */
+    for (i = bi->next[prev]; i < 64; i = bi->next[i]) {
+	bi->mb[i] >>= delta;
+
+	/* clamp to max amplitude */
+	/* (yes, it is possible to hit this even when cno=3!) */
+	if (bi->mb[i] > 255)
+	    bi->mb[i] = 255;
+
+	/* maintain run-length table */
+	if (bi->mb[i]) {
+	    bi->bit_size[0] += dv_rl2vlc_size(i - prev - 1, bi->mb[i]);
+	    prev = i;
+	} else {
+	    bi->next[prev] = bi->next[i];
+	}
+    }
+    /*  mark EOB */
+    bi->next[prev] = i;
+}
+
+/* DV100 quantize
+   Perform quantization by divinding the AC component by the qstep.
+   As an optimization we use a fixed-point integer multiply instead
+   of a divide. */
+static av_always_inline int dv100_quantize(int level, int qsinv)
+{
+    /* this code is equivalent to */
+    /* return (level + qs/2) / qs; */
+
+    return (level * qsinv + 1024 + (1<<(dv100_qstep_bits-1))) >> dv100_qstep_bits;
+
+    /* the extra +1024 is needed to make the rounding come out right. */
+
+    /* I (DJM) have verified that the results are exactly the same as
+       division for level 0-2048 at all QNOs. */
+}
+
+/* this function just copies the DCT coefficients and performs
+   the initial (non-)quantization. */
+static inline void dv_set_class_number_hd(DCTELEM* blk, EncBlockInfo* bi,
+                                          const uint8_t* zigzag_scan, const int *weight, int bias)
+{
+    int i, max = 0;
+
+    /* the first quantization (none at all) */
+    bi->area_q[0] = 1;
+
+    /* LOOP1: weigh AC components and store to save[] */
+    /* (i=0 is the DC component; we only include it to make the
+       number of loop iterations even, for future possible SIMD optimization) */
+    for (i = 0; i < 64; i += 2) {
+	int level0, level1;
+
+	/* get the AC component (in zig-zag order) */
+	level0 = blk[zigzag_scan[i+0]];
+	level1 = blk[zigzag_scan[i+1]];
+
+	/* extract sign and make it the lowest bit */
+	bi->sign[i+0] = (level0>>31)&1;
+	bi->sign[i+1] = (level1>>31)&1;
+
+	/* take absolute value of the level */
+	level0 = FFABS(level0);
+	level1 = FFABS(level1);
+
+	/* weigh it */
+	level0 = (level0*weight[i+0] + 4096 + (1<<17)) >> 18;
+	level1 = (level1*weight[i+1] + 4096 + (1<<17)) >> 18;
+
+	/* save unquantized value */
+	bi->save[i+0] = level0;
+	bi->save[i+1] = level1;
+    }
+
+    /* find max component */
+    for (i = 0; i < 64; i++) {
+        int ac = bi->save[i];
+        if (ac > max)
+            max = ac;
+    }
+
+    /* copy DC component */
+    bi->mb[0] = blk[0];
+
+    /* the EOB code is 4 bits */
+    bi->bit_size[0] = 4;
+    bi->bit_size[1] = bi->bit_size[2] = bi->bit_size[3] = 0;
+
+    /* ensure that no AC coefficients are cut off */
+    bi->min_qlevel = ((max+256) >> 8);
+
+    bi->area_q[0] = 25; /* set to an "impossible" value */
+    bi->cno = 0;
+}
+
+
 //FIXME replace this by dsputil
 #define SC(x, y) ((s[x] - s[y]) ^ ((s[x] - s[y]) >> 7))
 static av_always_inline int dv_guess_dct_mode(DCTELEM *blk) {
@@ -760,7 +999,7 @@
     return (score88 - score248 > -10);
 }
 
-static inline void dv_guess_qnos(EncBlockInfo* blks, int* qnos)
+static inline void dv_guess_qnos_sd(EncBlockInfo* blks, int* qnos, int vs_total_ac_bits)
 {
     int size[5];
     int i, j, k, a, prev, a2;
@@ -829,19 +1068,235 @@
     }
 }
 
+static int dv100_actual_quantize(EncBlockInfo *b, int qlevel)
+{
+    int prev, k, qsinv;
+
+    int qno = DV100_QLEVEL_QNO(dv100_qlevels[qlevel]);
+    int cno = DV100_QLEVEL_CNO(dv100_qlevels[qlevel]);
+
+    if(b->area_q[0] == qno && b->cno == cno)
+        return b->bit_size[0];
+
+    qsinv = dv100_qstep_inv[qno];
+
+    /* record the new qstep */
+    b->area_q[0] = qno;
+    b->cno = cno;
+
+    /* reset encoded size (EOB = 4 bits) */
+    b->bit_size[0] = 4;
+
+    /* visit nonzero components and quantize */
+    prev = 0;
+    for (k = 1; k < 64; k++) {
+        /* quantize */
+        int ac = dv100_quantize(b->save[k], qsinv) >> cno;
+        if(ac) {
+            if(ac > 255)
+                ac = 255;
+
+            b->mb[k] = ac;
+            b->bit_size[0] += dv_rl2vlc_size(k - prev - 1, ac);
+            b->next[prev] = k;
+            prev = k;
+        }
+    }
+    b->next[prev] = k;
+
+    return b->bit_size[0];
+}
+
+static inline void dv_guess_qnos_hd(EncBlockInfo *blks, int* qnos, int vs_total_ac_bits, int qno_memory[5])
+{
+    EncBlockInfo *b;
+    int min_qlevel[5];
+    int qlevels[5];
+    int size[5];
+    int i, j;
+
+    static const int enable_finer = 1;
+
+    /* cache block sizes at hypothetical qlevels */
+    uint16_t size_cache[5*8][dv100_num_qlevels];
+
+    memset(size_cache, 0, sizeof(size_cache));
+
+    /* get minimum qlevels */
+    for (i = 0; i < 5; i++) {
+        min_qlevel[i] = 1;
+        for (j = 0; j < 8; j++) {
+            if (blks[8*i+j].min_qlevel > min_qlevel[i])
+                min_qlevel[i] = blks[8*i+j].min_qlevel;
+        }
+    }
+
+    /* initialize sizes */
+    for (i = 0; i < 5; i++) {
+        qlevels[i] = qno_memory[i];
+        if (qlevels[i] < min_qlevel[i])
+            qlevels[i] = min_qlevel[i];
+
+        qnos[i] = DV100_QLEVEL_QNO(dv100_qlevels[qlevels[i]]);
+	size[i] = 0;
+	for (j = 0; j < 8; j++) {
+            size_cache[8*i+j][qlevels[i]] = dv100_actual_quantize(&blks[8*i+j], qlevels[i]);
+            size[i] += size_cache[8*i+j][qlevels[i]];
+	}
+    }
+
+    /* must we go coarser? */
+    if((size[0]+size[1]+size[2]+size[3]+size[4]) > vs_total_ac_bits) {
+
+        int largest = (size[0] % 5); /* 'random' number */
+
+        do {
+            /* find the macroblock with the lowest qlevel */
+            for (i = 0; i < 5; i++) {
+                if ((qlevels[i] < (dv100_num_qlevels-1)) &&
+                    (qlevels[i] < qlevels[largest]))
+                    largest = i;
+            }
+
+            i = largest;
+
+            /* ensure that we don't enter infinite loop */
+            largest = (largest+1) % 5;
+
+            if (qlevels[i] >= (dv100_num_qlevels-1)) {
+                /* can't quantize any more */
+                continue;
+            }
+
+            /* quantize a little bit more */
+            qlevels[i] += dv100_qlevel_inc;
+            if (qlevels[i] > (dv100_num_qlevels-1))
+                qlevels[i] = dv100_num_qlevels-1;
+
+            qnos[i] = DV100_QLEVEL_QNO(dv100_qlevels[qlevels[i]]);
+            size[i] = 0;
+
+            /* for each block */
+            b = &blks[8*i];
+            for (j = 0; j < 8; j++, b++) {
+                /* accumulate block size into macroblock */
+                if(size_cache[8*i+j][qlevels[i]] == 0) {
+                    /* it is safe to use actual_quantize() here because we only go from finer to coarser,
+                       and it saves the final actual_quantize() down below */
+                    size_cache[8*i+j][qlevels[i]] = dv100_actual_quantize(b, qlevels[i]);
+                }
+                size[i] += size_cache[8*i+j][qlevels[i]];
+            } /* for each block */
+
+        } while ((vs_total_ac_bits < (size[0] + size[1] + size[2] + size[3] + size[4])) &&
+                 ((qlevels[0] < (dv100_num_qlevels-1)) || (qlevels[1] < (dv100_num_qlevels-1)) || (qlevels[2] < (dv100_num_qlevels-1)) || (qlevels[3] < (dv100_num_qlevels-1)) || (qlevels[4] < (dv100_num_qlevels-1))));
+
+    // can we go finer?
+    } else if(enable_finer &&
+              ((size[0]+size[1]+size[2]+size[3]+size[4]) < vs_total_ac_bits)) {
+
+        int save_qlevel;
+        int largest = (size[0] % 5); /* 'random' number */
+
+        while((qlevels[0] > min_qlevel[0]) ||
+              (qlevels[1] > min_qlevel[1]) ||
+              (qlevels[2] > min_qlevel[2]) ||
+              (qlevels[3] > min_qlevel[3]) ||
+              (qlevels[4] > min_qlevel[4])) {
+
+            /* find the macroblock with the highest qlevel */
+            for (i = 0; i < 5; i++) {
+                if ((qlevels[i] > min_qlevel[i]) && (qlevels[i] > qlevels[largest]))
+                    largest = i;
+            }
+
+            i = largest;
+
+            /* ensure that we don't enter infinite loop */
+            largest = (largest+1) % 5;
+
+            if (qlevels[i] <= min_qlevel[i]) {
+                /* can't unquantize any more */
+                continue;
+            }
+
+            /* quantize a little bit less */
+            save_qlevel = qlevels[i];
+            qlevels[i] -= dv100_qlevel_inc;
+            if (qlevels[i] < min_qlevel[i])
+                qlevels[i] = min_qlevel[i];
+
+            qnos[i] = DV100_QLEVEL_QNO(dv100_qlevels[qlevels[i]]);
+
+            size[i] = 0;
+
+            /* for each block */
+            b = &blks[8*i];
+            for (j = 0; j < 8; j++, b++) {
+                /* accumulate block size into macroblock */
+                if(size_cache[8*i+j][qlevels[i]] == 0) {
+                    size_cache[8*i+j][qlevels[i]] = dv100_actual_quantize(b, qlevels[i]);
+                }
+                size[i] += size_cache[8*i+j][qlevels[i]];
+            } /* for each block */
+
+            /* did we bust the limit? */
+            if(vs_total_ac_bits < (size[0] + size[1] + size[2] + size[3] + size[4])) {
+                /* go back down and exit */
+                qlevels[i] = save_qlevel;
+                qnos[i] = DV100_QLEVEL_QNO(dv100_qlevels[qlevels[i]]);
+                break;
+            }
+        }
+    }
+
+    /* now do the actual quantization */
+    for(i = 0; i < 5; i++) {
+        /* for each block */
+        b = &blks[8*i];
+        size[i] = 0;
+        for (j = 0; j < 8; j++, b++) {
+            /* accumulate block size into macroblock */
+            size[i] += dv100_actual_quantize(b, qlevels[i]);
+        } /* for each block */
+        qno_memory[i] = qlevels[i];
+    }
+}
+
+/* update all cno values into the blocks, over-writing the old values without
+   touching anything else. (only used for DV100) */
+static inline void dv_revise_cnos(uint8_t *dif, EncBlockInfo *blk, const DVprofile *profile)
+{
+    uint8_t *data;
+    int mb_index, j;
+
+    for (mb_index = 0; mb_index < 5; mb_index++) {
+	data = dif + mb_index*80 + 4;
+	for (j = 0; j < profile->bpm; j++) {
+	    /* zero out the class number */
+	    data[1] &= 0xCF;
+	    /* add the new one */
+	    data[1] |= blk[profile->bpm*mb_index+j].cno << 4;
+
+	    data += profile->block_sizes[j]/8;
+	}
+    }
+}
+
 static inline void dv_encode_video_segment(DVVideoContext *s,
                                            uint8_t *dif,
-                                           const uint16_t *mb_pos_ptr)
+                                           const int mb_pos_ptr[10],
+                                           int qno_memory[5])
 {
-    int mb_index, i, j, v;
+    int mb_index, i, j;
     int mb_x, mb_y, c_offset, linesize;
     uint8_t*  y_ptr;
     uint8_t*  data;
     uint8_t*  ptr;
     int       do_edge_wrap;
     DECLARE_ALIGNED_16(DCTELEM, block[64]);
-    EncBlockInfo  enc_blks[5*6];
-    PutBitContext pbs[5*6];
+    EncBlockInfo  enc_blks[5*DV_MAX_BPM];
+    PutBitContext pbs[5*DV_MAX_BPM];
     PutBitContext* pb;
     EncBlockInfo* enc_blk;
     int       vs_bit_size = 0;
@@ -852,18 +1307,48 @@
     enc_blk = &enc_blks[0];
     pb = &pbs[0];
     for(mb_index = 0; mb_index < 5; mb_index++) {
-        v = *mb_pos_ptr++;
-        mb_x = v & 0xff;
-        mb_y = v >> 8;
-        y_ptr = s->picture.data[0] + ((mb_y * s->picture.linesize[0] + mb_x)<<3);
-        c_offset = (((mb_y>>(s->sys->pix_fmt == PIX_FMT_YUV420P)) * s->picture.linesize[1] +
-                     (mb_x>>((s->sys->pix_fmt == PIX_FMT_YUV411P)?2:1)))<<3);
+
+	/* DV100 DCT mode is per-macroblock, not per-block */
+	int dv100_dct_mode = 0;
+
+        mb_x = *mb_pos_ptr++;
+        mb_y = *mb_pos_ptr++;
+	if (s->sys->pix_fmt == PIX_FMT_YUV422P) {
+            y_ptr = s->picture.data[0] + (mb_y * s->picture.linesize[0] * 8) + (mb_x * 4);
+        } else { /* 4:1:1 or 4:2:0 */
+            y_ptr = s->picture.data[0] + (mb_y * s->picture.linesize[0] * 8) + (mb_x * 8);
+        }
+	if (s->sys->pix_fmt == PIX_FMT_YUV420P) {
+            c_offset = (((mb_y >> 1) * s->picture.linesize[1] * 8) + ((mb_x >> 1) * 8));
+        } else { /* 4:2:2 or 4:1:1 */
+            c_offset = ((mb_y * s->picture.linesize[1] * 8) + ((mb_x >> 2) * 8));
+        }
         do_edge_wrap = 0;
-        qnos[mb_index] = 15; /* No quantization */
+	/* Start with no quantization (15 for 25/50Mbps, 1 for 100Mbps) */
+        qnos[mb_index] = DV_PROFILE_IS_HD(s->sys) ? 1 : 15;
         ptr = dif + mb_index*80 + 4;
-        for(j = 0;j < 6; j++) {
+        for(j = 0;j < s->sys->bpm; j++) {
             int dummy = 0;
-            if (s->sys->pix_fmt == PIX_FMT_YUV422P) { /* 4:2:2 */
+	    if (DV_PROFILE_IS_HD(s->sys)) { /* all HD formats */
+		if (j < 4) {  /* Four Y blocks */
+                    /* NOTE: at bottom of image in 1080i50/60, the macroblock is handled as 411 */
+                    if (s->sys->height == 1080 && mb_y == 134) {
+                        data = y_ptr + (j * 8);
+                    } else {
+                        data = y_ptr + ((j & 1) * 8) + ((j >> 1) * 8 * s->picture.linesize[0]);
+                    }
+                    linesize = s->picture.linesize[0];
+                } else {      /* Cr and Cb blocks */
+		    int chan = 2 - ((j-4)>>1);
+		    if (s->sys->height == 1080 && mb_y == 134) {
+			/* bottom edge: horizontal row of 2 blocks */
+			data = s->picture.data[chan] + c_offset + ((j&1) * 8);
+		    } else {
+			data = s->picture.data[chan] + c_offset + ((j&1) * 8 * s->picture.linesize[chan]);
+		    }
+		    linesize = s->picture.linesize[chan];
+		}
+	    } else if (s->sys->pix_fmt == PIX_FMT_YUV422P) { /* 4:2:2 */
                 if (j == 0 || j == 2) {
                     /* Y0 Y1 */
                     data = y_ptr + ((j>>1) * 8);
@@ -896,6 +1381,29 @@
                 }
             }
 
+            /* decide whether to use DV100 field macroblock mode */
+            /* note that 4x1 "bottom macro blocks" cannot use field mode */
+            if ((s->sys->height == 1080) && (j == 0) &&
+                /* some decoders appear not to support field mode in the entire
+                   1080i60 A0-A16 or 1080i50 A0-A1 regions, even though not all
+                   of those macroblocks are "bottom macro blocks" */
+                ((DV_PROFILE_IS_1080i50(s->sys) && (mb_y != 0) && (mb_y != 134)) ||
+                 (DV_PROFILE_IS_1080i60(s->sys) && (mb_y >= 8) && (mb_y < 128)))
+                && (s->avctx->flags & CODEC_FLAG_INTERLACED_DCT)) {
+                /* XXX could have a better heuristic for this */
+                int p = 0, q = 0, line;
+                for (line=0;line<6;line++) {
+                    for (i=0;i<8;i++) {
+                        int dp, dq;
+                        dp = data[(line+0)*linesize+i] - data[(line+1)*linesize+i];
+                        dq = data[(line+0)*linesize+i] - data[(line+2)*linesize+i];
+                        p += dp*dp;
+                        q += dq*dq;
+                    }
+                }
+                dv100_dct_mode = (p>(q-100));
+            }
+
             /* Everything is set up -- now just copy data -> DCT block */
             if (do_edge_wrap) {  /* Edge wrap copy: 4x16 -> 8x8 */
                 uint8_t* d;
@@ -907,12 +1415,45 @@
                    data += linesize;
                    b += 8;
                 }
+	    } else if (dv100_dct_mode) { /* DV100 field DCT */
+                DCTELEM *b = block;
+		uint8_t *data0, *data1, *d;
+		int off;
+		if (s->sys->height == 1080 && mb_y == 134) {
+		    off = 16;
+		} else {
+		    off = 8*linesize;
+		}
+		if(j < 2 || j == 4 || j == 6) {
+		    data0 = data;
+		    data1 = data + off;
+		} else {
+		    data0 = data - off;
+		    data1 = data;
+		    data0 += linesize;
+		    data1 += linesize;
+		}
+		d = data0;
+		for (i=0;i<4;i++) {
+		    b[0] = d[0]; b[1] = d[1]; b[2] = d[2]; b[3] = d[3];
+		    b[4] = d[4]; b[5] = d[5]; b[6] = d[6]; b[7] = d[7];
+		    b += 8;
+		    d += 2*linesize;
+		}
+		d = data1;
+		for (i=0;i<4;i++) {
+		    b[0] = d[0]; b[1] = d[1]; b[2] = d[2]; b[3] = d[3];
+		    b[4] = d[4]; b[5] = d[5]; b[6] = d[6]; b[7] = d[7];
+		    b += 8;
+		    d += 2*linesize;
+		}
             } else {             /* Simple copy: 8x8 -> 8x8 */
                 if (!dummy)
                     s->get_pixels(block, data, linesize);
             }
 
-            if(s->avctx->flags & CODEC_FLAG_INTERLACED_DCT)
+            if((s->avctx->flags & CODEC_FLAG_INTERLACED_DCT) &&
+	       !DV_PROFILE_IS_HD(s->sys))
                 enc_blk->dct_mode = dv_guess_dct_mode(block);
             else
                 enc_blk->dct_mode = 0;
@@ -929,14 +1470,28 @@
                 s->fdct[enc_blk->dct_mode](block);
             }
 
-            dv_set_class_number(block, enc_blk,
-                                enc_blk->dct_mode ? ff_zigzag248_direct : ff_zigzag_direct,
-                                enc_blk->dct_mode ? dv_weight_248 : dv_weight_88,
-                                j/4);
+	    if (DV_PROFILE_IS_HD(s->sys)) {
+		const int *weights;
+		if (s->sys->height == 1080) {
+		    weights = (j < 4) ? dv_weight_1080_y : dv_weight_1080_c;
+		} else { /* 720p */
+		    weights = (j < 4) ? dv_weight_720_y : dv_weight_720_c;
+		}
+		dv_set_class_number_hd(block, enc_blk,
+				       ff_zigzag_direct,
+				       weights,
+				       dv100_min_bias+(j>>2)*dv100_chroma_bias);
+	    } else {
+		dv_set_class_number_sd(block, enc_blk,
+				       enc_blk->dct_mode ? ff_zigzag248_direct : ff_zigzag_direct,
+				       enc_blk->dct_mode ? dv_weight_248 : dv_weight_88,
+				       j>>2);
+	    }
 
             init_put_bits(pb, ptr, s->sys->block_sizes[j]/8);
+
             put_bits(pb, 9, (uint16_t)(((enc_blk->mb[0] >> 3) - 1024 + 2) >> 2));
-            put_bits(pb, 1, enc_blk->dct_mode);
+            put_bits(pb, 1, DV_PROFILE_IS_HD(s->sys) ? ((j == 0) ? dv100_dct_mode : 1) : enc_blk->dct_mode);
             put_bits(pb, 2, enc_blk->cno);
 
             vs_bit_size += enc_blk->bit_size[0] + enc_blk->bit_size[1] +
@@ -947,63 +1502,473 @@
         }
     }
 
-    if (vs_total_ac_bits < vs_bit_size)
-        dv_guess_qnos(&enc_blks[0], &qnos[0]);
+    if (DV_PROFILE_IS_HD(s->sys)) {
+        /* unconditional */
+        dv_guess_qnos_hd(&enc_blks[0], &qnos[0], s->sys->vs_total_ac_bits, qno_memory);
+    } else if (s->sys->vs_total_ac_bits < vs_bit_size) {
+        dv_guess_qnos_sd(&enc_blks[0], &qnos[0], s->sys->vs_total_ac_bits);
+    }
 
     for (i=0; i<5; i++) {
        dif[i*80 + 3] = qnos[i];
     }
 
     /* First pass over individual cells only */
-    for (j=0; j<5*6; j++)
+    for (j=0; j<5*s->sys->bpm; j++)
        dv_encode_ac(&enc_blks[j], &pbs[j], &pbs[j+1]);
 
     /* Second pass over each MB space */
-    for (j=0; j<5*6; j+=6) {
+    for (j=0; j<5*s->sys->bpm; j+=s->sys->bpm) {
         pb= &pbs[j];
-        for (i=0; i<6; i++) {
+        for (i=0; i<s->sys->bpm; i++) {
             if (enc_blks[i+j].partial_bit_count)
-                pb=dv_encode_ac(&enc_blks[i+j], pb, &pbs[j+6]);
+                pb=dv_encode_ac(&enc_blks[i+j], pb, &pbs[j+s->sys->bpm]);
         }
     }
 
     /* Third and final pass over the whole vides segment space */
     pb= &pbs[0];
-    for (j=0; j<5*6; j++) {
+    for (j=0; j<5*s->sys->bpm; j++) {
        if (enc_blks[j].partial_bit_count)
-           pb=dv_encode_ac(&enc_blks[j], pb, &pbs[6*5]);
+           pb=dv_encode_ac(&enc_blks[j], pb, &pbs[s->sys->bpm*5]);
        if (enc_blks[j].partial_bit_count)
             av_log(NULL, AV_LOG_ERROR, "ac bitstream overflow\n");
     }
 
-    for (j=0; j<5*6; j++)
+    for (j=0; j<5*s->sys->bpm; j++)
        flush_put_bits(&pbs[j]);
+
+    if (DV_PROFILE_IS_HD(s->sys))
+	dv_revise_cnos(dif, enc_blks, s->sys);
 }
 
+/* macroblock permutations common to all formats */
+static const uint8_t super_x_order[] = {2,1,3,0,4};
+static const uint8_t super_y_bases[] = {2,6,8,0,4};
+
+void find_macroblock_dv25_411(const struct DVprofile *sys, int channel, int seq, int av, int seg, int mbloc[10])
+{
+    /* starting x coordinate of horizontal superblocks, in units of blocks */
+    static const uint8_t super_x_starts[] = {0,4,9,13,18};
+
+    int mb_index;
+    int *mb = &mbloc[0];
+    for (mb_index = 0; mb_index < 5; mb_index++, mb += 2) {
+	/* index of this block within the DIF sequence (0-135) */
+	int vid_block_num = av*15 + seg*5 + mb_index;
+
+	/* X and Y indices of the superblock we're inside */
+	int super_x = super_x_order[vid_block_num % 5];
+	int super_y = (super_y_bases[vid_block_num % 5] + seq) % sys->difseg_size;
+
+	/* index within the superblock */
+	int within_super = vid_block_num / 5;
+
+	/* locate us within the superblock's "Tetris" pattern */
+	int within_super_x, within_super_y;
+
+	if (super_x & 1) {
+	    /* super_x is ODD */
+	    if (within_super < 3) {
+		within_super_x = 0;
+		within_super_y = 3 + within_super;
+	    } else if (within_super < 9) {
+		within_super_x = 1;
+		within_super_y = 5 - (within_super-3);
+	    } else if (within_super < 15) {
+		within_super_x = 2;
+		within_super_y = (within_super-9);
+	    } else if (within_super < 21) {
+		within_super_x = 3;
+		within_super_y = 5 - (within_super-15);
+	    } else {
+		within_super_x = 4;
+		within_super_y = (within_super-21);
+	    }
+	} else {
+	    /* super_x is EVEN */
+	    if (within_super < 6) {
+		within_super_x = 0;
+		within_super_y = within_super;
+	    } else if (within_super < 12) {
+		within_super_x = 1;
+		within_super_y = 5 - (within_super-6);
+	    } else if (within_super < 18) {
+		within_super_x = 2;
+		within_super_y = (within_super - 12);
+	    } else if (within_super < 24) {
+		within_super_x = 3;
+		within_super_y = 5 - (within_super-18);
+	    } else {
+		within_super_x = 4;
+		within_super_y = (within_super-24);
+		/* special case for rightmost superblock */
+		if (super_x == 4) {
+		    within_super_y *= 2;
+		}
+	    }
+	}
+
+	mb[0] = 4*(super_x_starts[super_x] + within_super_x);
+	mb[1] = 6*super_y + within_super_y;
+    }
+}
+
+/* return x,y given an index into the 9x3 brick pattern */
+static void macroblock_brick_pattern(int within_super, int *within_super_x, int *within_super_y)
+{
+    if (within_super < 3) {
+	*within_super_x = 0;
+	*within_super_y = within_super;
+    } else if (within_super < 6) {
+	*within_super_x = 1;
+	*within_super_y = 2 - (within_super-3);
+    } else if (within_super < 9) {
+	*within_super_x = 2;
+	*within_super_y = (within_super-6);
+    } else if (within_super < 12) {
+	*within_super_x = 3;
+	*within_super_y = 2 - (within_super-9);
+    } else if (within_super < 15) {
+	*within_super_x = 4;
+	*within_super_y = (within_super-12);
+    } else if (within_super < 18) {
+	*within_super_x = 5;
+	*within_super_y = 2 - (within_super-15);
+    } else if (within_super < 21) {
+	*within_super_x = 6;
+	*within_super_y = (within_super-18);
+    } else if (within_super < 24) {
+	*within_super_x = 7;
+	*within_super_y = 2 - (within_super-21);
+    } else {
+	*within_super_x = 8;
+	*within_super_y = (within_super-24);
+    }
+}
+
+void find_macroblock_dv25_420(const struct DVprofile *sys, int channel, int seq, int av, int seg, int mbloc[10])
+{
+    int mb_index;
+    int *mb = &mbloc[0];
+    for (mb_index = 0; mb_index < 5; mb_index++, mb += 2) {
+	/* index of this block within the DIF sequence (0-135) */
+	int vid_block_num = av*15 + seg*5 + mb_index;
+
+	/* X and Y indices of the superblock we're inside */
+	int super_x = super_x_order[vid_block_num % 5];
+	int super_y = (super_y_bases[vid_block_num % 5] + seq) % sys->difseg_size;
+
+	/* index within the superblock */
+	int within_super = vid_block_num / 5;
+
+	/* locate us within the superblock's "brick" pattern */
+	int within_super_x, within_super_y;
+
+	macroblock_brick_pattern(within_super, &within_super_x, &within_super_y);
+
+	mb[0] = 2*(9*super_x + within_super_x);
+	mb[1] = 2*(3*super_y + within_super_y);
+    }
+}
+
+void find_macroblock_dv50(const struct DVprofile *sys, int channel, int seq, int av, int seg, int mbloc[10])
+{
+    int mb_index;
+    int *mb = &mbloc[0];
+    for (mb_index = 0; mb_index < 5; mb_index++, mb += 2) {
+
+	/* index of this block within the DIF sequence (0-135) */
+	int vid_block_num = av*15 + seg*5 + mb_index;
+
+	int ysupers = 2 * sys->difseg_size;
+
+	/* X and Y indices of the superblock we're inside */
+	int super_x = super_x_order[vid_block_num % 5];
+	int super_y = (2*(super_y_bases[vid_block_num % 5] + seq) + channel) % ysupers;
+
+	/* index within the superblock */
+	int within_super = vid_block_num / 5;
+
+	/* locate us within the superblock's "brick" pattern */
+	int within_super_x, within_super_y;
+
+	macroblock_brick_pattern(within_super, &within_super_x, &within_super_y);
+
+	/* macroblocks are 16x8 pixels */
+	mb[0] = 4*(9*super_x + within_super_x);
+	mb[1] = (3*super_y + within_super_y);
+    }
+}
+
+void find_macroblock_dv100_1080i60(const struct DVprofile *sys, int channel, int seq, int av, int seg, int mbloc[10])
+{
+    /* starting 't' values indexed by DIF sequence */
+    static const uint8_t t_starts[] = {0,2,4,1,3,0,2,4,1,3};
+
+    int mb_index;
+    int *mb = &mbloc[0];
+    for (mb_index = 0; mb_index < 5; mb_index++, mb += 2) {
+	/* one "divided block" h  per channel (0-3) */
+	int hx = channel & 1;
+	int hy = channel >>1;
+
+	/* X and Y indices of the superblock we're inside */
+	/* superblocks are 9x3 blocks */
+	int super_x = super_x_order[mb_index];
+
+	/* the superblock y coordinates use a permutation */
+
+	int s = seq/5; /* first half of channel? */
+	int t = (t_starts[seq] + av*3 + seg) % 5;
+
+	int super_y = (super_y_bases[mb_index] + 4*channel + s + 2*t) % 10;
+
+	/* index within the superblock */
+	int within_super = ((av*3 + seg + 27*seq)/5) % 27;
+
+	/* locate us within the superblock's "brick" pattern */
+	int within_super_x = within_super % 9;
+	int within_super_y = within_super / 9;
+
+	/* block x,y coordinates within divided block */
+	int divblock_x = (9*super_x + within_super_x);
+	int divblock_y = (3*super_y + within_super_y);
+
+	/* coordinates within rearranged frame */
+	int re_x = 18*(divblock_x/9) + 9*hx + (divblock_x % 9);
+	int re_y = 2*divblock_y + hy;
+
+	/* de-rearrange the macroblock */
+	int block_x, block_y;
+	if (re_x >= 80) {
+	    /* right edge strip */
+	    if (re_y < 32) {
+		/* A0-A7 */
+		block_x = 10 * (re_y/4) + (re_x-80);
+		block_y = re_y % 4;
+	    } else if (re_y < 56) {
+		/* A8-A15 */
+		block_x = 10*((re_y-32)/3) + (re_x - 80);
+		block_y = 64 + (re_y-32) % 3;
+	    } else {
+		/* B16 */
+		block_x = 10*(re_y-56) + ((re_x - 80) % 10);
+		block_x *= 2; /* B blocks are twice as wide as A blocks */
+		block_y = 67;
+	    }
+	} else {
+	    block_x = re_x;
+	    block_y = re_y + 4;
+	}
+
+	/* macroblocks are 16x16 pixels */
+	mb[0] = 4*block_x;
+	mb[1] = 2*block_y;
+    }
+}
+
+void find_macroblock_dv100_1080i50(const struct DVprofile *sys, int channel, int seq, int av, int seg, int mbloc[10])
+{
+    int mb_index;
+    int *mb = &mbloc[0];
+    for (mb_index = 0; mb_index < 5; mb_index++, mb += 2) {
+	/* one "divided block" h  per channel (0-3) */
+	int hx = channel & 1;
+	int hy = channel >>1;
+
+	/* X and Y indices of the superblock we're inside */
+	/* superblocks are 9x3 blocks */
+	int super_x, super_y;
+
+	/* index within the superblock */
+	int within_super;
+
+	/* macroblock location */
+	int block_x, block_y;
+
+	if (channel == 0 && seq == 11) { /* edge unit */
+	    super_x = mb_index;
+	    super_y = 0;
+
+	    within_super = (av*3 + seg + 27*seq) % 27;
+	    block_x = 27*super_x + within_super;
+
+	    if (block_x < 90) { /* A0 */
+		block_y = 0;
+	    } else { /* A1 */
+		/* A1 macroblocks are wide and short */
+		block_x = 2*(block_x-90);
+		block_y = 67;
+	    }
+	} else {
+	    static const int super_y_pattern[] =  {0,5,10,4,9,3,8,2,7,1,6};
+	    int within_super_x, within_super_y;
+	    int divblock_x, divblock_y;
+	    int re_x, re_y;
+
+	    super_x = super_x_order[mb_index];
+
+	    /* the superblock y coordinates use a permutation */
+	    super_y = (super_y_bases[mb_index] + super_y_pattern[(seq+3*channel)%11] + seg + av*3) % 11;
+
+	    within_super = ((av*3 + seg + 27*seq)/11) % 27;
+
+	    /* locate us within the superblock's "brick" pattern */
+	    within_super_x = within_super % 9;
+	    within_super_y = within_super / 9;
+
+	    /* block x,y coordinates within divided block */
+	    divblock_x = (9*super_x + within_super_x);
+	    divblock_y = (3*super_y + within_super_y);
+
+	    /* coordinates within rearranged frame */
+	    re_x = 18*(divblock_x/9) + 9*hx + (divblock_x % 9);
+	    re_y = 2*divblock_y + hy;
+
+	    block_x = re_x;
+	    block_y = re_y + 1;
+	    assert(block_x >= 0 && block_x < 90);
+	    assert(block_y >= 0 && block_y < 67);
+	}
+
+	/* macroblocks are 16x16 pixels */
+	mb[0] = 4*block_x;
+	mb[1] = 2*block_y;
+    }
+}
+
+void find_macroblock_dv100_720p60(const struct DVprofile *sys, int channel, int seq, int av, int seg, int mbloc[10])
+{
+    /* starting 't' values indexed by DIF sequence */
+    static const uint8_t t_starts[] = {0,2,4,1,3,0,2,4,1,3};
+
+    int mb_index;
+    int *mb = &mbloc[0];
+    for (mb_index = 0; mb_index < 5; mb_index++, mb += 2) {
+	/* one "divided block" h  per channel (0-3) */
+	int hx = channel & 1;
+	int hy = channel >>1;
+
+	/* X and Y indices of the superblock we're inside */
+	/* superblocks are 9x3 blocks */
+	int super_x = super_x_order[mb_index];
+
+	/* the superblock y coordinates use a permutation */
+
+	int s = seq/5; /* first half of channel? */
+	int t = (t_starts[seq] + av*3 + seg) % 5;
+
+	int super_y = (super_y_bases[mb_index] + 4*channel + s + 2*t) % 10;
+
+	/* index within the superblock */
+	int within_super = ((av*3 + seg + 27*seq)/5) % 27;
+
+	/* locate us within the superblock's "tetris" pattern */
+	int within_super_x, within_super_y;
+	int divblock_x, divblock_y;
+	int block_x, block_y;
+
+	if (super_y & 1) { /* lower tetris */
+	    if (within_super < 3) {
+		within_super_x = 3 + within_super;
+		within_super_y = 4;
+	    } else if (within_super < 9) {
+		within_super_x = within_super - 3;
+		within_super_y = 5;
+	    } else if (within_super < 15) {
+		within_super_x = within_super - 9;
+		within_super_y = 6;
+	    } else if (within_super < 21) {
+		within_super_x = within_super - 15;
+		within_super_y = 7;
+	    } else {
+		within_super_x = within_super - 21;
+		within_super_y = 8;
+	    }
+	} else { /* upper tetris */
+	    if (within_super < 6) {
+		within_super_x = within_super;
+		within_super_y = 0;
+	    } else if (within_super < 12) {
+		within_super_x = within_super - 6;
+		within_super_y = 1;
+	    } else if (within_super < 18) {
+		within_super_x = within_super - 12;
+		within_super_y = 2;
+	    } else if (within_super < 24) {
+		within_super_x = within_super - 18;
+		within_super_y = 3;
+	    } else {
+		within_super_x = within_super - 24;
+		within_super_y = 4;
+	    }
+	}
+
+	/* block x,y coordinates within divided block */
+	divblock_x = (6*super_x + within_super_x);
+	divblock_y = (9*(super_y>>1) + within_super_y);
+
+	/* coordinates within rearranged frame */
+	block_x = 12*(divblock_x/6) + 6*hx + (divblock_x % 6);
+	block_y = divblock_y + 45*hy;
+
+	/* macroblocks are 16x16 pixels */
+	mb[0] = 4*block_x;
+	mb[1] = 2*block_y;
+    }
+}
+
 static int dv_decode_mt(AVCodecContext *avctx, void* sl)
 {
     DVVideoContext *s = avctx->priv_data;
-    int slice = (size_t)sl;
+    int i;
 
-    /* which DIF channel is this? */
-    int chan = slice / (s->sys->difseg_size * 27);
+    for (i = 0; i < s->sys->n_difchan*27; i++) {
+	int slice = ((size_t)sl)*s->sys->n_difchan*27 + i;
 
-    /* slice within the DIF channel */
-    int chan_slice = slice % (s->sys->difseg_size * 27);
+	/* which DIF channel is this? */
+	int chan = slice / (s->sys->difseg_size * 27);
 
-    /* byte offset of this channel's data */
-    int chan_offset = chan * s->sys->difseg_size * 150 * 80;
+	/* slice within the DIF channel */
+	int chan_slice = slice % (s->sys->difseg_size * 27);
 
-    /* DIF sequence */
-    int seq = chan_slice / 27;
+	/* DIF sequence */
+	int seq = chan_slice / 27;
 
-    /* in 1080i50 and 720p50 some seq are unused */
-    if ((DV_PROFILE_IS_1080i50(s->sys) && chan != 0 && seq == 11) ||
-        (DV_PROFILE_IS_720p50(s->sys) && seq > 9))
-        return 0;
+	/* AV sequence */
+	int av = (chan_slice/3) % 9;
 
-    dv_decode_video_segment(s, &s->buf[(seq*6+(chan_slice/3)+chan_slice*5+7)*80 + chan_offset],
-                            &s->sys->video_place[slice*5]);
+	/* video segment */
+	int seg = chan_slice % 3;
+
+	/* byte offset of this channel's data */
+	int chan_offset = chan * s->sys->difseg_size * 150 * 80;
+
+	/* first byte of first DIF block in this video segment */
+	uint8_t *dif = &s->buf[((chan_slice/27)*6+(chan_slice/3)+chan_slice*5+7)*80 + chan_offset];
+
+	/* macroblock locations (x,y for each of the 5 macroblocks) */
+	int mbloc[5*2];
+
+	/* in 1080i50, channel !=0 / seq == 11 are unused */
+	if (DV_PROFILE_IS_1080i50(s->sys) && chan != 0 && seq == 11)
+	    continue;
+
+	if (s->sys->find_macroblock) {
+	    s->sys->find_macroblock(s->sys, chan, seq, av, seg, mbloc);
+	} else {
+	    int i;
+	    int *mb = &mbloc[0];
+	    for (i = 0; i < 5; i++, mb += 2) {
+		uint32_t v = s->sys->video_place[slice*5 + i];
+		mb[0] = v & 0xff;
+		mb[1] = v >> 8;
+	    }
+	}
+
+	dv_decode_video_segment(s, dif, mbloc);
+    }
     return 0;
 }
 
@@ -1011,26 +1976,72 @@
 static int dv_encode_mt(AVCodecContext *avctx, void* sl)
 {
     DVVideoContext *s = avctx->priv_data;
-    int slice = (size_t)sl;
+    /* maintain QNOs used for last set of macroblocks
+       as a starting point for future macroblocks
+       (for speed optimization only, doesn't affect quality) */
+    int qno_memory[5];
+    int i;
 
-    /* which DIF channel is this? */
-    int chan = slice / (s->sys->difseg_size * 27);
+    for (i = 0; i < 5; i++)
+        qno_memory[i] = dv100_starting_qno;
 
-    /* slice within the DIF channel */
-    int chan_slice = slice % (s->sys->difseg_size * 27);
+    for (i = 0; i < s->sys->n_difchan*27; i++) {
+	int slice = ((size_t)sl)*s->sys->n_difchan*27 + i;
 
-    /* byte offset of this channel's data */
-    int chan_offset = chan * s->sys->difseg_size * 150 * 80;
+	/* which DIF channel is this? */
+	int chan = slice / (s->sys->difseg_size * 27);
 
-    dv_encode_video_segment(s, &s->buf[((chan_slice/27)*6+(chan_slice/3)+chan_slice*5+7)*80 + chan_offset],
-                            &s->sys->video_place[slice*5]);
+	/* slice within the DIF channel */
+	int chan_slice = slice % (s->sys->difseg_size * 27);
+
+	/* DIF sequence */
+	int seq = chan_slice / 27;
+
+	/* AV sequence */
+	int av = (chan_slice/3) % 9;
+
+	/* video segment */
+	int seg = chan_slice % 3;
+
+	/* byte offset of this channel's data */
+	int chan_offset = chan * s->sys->difseg_size * 150 * 80;
+
+	/* first byte of first DIF block in this video segment */
+	uint8_t *dif = &s->buf[((chan_slice/27)*6+(chan_slice/3)+chan_slice*5+7)*80 + chan_offset];
+
+	/* macroblock locations (x,y for each of the 5 macroblocks) */
+	int mbloc[5*2];
+
+	/* in 1080i50, channel !=0 / seq == 11 are unused */
+	if (DV_PROFILE_IS_1080i50(s->sys) && chan != 0 && seq == 11) {
+	    /* clear the dummy DIF blocks */
+	    int b;
+	    for (b = 0; b < 5; b++, dif += 80)
+		memset(dif+3, 0xff, 77);
+	    continue;
+	}
+
+	if (s->sys->find_macroblock) {
+	    s->sys->find_macroblock(s->sys, chan, seq, av, seg, mbloc);
+	} else {
+	    int i;
+	    int *mb = &mbloc[0];
+	    for (i = 0; i < 5; i++, mb += 2) {
+		uint32_t v = s->sys->video_place[slice*5 + i];
+		mb[0] = v & 0xff;
+		mb[1] = v >> 8;
+	    }
+	}
+
+	dv_encode_video_segment(s, dif, mbloc, qno_memory);
+    }
     return 0;
 }
 #endif
 
-#ifdef CONFIG_DVVIDEO_DECODER
+#ifdef CONFIG_DECODERS
 /* NOTE: exactly one frame must be given (120000 bytes for NTSC,
-   144000 bytes for PAL - or twice those for 50Mbps) */
+   144000 bytes for PAL - or twice those for 50Mbps - or 4x for 100Mbps) */
 static int dvvideo_decode_frame(AVCodecContext *avctx,
                                  void *data, int *data_size,
                                  const uint8_t *buf, int buf_size)
@@ -1048,7 +2059,7 @@
     s->picture.key_frame = 1;
     s->picture.pict_type = FF_I_TYPE;
     avctx->pix_fmt = s->sys->pix_fmt;
-    avctx->time_base = s->sys->time_base;
+    avctx->time_base = (AVRational){s->sys->frame_rate_base, s->sys->frame_rate};
     avcodec_set_dimensions(avctx, s->sys->width, s->sys->height);
     if(avctx->get_buffer(avctx, &s->picture) < 0) {
         av_log(avctx, AV_LOG_ERROR, "get_buffer() failed\n");
@@ -1058,8 +2069,7 @@
     s->picture.top_field_first = 0;
 
     s->buf = buf;
-    avctx->execute(avctx, dv_decode_mt, (void**)&dv_anchor[0], NULL,
-                   s->sys->n_difchan * s->sys->difseg_size * 27);
+    avctx->execute(avctx, dv_decode_mt, (void**)&dv_anchor[0], NULL, s->sys->difseg_size);
 
     emms_c();
 
@@ -1069,36 +2079,32 @@
 
     return s->sys->frame_size;
 }
-#endif /* CONFIG_DVVIDEO_DECODER */
+#endif
 
 
-static inline int dv_write_pack(enum dv_pack_type pack_id, DVVideoContext *c, uint8_t* buf)
+static int dv_write_pack(enum dv_pack_type pack_id, DVVideoContext *c, uint8_t* buf, int seq)
 {
-    /*
-     * Here's what SMPTE314M says about these two:
-     *    (page 6) APTn, AP1n, AP2n, AP3n: These data shall be identical
-     *             as track application IDs (APTn = 001, AP1n =
-     *             001, AP2n = 001, AP3n = 001), if the source signal
-     *             comes from a digital VCR. If the signal source is
-     *             unknown, all bits for these data shall be set to 1.
-     *    (page 12) STYPE: STYPE defines a signal type of video signal
-     *                     00000b = 4:1:1 compression
-     *                     00100b = 4:2:2 compression
-     *                     XXXXXX = Reserved
-     * Now, I've got two problems with these statements:
-     *   1. it looks like APT == 111b should be a safe bet, but it isn't.
-     *      It seems that for PAL as defined in IEC 61834 we have to set
-     *      APT to 000 and for SMPTE314M to 001.
-     *   2. It is not at all clear what STYPE is used for 4:2:0 PAL
-     *      compression scheme (if any).
-     */
-    int apt = (c->sys->pix_fmt == PIX_FMT_YUV420P ? 0 : 1);
-    int stype = (c->sys->pix_fmt == PIX_FMT_YUV422P ? 4 : 0);
+    int apt;
+    uint8_t aspect;
 
-    uint8_t aspect = 0;
-    if((int)(av_q2d(c->avctx->sample_aspect_ratio) * c->avctx->width / c->avctx->height * 10) == 17) /* 16:9 */
-        aspect = 0x02;
+    /* Its hard to tell what SMPTE requires w.r.t. APT, but Quicktime needs it.
+     * We set it based on pix_fmt value but it really should be per DV profile */
+    if (DV_PROFILE_IS_HD(c->sys)) {
+	    apt = 0;
+    } else {
+	    apt = (c->sys->pix_fmt == PIX_FMT_YUV422P ? 1 : 0);
+    }
 
+    if (DV_PROFILE_IS_HD(c->sys)) {
+	/* HD formats are always 16:9 */
+	aspect = 0x07;
+    } else {
+	aspect = 0; /* 4:3 is the default*/
+        if((int)(av_q2d(c->avctx->sample_aspect_ratio) * c->avctx->width / c->avctx->height * 10) == 17) /* 16:9 */
+            aspect = 0x07; // REGRESSION: 0x02???
+    }
+
+
     buf[0] = (uint8_t)pack_id;
     switch (pack_id) {
     case dv_header525: /* I can't imagine why these two weren't defined as real */
@@ -1123,7 +2129,7 @@
                    0xf; /* reserved -- always 1 */
           buf[3] = (3 << 6) | /* reserved -- always 1 */
                    (c->sys->dsf << 5) | /*  system: 60fields/50fields */
-                   stype; /* signal type video compression */
+	           c->sys->video_stype; /* signal type video compression */
           buf[4] = 0xff; /* VISC: 0xff -- no information */
           break;
     case dv_video_control:
@@ -1155,7 +2161,7 @@
 
             /* DV header: 1DIF */
             buf += dv_write_dif_id(dv_sect_header, chan, i, 0, buf);
-            buf += dv_write_pack((c->sys->dsf ? dv_header625 : dv_header525), c, buf);
+            buf += dv_write_pack((c->sys->dsf ? dv_header625 : dv_header525), c, buf, i);
             buf += 72; /* unused bytes */
 
             /* DV subcode: 2DIFs */
@@ -1169,11 +2175,11 @@
             /* DV VAUX: 3DIFS */
             for (j = 0; j < 3; j++) {
                 buf += dv_write_dif_id(dv_sect_vaux, chan, i, j, buf);
-                buf += dv_write_pack(dv_video_source,  c, buf);
-                buf += dv_write_pack(dv_video_control, c, buf);
+                buf += dv_write_pack(dv_video_source,  c, buf, i);
+                buf += dv_write_pack(dv_video_control, c, buf, i);
                 buf += 7*5;
-                buf += dv_write_pack(dv_video_source,  c, buf);
-                buf += dv_write_pack(dv_video_control, c, buf);
+                buf += dv_write_pack(dv_video_source,  c, buf, i);
+                buf += dv_write_pack(dv_video_control, c, buf, i);
                 buf += 4*5 + 2; /* unused bytes */
             }
 
@@ -1185,7 +2191,7 @@
                     buf += 77; /* audio control & shuffled PCM audio */
                 }
                 buf += dv_write_dif_id(dv_sect_video, chan, i, j, buf);
-                buf += 77; /* 1 video macroblock: 1 bytes control
+                buf += 77; /* 1 video macro block: 1 bytes control
                               4 * 14 bytes Y 8x8 data
                               10 bytes Cr 8x8 data
                               10 bytes Cb 8x8 data */
@@ -1212,8 +2218,7 @@
     s->picture.pict_type = FF_I_TYPE;
 
     s->buf = buf;
-    c->execute(c, dv_encode_mt, (void**)&dv_anchor[0], NULL,
-               s->sys->n_difchan * s->sys->difseg_size * 27);
+    c->execute(c, dv_encode_mt, (void**)&dv_anchor[0], NULL, s->sys->difseg_size);
 
     emms_c();
 
Index: libavcodec/dvdata.h
===================================================================
--- libavcodec/dvdata.h	(revision 15593)
+++ libavcodec/dvdata.h	(working copy)
@@ -24,8 +24,8 @@
  * Constants for DV codec.
  */
 
-#ifndef AVCODEC_DVDATA_H
-#define AVCODEC_DVDATA_H
+#ifndef FFMPEG_DVDATA_H
+#define FFMPEG_DVDATA_H
 
 #include "libavutil/rational.h"
 #include "avcodec.h"
@@ -42,18 +42,25 @@
     int              frame_size;          /* total size of one frame in bytes */
     int              difseg_size;         /* number of DIF segments per DIF channel */
     int              n_difchan;           /* number of DIF channels per frame */
-    AVRational       time_base;           /* 1/framerate */
+    int              frame_rate;
+    int              frame_rate_base;
     int              ltc_divisor;         /* FPS from the LTS standpoint */
     int              height;              /* picture height in pixels */
     int              width;               /* picture width in pixels */
     AVRational       sar[2];              /* sample aspect ratios for 4:3 and 16:9 */
-    const uint16_t  *video_place;         /* positions of all DV macroblocks */
+    const uint16_t  *video_place;         /* positions of all DV macro blocks XXX remove this */
+
+    /* return macroblock location, in multiples of blocks (5 macroblocks at a time, (x,y) in mbloc[]) */
+    void           (*find_macroblock)(const struct DVprofile*, int channel, int seq, int av, int seg, int mbloc[10]);
+
     enum PixelFormat pix_fmt;             /* picture pixel format */
     int              bpm;                 /* blocks per macroblock */
     const uint8_t   *block_sizes;         /* AC block sizes, in bits */
+    int              vs_total_ac_bits;    /* bit budget for AC only in 5 blocks */
+
     int              audio_stride;        /* size of audio_shuffle table */
-    int              audio_min_samples[3];/* min amount of audio samples */
-                                          /* for 48kHz, 44.1kHz and 32kHz */
+    int              audio_min_samples[3];/* min ammount of audio samples */
+                                          /* for 48Khz, 44.1Khz and 32Khz */
     int              audio_samples_dist[5];/* how many samples are supposed to be */
                                          /* in each frame in a 5 frames window */
     const uint8_t  (*audio_shuffle)[9];  /* PCM shuffling table */
@@ -61,6 +68,114 @@
 
 #define NB_DV_VLC 409
 
+/* maximum number of blocks per macroblock in any DV format */
+#define DV_MAX_BPM 8
+
+/* DV100 quantization tables */
+
+/* setting this to 1 results in a faster codec but
+ * somewhat lower image quality */
+#define DV100_SACRIFICE_QUALITY_FOR_SPEED 1
+
+/* quantization quanta by QNO for DV100 */
+static const uint8_t dv100_qstep[16] = {
+	1, // QNO = 0 and 1 both have no quantization
+	1,
+	2, 3, 4, 5, 6, 7, 8, 16, 18, 20, 22, 24, 28, 52
+};
+
+/* pack combination of QNO and CNO into a single 8-bit value */
+#define DV100_MAKE_QLEVEL(qno,cno) ((qno<<2) | (cno))
+#define DV100_QLEVEL_QNO(qlevel) (qlevel>>2)
+#define DV100_QLEVEL_CNO(qlevel) (qlevel&0x3)
+
+/* The quantization step is determined by a combination of QNO and
+   CNO. We refer to these combinations as "qlevels" (this term is our
+   own, it's not mentioned in the spec). We use CNO, a multiplier on
+   the quantization step, to "fill in the gaps" between quantization
+   steps associated with successive values of QNO. e.g. there is no
+   QNO for a quantization step of 10, but we can use QNO=5 CNO=1 to
+   get the same result. The table below encodes combinations of QNO
+   and CNO in order of increasing quantization coarseness. */
+
+static const uint8_t dv100_qlevels[] = {
+    DV100_MAKE_QLEVEL( 1,0), //  1*1= 1
+    DV100_MAKE_QLEVEL( 1,0), //  1*1= 1
+    DV100_MAKE_QLEVEL( 2,0), //  2*1= 2
+    DV100_MAKE_QLEVEL( 3,0), //  3*1= 3
+    DV100_MAKE_QLEVEL( 4,0), //  4*1= 4
+    DV100_MAKE_QLEVEL( 5,0), //  5*1= 5
+    DV100_MAKE_QLEVEL( 6,0), //  6*1= 6
+    DV100_MAKE_QLEVEL( 7,0), //  7*1= 7
+    DV100_MAKE_QLEVEL( 8,0), //  8*1= 8
+    DV100_MAKE_QLEVEL( 5,1), //  5*2=10
+    DV100_MAKE_QLEVEL( 6,1), //  6*2=12
+    DV100_MAKE_QLEVEL( 7,1), //  7*2=14
+    DV100_MAKE_QLEVEL( 9,0), // 16*1=16
+    DV100_MAKE_QLEVEL(10,0), // 18*1=18
+    DV100_MAKE_QLEVEL(11,0), // 20*1=20
+    DV100_MAKE_QLEVEL(12,0), // 22*1=22
+    DV100_MAKE_QLEVEL(13,0), // 24*1=24
+    DV100_MAKE_QLEVEL(14,0), // 28*1=28
+    DV100_MAKE_QLEVEL( 9,1), // 16*2=32
+    DV100_MAKE_QLEVEL(10,1), // 18*2=36
+    DV100_MAKE_QLEVEL(11,1), // 20*2=40
+    DV100_MAKE_QLEVEL(12,1), // 22*2=44
+    DV100_MAKE_QLEVEL(13,1), // 24*2=48
+    DV100_MAKE_QLEVEL(15,0), // 52*1=52
+    DV100_MAKE_QLEVEL(14,1), // 28*2=56
+    DV100_MAKE_QLEVEL( 9,2), // 16*4=64
+    DV100_MAKE_QLEVEL(10,2), // 18*4=72
+    DV100_MAKE_QLEVEL(11,2), // 20*4=80
+    DV100_MAKE_QLEVEL(12,2), // 22*4=88
+    DV100_MAKE_QLEVEL(13,2), // 24*4=96
+    // ...
+    DV100_MAKE_QLEVEL(15,3), // 52*8=416
+};
+
+static const int dv100_num_qlevels = sizeof(dv100_qlevels)/sizeof(dv100_qlevels[0]);
+
+/* how much to increase qlevel when we need to compress more coarsely */
+/* this is a tradeoff between encoding speed and space efficiency */
+/* the highest-quality, lowest-speed option it to use 1 for all qlevels. */
+static const uint8_t dv100_qstep_delta[16] = {
+#if DV100_SACRIFICE_QUALITY_FOR_SPEED
+    0, 2, 0, 5, 0, 0, 0, 0, 1, 6, 0, 0, 0, 0, 0, 0,
+#else
+    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+#endif
+};
+
+/* how much to decrease qlevel when we can compress more finely */
+/* must be the "inverse" of dv100_qstep_delta */
+static const uint8_t dv100_qbackstep_delta[16] = {
+#if DV100_SACRIFICE_QUALITY_FOR_SPEED
+    0, 0, 0, 2, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 0, 6,
+#else
+    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+#endif
+};
+
+#if DV100_SACRIFICE_QUALITY_FOR_SPEED
+static const int dv100_min_bias = 0;
+static const int dv100_chroma_bias = 0;
+static const int dv100_starting_qno = 1;
+static const int dv100_min_qno = 1;
+static const int dv100_qlevel_inc = 4;
+#else
+static const int dv100_min_bias = 0;
+static const int dv100_chroma_bias = 0;
+static const int dv100_starting_qno = 1;
+static const int dv100_min_qno = 1;
+static const int dv100_qlevel_inc = 1;
+#endif
+
+// 1/qstep, shifted up by 16 bits
+static const int dv100_qstep_bits = 16;
+static const int dv100_qstep_inv[16] = {
+	65536,  65536,  32768,  21845,  16384,  13107,  10923,  9362,  8192,  4096,  3641,  3277,  2979,  2731,  2341,  1260,
+};
+
 /*
  * There's a catch about the following three tables: the mapping they establish
  * between (run, level) and vlc is not 1-1. So you have to watch out for that
@@ -287,6 +402,28 @@
 };
 
 /* unquant tables (not used directly) */
+static const uint8_t dv_88_areas[64] = {
+    0,0,0,1,1,1,2,2,
+    0,0,1,1,1,2,2,2,
+    0,1,1,1,2,2,2,3,
+    1,1,1,2,2,2,3,3,
+    1,1,2,2,2,3,3,3,
+    1,2,2,2,3,3,3,3,
+    2,2,2,3,3,3,3,3,
+    2,2,3,3,3,3,3,3,
+};
+
+static const uint8_t dv_248_areas[64] = {
+    0,0,1,1,1,2,2,3,
+    0,0,1,1,2,2,2,3,
+    0,1,1,2,2,2,3,3,
+    0,1,1,2,2,2,3,3,
+    1,1,2,2,2,3,3,3,
+    1,1,2,2,2,3,3,3,
+    1,2,2,2,3,3,3,3,
+    1,2,2,3,3,3,3,3,
+};
+
 static const uint8_t dv_quant_shifts[22][4] = {
   { 3,3,4,4 },
   { 3,3,4,4 },
@@ -313,16 +450,8 @@
 };
 
 static const uint8_t dv_quant_offset[4] = { 6, 3, 0, 1 };
-static const uint8_t dv_quant_areas[4] = { 6, 21, 43, 64 };
 
-/* quantization quanta by QNO for DV100 */
-static const uint8_t dv100_qstep[16] = {
-    1, /* QNO = 0 and 1 both have no quantization */
-    1,
-    2, 3, 4, 5, 6, 7, 8, 16, 18, 20, 22, 24, 28, 52
-};
-
-/* NOTE: I prefer hardcoding the positioning of DV blocks, it is
+/* NOTE: I prefer hardcoding the positioning of dv blocks, it is
    simpler :-) */
 
 static const uint16_t dv_place_420[1620] = {
@@ -1255,4778 +1384,1201 @@
 /* 2 channels per frame, 10 DIF sequences per channel,
    27 video segments per DIF sequence, 5 macroblocks per video segment */
 static const uint16_t dv_place_422_525[2*10*27*5] = {
- 0x0c24, 0x2412, 0x3036, 0x0000, 0x1848,
- 0x0d24, 0x2512, 0x3136, 0x0100, 0x1948,
- 0x0e24, 0x2612, 0x3236, 0x0200, 0x1a48,
- 0x0e26, 0x2614, 0x3238, 0x0202, 0x1a4a,
- 0x0d26, 0x2514, 0x3138, 0x0102, 0x194a,
- 0x0c26, 0x2414, 0x3038, 0x0002, 0x184a,
- 0x0c28, 0x2416, 0x303a, 0x0004, 0x184c,
- 0x0d28, 0x2516, 0x313a, 0x0104, 0x194c,
- 0x0e28, 0x2616, 0x323a, 0x0204, 0x1a4c,
- 0x0e2a, 0x2618, 0x323c, 0x0206, 0x1a4e,
- 0x0d2a, 0x2518, 0x313c, 0x0106, 0x194e,
- 0x0c2a, 0x2418, 0x303c, 0x0006, 0x184e,
- 0x0c2c, 0x241a, 0x303e, 0x0008, 0x1850,
- 0x0d2c, 0x251a, 0x313e, 0x0108, 0x1950,
- 0x0e2c, 0x261a, 0x323e, 0x0208, 0x1a50,
- 0x0e2e, 0x261c, 0x3240, 0x020a, 0x1a52,
- 0x0d2e, 0x251c, 0x3140, 0x010a, 0x1952,
- 0x0c2e, 0x241c, 0x3040, 0x000a, 0x1852,
- 0x0c30, 0x241e, 0x3042, 0x000c, 0x1854,
- 0x0d30, 0x251e, 0x3142, 0x010c, 0x1954,
- 0x0e30, 0x261e, 0x3242, 0x020c, 0x1a54,
- 0x0e32, 0x2620, 0x3244, 0x020e, 0x1a56,
- 0x0d32, 0x2520, 0x3144, 0x010e, 0x1956,
- 0x0c32, 0x2420, 0x3044, 0x000e, 0x1856,
- 0x0c34, 0x2422, 0x3046, 0x0010, 0x1858,
- 0x0d34, 0x2522, 0x3146, 0x0110, 0x1958,
- 0x0e34, 0x2622, 0x3246, 0x0210, 0x1a58,
- 0x1224, 0x2a12, 0x3636, 0x0600, 0x1e48,
- 0x1324, 0x2b12, 0x3736, 0x0700, 0x1f48,
- 0x1424, 0x2c12, 0x3836, 0x0800, 0x2048,
- 0x1426, 0x2c14, 0x3838, 0x0802, 0x204a,
- 0x1326, 0x2b14, 0x3738, 0x0702, 0x1f4a,
- 0x1226, 0x2a14, 0x3638, 0x0602, 0x1e4a,
- 0x1228, 0x2a16, 0x363a, 0x0604, 0x1e4c,
- 0x1328, 0x2b16, 0x373a, 0x0704, 0x1f4c,
- 0x1428, 0x2c16, 0x383a, 0x0804, 0x204c,
- 0x142a, 0x2c18, 0x383c, 0x0806, 0x204e,
- 0x132a, 0x2b18, 0x373c, 0x0706, 0x1f4e,
- 0x122a, 0x2a18, 0x363c, 0x0606, 0x1e4e,
- 0x122c, 0x2a1a, 0x363e, 0x0608, 0x1e50,
- 0x132c, 0x2b1a, 0x373e, 0x0708, 0x1f50,
- 0x142c, 0x2c1a, 0x383e, 0x0808, 0x2050,
- 0x142e, 0x2c1c, 0x3840, 0x080a, 0x2052,
- 0x132e, 0x2b1c, 0x3740, 0x070a, 0x1f52,
- 0x122e, 0x2a1c, 0x3640, 0x060a, 0x1e52,
- 0x1230, 0x2a1e, 0x3642, 0x060c, 0x1e54,
- 0x1330, 0x2b1e, 0x3742, 0x070c, 0x1f54,
- 0x1430, 0x2c1e, 0x3842, 0x080c, 0x2054,
- 0x1432, 0x2c20, 0x3844, 0x080e, 0x2056,
- 0x1332, 0x2b20, 0x3744, 0x070e, 0x1f56,
- 0x1232, 0x2a20, 0x3644, 0x060e, 0x1e56,
- 0x1234, 0x2a22, 0x3646, 0x0610, 0x1e58,
- 0x1334, 0x2b22, 0x3746, 0x0710, 0x1f58,
- 0x1434, 0x2c22, 0x3846, 0x0810, 0x2058,
- 0x1824, 0x3012, 0x0036, 0x0c00, 0x2448,
- 0x1924, 0x3112, 0x0136, 0x0d00, 0x2548,
- 0x1a24, 0x3212, 0x0236, 0x0e00, 0x2648,
- 0x1a26, 0x3214, 0x0238, 0x0e02, 0x264a,
- 0x1926, 0x3114, 0x0138, 0x0d02, 0x254a,
- 0x1826, 0x3014, 0x0038, 0x0c02, 0x244a,
- 0x1828, 0x3016, 0x003a, 0x0c04, 0x244c,
- 0x1928, 0x3116, 0x013a, 0x0d04, 0x254c,
- 0x1a28, 0x3216, 0x023a, 0x0e04, 0x264c,
- 0x1a2a, 0x3218, 0x023c, 0x0e06, 0x264e,
- 0x192a, 0x3118, 0x013c, 0x0d06, 0x254e,
- 0x182a, 0x3018, 0x003c, 0x0c06, 0x244e,
- 0x182c, 0x301a, 0x003e, 0x0c08, 0x2450,
- 0x192c, 0x311a, 0x013e, 0x0d08, 0x2550,
- 0x1a2c, 0x321a, 0x023e, 0x0e08, 0x2650,
- 0x1a2e, 0x321c, 0x0240, 0x0e0a, 0x2652,
- 0x192e, 0x311c, 0x0140, 0x0d0a, 0x2552,
- 0x182e, 0x301c, 0x0040, 0x0c0a, 0x2452,
- 0x1830, 0x301e, 0x0042, 0x0c0c, 0x2454,
- 0x1930, 0x311e, 0x0142, 0x0d0c, 0x2554,
- 0x1a30, 0x321e, 0x0242, 0x0e0c, 0x2654,
- 0x1a32, 0x3220, 0x0244, 0x0e0e, 0x2656,
- 0x1932, 0x3120, 0x0144, 0x0d0e, 0x2556,
- 0x1832, 0x3020, 0x0044, 0x0c0e, 0x2456,
- 0x1834, 0x3022, 0x0046, 0x0c10, 0x2458,
- 0x1934, 0x3122, 0x0146, 0x0d10, 0x2558,
- 0x1a34, 0x3222, 0x0246, 0x0e10, 0x2658,
- 0x1e24, 0x3612, 0x0636, 0x1200, 0x2a48,
- 0x1f24, 0x3712, 0x0736, 0x1300, 0x2b48,
- 0x2024, 0x3812, 0x0836, 0x1400, 0x2c48,
- 0x2026, 0x3814, 0x0838, 0x1402, 0x2c4a,
- 0x1f26, 0x3714, 0x0738, 0x1302, 0x2b4a,
- 0x1e26, 0x3614, 0x0638, 0x1202, 0x2a4a,
- 0x1e28, 0x3616, 0x063a, 0x1204, 0x2a4c,
- 0x1f28, 0x3716, 0x073a, 0x1304, 0x2b4c,
- 0x2028, 0x3816, 0x083a, 0x1404, 0x2c4c,
- 0x202a, 0x3818, 0x083c, 0x1406, 0x2c4e,
- 0x1f2a, 0x3718, 0x073c, 0x1306, 0x2b4e,
- 0x1e2a, 0x3618, 0x063c, 0x1206, 0x2a4e,
- 0x1e2c, 0x361a, 0x063e, 0x1208, 0x2a50,
- 0x1f2c, 0x371a, 0x073e, 0x1308, 0x2b50,
- 0x202c, 0x381a, 0x083e, 0x1408, 0x2c50,
- 0x202e, 0x381c, 0x0840, 0x140a, 0x2c52,
- 0x1f2e, 0x371c, 0x0740, 0x130a, 0x2b52,
- 0x1e2e, 0x361c, 0x0640, 0x120a, 0x2a52,
- 0x1e30, 0x361e, 0x0642, 0x120c, 0x2a54,
- 0x1f30, 0x371e, 0x0742, 0x130c, 0x2b54,
- 0x2030, 0x381e, 0x0842, 0x140c, 0x2c54,
- 0x2032, 0x3820, 0x0844, 0x140e, 0x2c56,
- 0x1f32, 0x3720, 0x0744, 0x130e, 0x2b56,
- 0x1e32, 0x3620, 0x0644, 0x120e, 0x2a56,
- 0x1e34, 0x3622, 0x0646, 0x1210, 0x2a58,
- 0x1f34, 0x3722, 0x0746, 0x1310, 0x2b58,
- 0x2034, 0x3822, 0x0846, 0x1410, 0x2c58,
- 0x2424, 0x0012, 0x0c36, 0x1800, 0x3048,
- 0x2524, 0x0112, 0x0d36, 0x1900, 0x3148,
- 0x2624, 0x0212, 0x0e36, 0x1a00, 0x3248,
- 0x2626, 0x0214, 0x0e38, 0x1a02, 0x324a,
- 0x2526, 0x0114, 0x0d38, 0x1902, 0x314a,
- 0x2426, 0x0014, 0x0c38, 0x1802, 0x304a,
- 0x2428, 0x0016, 0x0c3a, 0x1804, 0x304c,
- 0x2528, 0x0116, 0x0d3a, 0x1904, 0x314c,
- 0x2628, 0x0216, 0x0e3a, 0x1a04, 0x324c,
- 0x262a, 0x0218, 0x0e3c, 0x1a06, 0x324e,
- 0x252a, 0x0118, 0x0d3c, 0x1906, 0x314e,
- 0x242a, 0x0018, 0x0c3c, 0x1806, 0x304e,
- 0x242c, 0x001a, 0x0c3e, 0x1808, 0x3050,
- 0x252c, 0x011a, 0x0d3e, 0x1908, 0x3150,
- 0x262c, 0x021a, 0x0e3e, 0x1a08, 0x3250,
- 0x262e, 0x021c, 0x0e40, 0x1a0a, 0x3252,
- 0x252e, 0x011c, 0x0d40, 0x190a, 0x3152,
- 0x242e, 0x001c, 0x0c40, 0x180a, 0x3052,
- 0x2430, 0x001e, 0x0c42, 0x180c, 0x3054,
- 0x2530, 0x011e, 0x0d42, 0x190c, 0x3154,
- 0x2630, 0x021e, 0x0e42, 0x1a0c, 0x3254,
- 0x2632, 0x0220, 0x0e44, 0x1a0e, 0x3256,
- 0x2532, 0x0120, 0x0d44, 0x190e, 0x3156,
- 0x2432, 0x0020, 0x0c44, 0x180e, 0x3056,
- 0x2434, 0x0022, 0x0c46, 0x1810, 0x3058,
- 0x2534, 0x0122, 0x0d46, 0x1910, 0x3158,
- 0x2634, 0x0222, 0x0e46, 0x1a10, 0x3258,
- 0x2a24, 0x0612, 0x1236, 0x1e00, 0x3648,
- 0x2b24, 0x0712, 0x1336, 0x1f00, 0x3748,
- 0x2c24, 0x0812, 0x1436, 0x2000, 0x3848,
- 0x2c26, 0x0814, 0x1438, 0x2002, 0x384a,
- 0x2b26, 0x0714, 0x1338, 0x1f02, 0x374a,
- 0x2a26, 0x0614, 0x1238, 0x1e02, 0x364a,
- 0x2a28, 0x0616, 0x123a, 0x1e04, 0x364c,
- 0x2b28, 0x0716, 0x133a, 0x1f04, 0x374c,
- 0x2c28, 0x0816, 0x143a, 0x2004, 0x384c,
- 0x2c2a, 0x0818, 0x143c, 0x2006, 0x384e,
- 0x2b2a, 0x0718, 0x133c, 0x1f06, 0x374e,
- 0x2a2a, 0x0618, 0x123c, 0x1e06, 0x364e,
- 0x2a2c, 0x061a, 0x123e, 0x1e08, 0x3650,
- 0x2b2c, 0x071a, 0x133e, 0x1f08, 0x3750,
- 0x2c2c, 0x081a, 0x143e, 0x2008, 0x3850,
- 0x2c2e, 0x081c, 0x1440, 0x200a, 0x3852,
- 0x2b2e, 0x071c, 0x1340, 0x1f0a, 0x3752,
- 0x2a2e, 0x061c, 0x1240, 0x1e0a, 0x3652,
- 0x2a30, 0x061e, 0x1242, 0x1e0c, 0x3654,
- 0x2b30, 0x071e, 0x1342, 0x1f0c, 0x3754,
- 0x2c30, 0x081e, 0x1442, 0x200c, 0x3854,
- 0x2c32, 0x0820, 0x1444, 0x200e, 0x3856,
- 0x2b32, 0x0720, 0x1344, 0x1f0e, 0x3756,
- 0x2a32, 0x0620, 0x1244, 0x1e0e, 0x3656,
- 0x2a34, 0x0622, 0x1246, 0x1e10, 0x3658,
- 0x2b34, 0x0722, 0x1346, 0x1f10, 0x3758,
- 0x2c34, 0x0822, 0x1446, 0x2010, 0x3858,
- 0x3024, 0x0c12, 0x1836, 0x2400, 0x0048,
- 0x3124, 0x0d12, 0x1936, 0x2500, 0x0148,
- 0x3224, 0x0e12, 0x1a36, 0x2600, 0x0248,
- 0x3226, 0x0e14, 0x1a38, 0x2602, 0x024a,
- 0x3126, 0x0d14, 0x1938, 0x2502, 0x014a,
- 0x3026, 0x0c14, 0x1838, 0x2402, 0x004a,
- 0x3028, 0x0c16, 0x183a, 0x2404, 0x004c,
- 0x3128, 0x0d16, 0x193a, 0x2504, 0x014c,
- 0x3228, 0x0e16, 0x1a3a, 0x2604, 0x024c,
- 0x322a, 0x0e18, 0x1a3c, 0x2606, 0x024e,
- 0x312a, 0x0d18, 0x193c, 0x2506, 0x014e,
- 0x302a, 0x0c18, 0x183c, 0x2406, 0x004e,
- 0x302c, 0x0c1a, 0x183e, 0x2408, 0x0050,
- 0x312c, 0x0d1a, 0x193e, 0x2508, 0x0150,
- 0x322c, 0x0e1a, 0x1a3e, 0x2608, 0x0250,
- 0x322e, 0x0e1c, 0x1a40, 0x260a, 0x0252,
- 0x312e, 0x0d1c, 0x1940, 0x250a, 0x0152,
- 0x302e, 0x0c1c, 0x1840, 0x240a, 0x0052,
- 0x3030, 0x0c1e, 0x1842, 0x240c, 0x0054,
- 0x3130, 0x0d1e, 0x1942, 0x250c, 0x0154,
- 0x3230, 0x0e1e, 0x1a42, 0x260c, 0x0254,
- 0x3232, 0x0e20, 0x1a44, 0x260e, 0x0256,
- 0x3132, 0x0d20, 0x1944, 0x250e, 0x0156,
- 0x3032, 0x0c20, 0x1844, 0x240e, 0x0056,
- 0x3034, 0x0c22, 0x1846, 0x2410, 0x0058,
- 0x3134, 0x0d22, 0x1946, 0x2510, 0x0158,
- 0x3234, 0x0e22, 0x1a46, 0x2610, 0x0258,
- 0x3624, 0x1212, 0x1e36, 0x2a00, 0x0648,
- 0x3724, 0x1312, 0x1f36, 0x2b00, 0x0748,
- 0x3824, 0x1412, 0x2036, 0x2c00, 0x0848,
- 0x3826, 0x1414, 0x2038, 0x2c02, 0x084a,
- 0x3726, 0x1314, 0x1f38, 0x2b02, 0x074a,
- 0x3626, 0x1214, 0x1e38, 0x2a02, 0x064a,
- 0x3628, 0x1216, 0x1e3a, 0x2a04, 0x064c,
- 0x3728, 0x1316, 0x1f3a, 0x2b04, 0x074c,
- 0x3828, 0x1416, 0x203a, 0x2c04, 0x084c,
- 0x382a, 0x1418, 0x203c, 0x2c06, 0x084e,
- 0x372a, 0x1318, 0x1f3c, 0x2b06, 0x074e,
- 0x362a, 0x1218, 0x1e3c, 0x2a06, 0x064e,
- 0x362c, 0x121a, 0x1e3e, 0x2a08, 0x0650,
- 0x372c, 0x131a, 0x1f3e, 0x2b08, 0x0750,
- 0x382c, 0x141a, 0x203e, 0x2c08, 0x0850,
- 0x382e, 0x141c, 0x2040, 0x2c0a, 0x0852,
- 0x372e, 0x131c, 0x1f40, 0x2b0a, 0x0752,
- 0x362e, 0x121c, 0x1e40, 0x2a0a, 0x0652,
- 0x3630, 0x121e, 0x1e42, 0x2a0c, 0x0654,
- 0x3730, 0x131e, 0x1f42, 0x2b0c, 0x0754,
- 0x3830, 0x141e, 0x2042, 0x2c0c, 0x0854,
- 0x3832, 0x1420, 0x2044, 0x2c0e, 0x0856,
- 0x3732, 0x1320, 0x1f44, 0x2b0e, 0x0756,
- 0x3632, 0x1220, 0x1e44, 0x2a0e, 0x0656,
- 0x3634, 0x1222, 0x1e46, 0x2a10, 0x0658,
- 0x3734, 0x1322, 0x1f46, 0x2b10, 0x0758,
- 0x3834, 0x1422, 0x2046, 0x2c10, 0x0858,
- 0x0024, 0x1812, 0x2436, 0x3000, 0x0c48,
- 0x0124, 0x1912, 0x2536, 0x3100, 0x0d48,
- 0x0224, 0x1a12, 0x2636, 0x3200, 0x0e48,
- 0x0226, 0x1a14, 0x2638, 0x3202, 0x0e4a,
- 0x0126, 0x1914, 0x2538, 0x3102, 0x0d4a,
- 0x0026, 0x1814, 0x2438, 0x3002, 0x0c4a,
- 0x0028, 0x1816, 0x243a, 0x3004, 0x0c4c,
- 0x0128, 0x1916, 0x253a, 0x3104, 0x0d4c,
- 0x0228, 0x1a16, 0x263a, 0x3204, 0x0e4c,
- 0x022a, 0x1a18, 0x263c, 0x3206, 0x0e4e,
- 0x012a, 0x1918, 0x253c, 0x3106, 0x0d4e,
- 0x002a, 0x1818, 0x243c, 0x3006, 0x0c4e,
- 0x002c, 0x181a, 0x243e, 0x3008, 0x0c50,
- 0x012c, 0x191a, 0x253e, 0x3108, 0x0d50,
- 0x022c, 0x1a1a, 0x263e, 0x3208, 0x0e50,
- 0x022e, 0x1a1c, 0x2640, 0x320a, 0x0e52,
- 0x012e, 0x191c, 0x2540, 0x310a, 0x0d52,
- 0x002e, 0x181c, 0x2440, 0x300a, 0x0c52,
- 0x0030, 0x181e, 0x2442, 0x300c, 0x0c54,
- 0x0130, 0x191e, 0x2542, 0x310c, 0x0d54,
- 0x0230, 0x1a1e, 0x2642, 0x320c, 0x0e54,
- 0x0232, 0x1a20, 0x2644, 0x320e, 0x0e56,
- 0x0132, 0x1920, 0x2544, 0x310e, 0x0d56,
- 0x0032, 0x1820, 0x2444, 0x300e, 0x0c56,
- 0x0034, 0x1822, 0x2446, 0x3010, 0x0c58,
- 0x0134, 0x1922, 0x2546, 0x3110, 0x0d58,
- 0x0234, 0x1a22, 0x2646, 0x3210, 0x0e58,
- 0x0624, 0x1e12, 0x2a36, 0x3600, 0x1248,
- 0x0724, 0x1f12, 0x2b36, 0x3700, 0x1348,
- 0x0824, 0x2012, 0x2c36, 0x3800, 0x1448,
- 0x0826, 0x2014, 0x2c38, 0x3802, 0x144a,
- 0x0726, 0x1f14, 0x2b38, 0x3702, 0x134a,
- 0x0626, 0x1e14, 0x2a38, 0x3602, 0x124a,
- 0x0628, 0x1e16, 0x2a3a, 0x3604, 0x124c,
- 0x0728, 0x1f16, 0x2b3a, 0x3704, 0x134c,
- 0x0828, 0x2016, 0x2c3a, 0x3804, 0x144c,
- 0x082a, 0x2018, 0x2c3c, 0x3806, 0x144e,
- 0x072a, 0x1f18, 0x2b3c, 0x3706, 0x134e,
- 0x062a, 0x1e18, 0x2a3c, 0x3606, 0x124e,
- 0x062c, 0x1e1a, 0x2a3e, 0x3608, 0x1250,
- 0x072c, 0x1f1a, 0x2b3e, 0x3708, 0x1350,
- 0x082c, 0x201a, 0x2c3e, 0x3808, 0x1450,
- 0x082e, 0x201c, 0x2c40, 0x380a, 0x1452,
- 0x072e, 0x1f1c, 0x2b40, 0x370a, 0x1352,
- 0x062e, 0x1e1c, 0x2a40, 0x360a, 0x1252,
- 0x0630, 0x1e1e, 0x2a42, 0x360c, 0x1254,
- 0x0730, 0x1f1e, 0x2b42, 0x370c, 0x1354,
- 0x0830, 0x201e, 0x2c42, 0x380c, 0x1454,
- 0x0832, 0x2020, 0x2c44, 0x380e, 0x1456,
- 0x0732, 0x1f20, 0x2b44, 0x370e, 0x1356,
- 0x0632, 0x1e20, 0x2a44, 0x360e, 0x1256,
- 0x0634, 0x1e22, 0x2a46, 0x3610, 0x1258,
- 0x0734, 0x1f22, 0x2b46, 0x3710, 0x1358,
- 0x0834, 0x2022, 0x2c46, 0x3810, 0x1458,
- 0x0f24, 0x2712, 0x3336, 0x0300, 0x1b48,
- 0x1024, 0x2812, 0x3436, 0x0400, 0x1c48,
- 0x1124, 0x2912, 0x3536, 0x0500, 0x1d48,
- 0x1126, 0x2914, 0x3538, 0x0502, 0x1d4a,
- 0x1026, 0x2814, 0x3438, 0x0402, 0x1c4a,
- 0x0f26, 0x2714, 0x3338, 0x0302, 0x1b4a,
- 0x0f28, 0x2716, 0x333a, 0x0304, 0x1b4c,
- 0x1028, 0x2816, 0x343a, 0x0404, 0x1c4c,
- 0x1128, 0x2916, 0x353a, 0x0504, 0x1d4c,
- 0x112a, 0x2918, 0x353c, 0x0506, 0x1d4e,
- 0x102a, 0x2818, 0x343c, 0x0406, 0x1c4e,
- 0x0f2a, 0x2718, 0x333c, 0x0306, 0x1b4e,
- 0x0f2c, 0x271a, 0x333e, 0x0308, 0x1b50,
- 0x102c, 0x281a, 0x343e, 0x0408, 0x1c50,
- 0x112c, 0x291a, 0x353e, 0x0508, 0x1d50,
- 0x112e, 0x291c, 0x3540, 0x050a, 0x1d52,
- 0x102e, 0x281c, 0x3440, 0x040a, 0x1c52,
- 0x0f2e, 0x271c, 0x3340, 0x030a, 0x1b52,
- 0x0f30, 0x271e, 0x3342, 0x030c, 0x1b54,
- 0x1030, 0x281e, 0x3442, 0x040c, 0x1c54,
- 0x1130, 0x291e, 0x3542, 0x050c, 0x1d54,
- 0x1132, 0x2920, 0x3544, 0x050e, 0x1d56,
- 0x1032, 0x2820, 0x3444, 0x040e, 0x1c56,
- 0x0f32, 0x2720, 0x3344, 0x030e, 0x1b56,
- 0x0f34, 0x2722, 0x3346, 0x0310, 0x1b58,
- 0x1034, 0x2822, 0x3446, 0x0410, 0x1c58,
- 0x1134, 0x2922, 0x3546, 0x0510, 0x1d58,
- 0x1524, 0x2d12, 0x3936, 0x0900, 0x2148,
- 0x1624, 0x2e12, 0x3a36, 0x0a00, 0x2248,
- 0x1724, 0x2f12, 0x3b36, 0x0b00, 0x2348,
- 0x1726, 0x2f14, 0x3b38, 0x0b02, 0x234a,
- 0x1626, 0x2e14, 0x3a38, 0x0a02, 0x224a,
- 0x1526, 0x2d14, 0x3938, 0x0902, 0x214a,
- 0x1528, 0x2d16, 0x393a, 0x0904, 0x214c,
- 0x1628, 0x2e16, 0x3a3a, 0x0a04, 0x224c,
- 0x1728, 0x2f16, 0x3b3a, 0x0b04, 0x234c,
- 0x172a, 0x2f18, 0x3b3c, 0x0b06, 0x234e,
- 0x162a, 0x2e18, 0x3a3c, 0x0a06, 0x224e,
- 0x152a, 0x2d18, 0x393c, 0x0906, 0x214e,
- 0x152c, 0x2d1a, 0x393e, 0x0908, 0x2150,
- 0x162c, 0x2e1a, 0x3a3e, 0x0a08, 0x2250,
- 0x172c, 0x2f1a, 0x3b3e, 0x0b08, 0x2350,
- 0x172e, 0x2f1c, 0x3b40, 0x0b0a, 0x2352,
- 0x162e, 0x2e1c, 0x3a40, 0x0a0a, 0x2252,
- 0x152e, 0x2d1c, 0x3940, 0x090a, 0x2152,
- 0x1530, 0x2d1e, 0x3942, 0x090c, 0x2154,
- 0x1630, 0x2e1e, 0x3a42, 0x0a0c, 0x2254,
- 0x1730, 0x2f1e, 0x3b42, 0x0b0c, 0x2354,
- 0x1732, 0x2f20, 0x3b44, 0x0b0e, 0x2356,
- 0x1632, 0x2e20, 0x3a44, 0x0a0e, 0x2256,
- 0x1532, 0x2d20, 0x3944, 0x090e, 0x2156,
- 0x1534, 0x2d22, 0x3946, 0x0910, 0x2158,
- 0x1634, 0x2e22, 0x3a46, 0x0a10, 0x2258,
- 0x1734, 0x2f22, 0x3b46, 0x0b10, 0x2358,
- 0x1b24, 0x3312, 0x0336, 0x0f00, 0x2748,
- 0x1c24, 0x3412, 0x0436, 0x1000, 0x2848,
- 0x1d24, 0x3512, 0x0536, 0x1100, 0x2948,
- 0x1d26, 0x3514, 0x0538, 0x1102, 0x294a,
- 0x1c26, 0x3414, 0x0438, 0x1002, 0x284a,
- 0x1b26, 0x3314, 0x0338, 0x0f02, 0x274a,
- 0x1b28, 0x3316, 0x033a, 0x0f04, 0x274c,
- 0x1c28, 0x3416, 0x043a, 0x1004, 0x284c,
- 0x1d28, 0x3516, 0x053a, 0x1104, 0x294c,
- 0x1d2a, 0x3518, 0x053c, 0x1106, 0x294e,
- 0x1c2a, 0x3418, 0x043c, 0x1006, 0x284e,
- 0x1b2a, 0x3318, 0x033c, 0x0f06, 0x274e,
- 0x1b2c, 0x331a, 0x033e, 0x0f08, 0x2750,
- 0x1c2c, 0x341a, 0x043e, 0x1008, 0x2850,
- 0x1d2c, 0x351a, 0x053e, 0x1108, 0x2950,
- 0x1d2e, 0x351c, 0x0540, 0x110a, 0x2952,
- 0x1c2e, 0x341c, 0x0440, 0x100a, 0x2852,
- 0x1b2e, 0x331c, 0x0340, 0x0f0a, 0x2752,
- 0x1b30, 0x331e, 0x0342, 0x0f0c, 0x2754,
- 0x1c30, 0x341e, 0x0442, 0x100c, 0x2854,
- 0x1d30, 0x351e, 0x0542, 0x110c, 0x2954,
- 0x1d32, 0x3520, 0x0544, 0x110e, 0x2956,
- 0x1c32, 0x3420, 0x0444, 0x100e, 0x2856,
- 0x1b32, 0x3320, 0x0344, 0x0f0e, 0x2756,
- 0x1b34, 0x3322, 0x0346, 0x0f10, 0x2758,
- 0x1c34, 0x3422, 0x0446, 0x1010, 0x2858,
- 0x1d34, 0x3522, 0x0546, 0x1110, 0x2958,
- 0x2124, 0x3912, 0x0936, 0x1500, 0x2d48,
- 0x2224, 0x3a12, 0x0a36, 0x1600, 0x2e48,
- 0x2324, 0x3b12, 0x0b36, 0x1700, 0x2f48,
- 0x2326, 0x3b14, 0x0b38, 0x1702, 0x2f4a,
- 0x2226, 0x3a14, 0x0a38, 0x1602, 0x2e4a,
- 0x2126, 0x3914, 0x0938, 0x1502, 0x2d4a,
- 0x2128, 0x3916, 0x093a, 0x1504, 0x2d4c,
- 0x2228, 0x3a16, 0x0a3a, 0x1604, 0x2e4c,
- 0x2328, 0x3b16, 0x0b3a, 0x1704, 0x2f4c,
- 0x232a, 0x3b18, 0x0b3c, 0x1706, 0x2f4e,
- 0x222a, 0x3a18, 0x0a3c, 0x1606, 0x2e4e,
- 0x212a, 0x3918, 0x093c, 0x1506, 0x2d4e,
- 0x212c, 0x391a, 0x093e, 0x1508, 0x2d50,
- 0x222c, 0x3a1a, 0x0a3e, 0x1608, 0x2e50,
- 0x232c, 0x3b1a, 0x0b3e, 0x1708, 0x2f50,
- 0x232e, 0x3b1c, 0x0b40, 0x170a, 0x2f52,
- 0x222e, 0x3a1c, 0x0a40, 0x160a, 0x2e52,
- 0x212e, 0x391c, 0x0940, 0x150a, 0x2d52,
- 0x2130, 0x391e, 0x0942, 0x150c, 0x2d54,
- 0x2230, 0x3a1e, 0x0a42, 0x160c, 0x2e54,
- 0x2330, 0x3b1e, 0x0b42, 0x170c, 0x2f54,
- 0x2332, 0x3b20, 0x0b44, 0x170e, 0x2f56,
- 0x2232, 0x3a20, 0x0a44, 0x160e, 0x2e56,
- 0x2132, 0x3920, 0x0944, 0x150e, 0x2d56,
- 0x2134, 0x3922, 0x0946, 0x1510, 0x2d58,
- 0x2234, 0x3a22, 0x0a46, 0x1610, 0x2e58,
- 0x2334, 0x3b22, 0x0b46, 0x1710, 0x2f58,
- 0x2724, 0x0312, 0x0f36, 0x1b00, 0x3348,
- 0x2824, 0x0412, 0x1036, 0x1c00, 0x3448,
- 0x2924, 0x0512, 0x1136, 0x1d00, 0x3548,
- 0x2926, 0x0514, 0x1138, 0x1d02, 0x354a,
- 0x2826, 0x0414, 0x1038, 0x1c02, 0x344a,
- 0x2726, 0x0314, 0x0f38, 0x1b02, 0x334a,
- 0x2728, 0x0316, 0x0f3a, 0x1b04, 0x334c,
- 0x2828, 0x0416, 0x103a, 0x1c04, 0x344c,
- 0x2928, 0x0516, 0x113a, 0x1d04, 0x354c,
- 0x292a, 0x0518, 0x113c, 0x1d06, 0x354e,
- 0x282a, 0x0418, 0x103c, 0x1c06, 0x344e,
- 0x272a, 0x0318, 0x0f3c, 0x1b06, 0x334e,
- 0x272c, 0x031a, 0x0f3e, 0x1b08, 0x3350,
- 0x282c, 0x041a, 0x103e, 0x1c08, 0x3450,
- 0x292c, 0x051a, 0x113e, 0x1d08, 0x3550,
- 0x292e, 0x051c, 0x1140, 0x1d0a, 0x3552,
- 0x282e, 0x041c, 0x1040, 0x1c0a, 0x3452,
- 0x272e, 0x031c, 0x0f40, 0x1b0a, 0x3352,
- 0x2730, 0x031e, 0x0f42, 0x1b0c, 0x3354,
- 0x2830, 0x041e, 0x1042, 0x1c0c, 0x3454,
- 0x2930, 0x051e, 0x1142, 0x1d0c, 0x3554,
- 0x2932, 0x0520, 0x1144, 0x1d0e, 0x3556,
- 0x2832, 0x0420, 0x1044, 0x1c0e, 0x3456,
- 0x2732, 0x0320, 0x0f44, 0x1b0e, 0x3356,
- 0x2734, 0x0322, 0x0f46, 0x1b10, 0x3358,
- 0x2834, 0x0422, 0x1046, 0x1c10, 0x3458,
- 0x2934, 0x0522, 0x1146, 0x1d10, 0x3558,
- 0x2d24, 0x0912, 0x1536, 0x2100, 0x3948,
- 0x2e24, 0x0a12, 0x1636, 0x2200, 0x3a48,
- 0x2f24, 0x0b12, 0x1736, 0x2300, 0x3b48,
- 0x2f26, 0x0b14, 0x1738, 0x2302, 0x3b4a,
- 0x2e26, 0x0a14, 0x1638, 0x2202, 0x3a4a,
- 0x2d26, 0x0914, 0x1538, 0x2102, 0x394a,
- 0x2d28, 0x0916, 0x153a, 0x2104, 0x394c,
- 0x2e28, 0x0a16, 0x163a, 0x2204, 0x3a4c,
- 0x2f28, 0x0b16, 0x173a, 0x2304, 0x3b4c,
- 0x2f2a, 0x0b18, 0x173c, 0x2306, 0x3b4e,
- 0x2e2a, 0x0a18, 0x163c, 0x2206, 0x3a4e,
- 0x2d2a, 0x0918, 0x153c, 0x2106, 0x394e,
- 0x2d2c, 0x091a, 0x153e, 0x2108, 0x3950,
- 0x2e2c, 0x0a1a, 0x163e, 0x2208, 0x3a50,
- 0x2f2c, 0x0b1a, 0x173e, 0x2308, 0x3b50,
- 0x2f2e, 0x0b1c, 0x1740, 0x230a, 0x3b52,
- 0x2e2e, 0x0a1c, 0x1640, 0x220a, 0x3a52,
- 0x2d2e, 0x091c, 0x1540, 0x210a, 0x3952,
- 0x2d30, 0x091e, 0x1542, 0x210c, 0x3954,
- 0x2e30, 0x0a1e, 0x1642, 0x220c, 0x3a54,
- 0x2f30, 0x0b1e, 0x1742, 0x230c, 0x3b54,
- 0x2f32, 0x0b20, 0x1744, 0x230e, 0x3b56,
- 0x2e32, 0x0a20, 0x1644, 0x220e, 0x3a56,
- 0x2d32, 0x0920, 0x1544, 0x210e, 0x3956,
- 0x2d34, 0x0922, 0x1546, 0x2110, 0x3958,
- 0x2e34, 0x0a22, 0x1646, 0x2210, 0x3a58,
- 0x2f34, 0x0b22, 0x1746, 0x2310, 0x3b58,
- 0x3324, 0x0f12, 0x1b36, 0x2700, 0x0348,
- 0x3424, 0x1012, 0x1c36, 0x2800, 0x0448,
- 0x3524, 0x1112, 0x1d36, 0x2900, 0x0548,
- 0x3526, 0x1114, 0x1d38, 0x2902, 0x054a,
- 0x3426, 0x1014, 0x1c38, 0x2802, 0x044a,
- 0x3326, 0x0f14, 0x1b38, 0x2702, 0x034a,
- 0x3328, 0x0f16, 0x1b3a, 0x2704, 0x034c,
- 0x3428, 0x1016, 0x1c3a, 0x2804, 0x044c,
- 0x3528, 0x1116, 0x1d3a, 0x2904, 0x054c,
- 0x352a, 0x1118, 0x1d3c, 0x2906, 0x054e,
- 0x342a, 0x1018, 0x1c3c, 0x2806, 0x044e,
- 0x332a, 0x0f18, 0x1b3c, 0x2706, 0x034e,
- 0x332c, 0x0f1a, 0x1b3e, 0x2708, 0x0350,
- 0x342c, 0x101a, 0x1c3e, 0x2808, 0x0450,
- 0x352c, 0x111a, 0x1d3e, 0x2908, 0x0550,
- 0x352e, 0x111c, 0x1d40, 0x290a, 0x0552,
- 0x342e, 0x101c, 0x1c40, 0x280a, 0x0452,
- 0x332e, 0x0f1c, 0x1b40, 0x270a, 0x0352,
- 0x3330, 0x0f1e, 0x1b42, 0x270c, 0x0354,
- 0x3430, 0x101e, 0x1c42, 0x280c, 0x0454,
- 0x3530, 0x111e, 0x1d42, 0x290c, 0x0554,
- 0x3532, 0x1120, 0x1d44, 0x290e, 0x0556,
- 0x3432, 0x1020, 0x1c44, 0x280e, 0x0456,
- 0x3332, 0x0f20, 0x1b44, 0x270e, 0x0356,
- 0x3334, 0x0f22, 0x1b46, 0x2710, 0x0358,
- 0x3434, 0x1022, 0x1c46, 0x2810, 0x0458,
- 0x3534, 0x1122, 0x1d46, 0x2910, 0x0558,
- 0x3924, 0x1512, 0x2136, 0x2d00, 0x0948,
- 0x3a24, 0x1612, 0x2236, 0x2e00, 0x0a48,
- 0x3b24, 0x1712, 0x2336, 0x2f00, 0x0b48,
- 0x3b26, 0x1714, 0x2338, 0x2f02, 0x0b4a,
- 0x3a26, 0x1614, 0x2238, 0x2e02, 0x0a4a,
- 0x3926, 0x1514, 0x2138, 0x2d02, 0x094a,
- 0x3928, 0x1516, 0x213a, 0x2d04, 0x094c,
- 0x3a28, 0x1616, 0x223a, 0x2e04, 0x0a4c,
- 0x3b28, 0x1716, 0x233a, 0x2f04, 0x0b4c,
- 0x3b2a, 0x1718, 0x233c, 0x2f06, 0x0b4e,
- 0x3a2a, 0x1618, 0x223c, 0x2e06, 0x0a4e,
- 0x392a, 0x1518, 0x213c, 0x2d06, 0x094e,
- 0x392c, 0x151a, 0x213e, 0x2d08, 0x0950,
- 0x3a2c, 0x161a, 0x223e, 0x2e08, 0x0a50,
- 0x3b2c, 0x171a, 0x233e, 0x2f08, 0x0b50,
- 0x3b2e, 0x171c, 0x2340, 0x2f0a, 0x0b52,
- 0x3a2e, 0x161c, 0x2240, 0x2e0a, 0x0a52,
- 0x392e, 0x151c, 0x2140, 0x2d0a, 0x0952,
- 0x3930, 0x151e, 0x2142, 0x2d0c, 0x0954,
- 0x3a30, 0x161e, 0x2242, 0x2e0c, 0x0a54,
- 0x3b30, 0x171e, 0x2342, 0x2f0c, 0x0b54,
- 0x3b32, 0x1720, 0x2344, 0x2f0e, 0x0b56,
- 0x3a32, 0x1620, 0x2244, 0x2e0e, 0x0a56,
- 0x3932, 0x1520, 0x2144, 0x2d0e, 0x0956,
- 0x3934, 0x1522, 0x2146, 0x2d10, 0x0958,
- 0x3a34, 0x1622, 0x2246, 0x2e10, 0x0a58,
- 0x3b34, 0x1722, 0x2346, 0x2f10, 0x0b58,
- 0x0324, 0x1b12, 0x2736, 0x3300, 0x0f48,
- 0x0424, 0x1c12, 0x2836, 0x3400, 0x1048,
- 0x0524, 0x1d12, 0x2936, 0x3500, 0x1148,
- 0x0526, 0x1d14, 0x2938, 0x3502, 0x114a,
- 0x0426, 0x1c14, 0x2838, 0x3402, 0x104a,
- 0x0326, 0x1b14, 0x2738, 0x3302, 0x0f4a,
- 0x0328, 0x1b16, 0x273a, 0x3304, 0x0f4c,
- 0x0428, 0x1c16, 0x283a, 0x3404, 0x104c,
- 0x0528, 0x1d16, 0x293a, 0x3504, 0x114c,
- 0x052a, 0x1d18, 0x293c, 0x3506, 0x114e,
- 0x042a, 0x1c18, 0x283c, 0x3406, 0x104e,
- 0x032a, 0x1b18, 0x273c, 0x3306, 0x0f4e,
- 0x032c, 0x1b1a, 0x273e, 0x3308, 0x0f50,
- 0x042c, 0x1c1a, 0x283e, 0x3408, 0x1050,
- 0x052c, 0x1d1a, 0x293e, 0x3508, 0x1150,
- 0x052e, 0x1d1c, 0x2940, 0x350a, 0x1152,
- 0x042e, 0x1c1c, 0x2840, 0x340a, 0x1052,
- 0x032e, 0x1b1c, 0x2740, 0x330a, 0x0f52,
- 0x0330, 0x1b1e, 0x2742, 0x330c, 0x0f54,
- 0x0430, 0x1c1e, 0x2842, 0x340c, 0x1054,
- 0x0530, 0x1d1e, 0x2942, 0x350c, 0x1154,
- 0x0532, 0x1d20, 0x2944, 0x350e, 0x1156,
- 0x0432, 0x1c20, 0x2844, 0x340e, 0x1056,
- 0x0332, 0x1b20, 0x2744, 0x330e, 0x0f56,
- 0x0334, 0x1b22, 0x2746, 0x3310, 0x0f58,
- 0x0434, 0x1c22, 0x2846, 0x3410, 0x1058,
- 0x0534, 0x1d22, 0x2946, 0x3510, 0x1158,
- 0x0924, 0x2112, 0x2d36, 0x3900, 0x1548,
- 0x0a24, 0x2212, 0x2e36, 0x3a00, 0x1648,
- 0x0b24, 0x2312, 0x2f36, 0x3b00, 0x1748,
- 0x0b26, 0x2314, 0x2f38, 0x3b02, 0x174a,
- 0x0a26, 0x2214, 0x2e38, 0x3a02, 0x164a,
- 0x0926, 0x2114, 0x2d38, 0x3902, 0x154a,
- 0x0928, 0x2116, 0x2d3a, 0x3904, 0x154c,
- 0x0a28, 0x2216, 0x2e3a, 0x3a04, 0x164c,
- 0x0b28, 0x2316, 0x2f3a, 0x3b04, 0x174c,
- 0x0b2a, 0x2318, 0x2f3c, 0x3b06, 0x174e,
- 0x0a2a, 0x2218, 0x2e3c, 0x3a06, 0x164e,
- 0x092a, 0x2118, 0x2d3c, 0x3906, 0x154e,
- 0x092c, 0x211a, 0x2d3e, 0x3908, 0x1550,
- 0x0a2c, 0x221a, 0x2e3e, 0x3a08, 0x1650,
- 0x0b2c, 0x231a, 0x2f3e, 0x3b08, 0x1750,
- 0x0b2e, 0x231c, 0x2f40, 0x3b0a, 0x1752,
- 0x0a2e, 0x221c, 0x2e40, 0x3a0a, 0x1652,
- 0x092e, 0x211c, 0x2d40, 0x390a, 0x1552,
- 0x0930, 0x211e, 0x2d42, 0x390c, 0x1554,
- 0x0a30, 0x221e, 0x2e42, 0x3a0c, 0x1654,
- 0x0b30, 0x231e, 0x2f42, 0x3b0c, 0x1754,
- 0x0b32, 0x2320, 0x2f44, 0x3b0e, 0x1756,
- 0x0a32, 0x2220, 0x2e44, 0x3a0e, 0x1656,
- 0x0932, 0x2120, 0x2d44, 0x390e, 0x1556,
- 0x0934, 0x2122, 0x2d46, 0x3910, 0x1558,
- 0x0a34, 0x2222, 0x2e46, 0x3a10, 0x1658,
- 0x0b34, 0x2322, 0x2f46, 0x3b10, 0x1758,
+ 0x0c48, 0x2424, 0x306c, 0x0000, 0x1890,
+ 0x0d48, 0x2524, 0x316c, 0x0100, 0x1990,
+ 0x0e48, 0x2624, 0x326c, 0x0200, 0x1a90,
+ 0x0e4c, 0x2628, 0x3270, 0x0204, 0x1a94,
+ 0x0d4c, 0x2528, 0x3170, 0x0104, 0x1994,
+ 0x0c4c, 0x2428, 0x3070, 0x0004, 0x1894,
+ 0x0c50, 0x242c, 0x3074, 0x0008, 0x1898,
+ 0x0d50, 0x252c, 0x3174, 0x0108, 0x1998,
+ 0x0e50, 0x262c, 0x3274, 0x0208, 0x1a98,
+ 0x0e54, 0x2630, 0x3278, 0x020c, 0x1a9c,
+ 0x0d54, 0x2530, 0x3178, 0x010c, 0x199c,
+ 0x0c54, 0x2430, 0x3078, 0x000c, 0x189c,
+ 0x0c58, 0x2434, 0x307c, 0x0010, 0x18a0,
+ 0x0d58, 0x2534, 0x317c, 0x0110, 0x19a0,
+ 0x0e58, 0x2634, 0x327c, 0x0210, 0x1aa0,
+ 0x0e5c, 0x2638, 0x3280, 0x0214, 0x1aa4,
+ 0x0d5c, 0x2538, 0x3180, 0x0114, 0x19a4,
+ 0x0c5c, 0x2438, 0x3080, 0x0014, 0x18a4,
+ 0x0c60, 0x243c, 0x3084, 0x0018, 0x18a8,
+ 0x0d60, 0x253c, 0x3184, 0x0118, 0x19a8,
+ 0x0e60, 0x263c, 0x3284, 0x0218, 0x1aa8,
+ 0x0e64, 0x2640, 0x3288, 0x021c, 0x1aac,
+ 0x0d64, 0x2540, 0x3188, 0x011c, 0x19ac,
+ 0x0c64, 0x2440, 0x3088, 0x001c, 0x18ac,
+ 0x0c68, 0x2444, 0x308c, 0x0020, 0x18b0,
+ 0x0d68, 0x2544, 0x318c, 0x0120, 0x19b0,
+ 0x0e68, 0x2644, 0x328c, 0x0220, 0x1ab0,
+ 0x1248, 0x2a24, 0x366c, 0x0600, 0x1e90,
+ 0x1348, 0x2b24, 0x376c, 0x0700, 0x1f90,
+ 0x1448, 0x2c24, 0x386c, 0x0800, 0x2090,
+ 0x144c, 0x2c28, 0x3870, 0x0804, 0x2094,
+ 0x134c, 0x2b28, 0x3770, 0x0704, 0x1f94,
+ 0x124c, 0x2a28, 0x3670, 0x0604, 0x1e94,
+ 0x1250, 0x2a2c, 0x3674, 0x0608, 0x1e98,
+ 0x1350, 0x2b2c, 0x3774, 0x0708, 0x1f98,
+ 0x1450, 0x2c2c, 0x3874, 0x0808, 0x2098,
+ 0x1454, 0x2c30, 0x3878, 0x080c, 0x209c,
+ 0x1354, 0x2b30, 0x3778, 0x070c, 0x1f9c,
+ 0x1254, 0x2a30, 0x3678, 0x060c, 0x1e9c,
+ 0x1258, 0x2a34, 0x367c, 0x0610, 0x1ea0,
+ 0x1358, 0x2b34, 0x377c, 0x0710, 0x1fa0,
+ 0x1458, 0x2c34, 0x387c, 0x0810, 0x20a0,
+ 0x145c, 0x2c38, 0x3880, 0x0814, 0x20a4,
+ 0x135c, 0x2b38, 0x3780, 0x0714, 0x1fa4,
+ 0x125c, 0x2a38, 0x3680, 0x0614, 0x1ea4,
+ 0x1260, 0x2a3c, 0x3684, 0x0618, 0x1ea8,
+ 0x1360, 0x2b3c, 0x3784, 0x0718, 0x1fa8,
+ 0x1460, 0x2c3c, 0x3884, 0x0818, 0x20a8,
+ 0x1464, 0x2c40, 0x3888, 0x081c, 0x20ac,
+ 0x1364, 0x2b40, 0x3788, 0x071c, 0x1fac,
+ 0x1264, 0x2a40, 0x3688, 0x061c, 0x1eac,
+ 0x1268, 0x2a44, 0x368c, 0x0620, 0x1eb0,
+ 0x1368, 0x2b44, 0x378c, 0x0720, 0x1fb0,
+ 0x1468, 0x2c44, 0x388c, 0x0820, 0x20b0,
+ 0x1848, 0x3024, 0x006c, 0x0c00, 0x2490,
+ 0x1948, 0x3124, 0x016c, 0x0d00, 0x2590,
+ 0x1a48, 0x3224, 0x026c, 0x0e00, 0x2690,
+ 0x1a4c, 0x3228, 0x0270, 0x0e04, 0x2694,
+ 0x194c, 0x3128, 0x0170, 0x0d04, 0x2594,
+ 0x184c, 0x3028, 0x0070, 0x0c04, 0x2494,
+ 0x1850, 0x302c, 0x0074, 0x0c08, 0x2498,
+ 0x1950, 0x312c, 0x0174, 0x0d08, 0x2598,
+ 0x1a50, 0x322c, 0x0274, 0x0e08, 0x2698,
+ 0x1a54, 0x3230, 0x0278, 0x0e0c, 0x269c,
+ 0x1954, 0x3130, 0x0178, 0x0d0c, 0x259c,
+ 0x1854, 0x3030, 0x0078, 0x0c0c, 0x249c,
+ 0x1858, 0x3034, 0x007c, 0x0c10, 0x24a0,
+ 0x1958, 0x3134, 0x017c, 0x0d10, 0x25a0,
+ 0x1a58, 0x3234, 0x027c, 0x0e10, 0x26a0,
+ 0x1a5c, 0x3238, 0x0280, 0x0e14, 0x26a4,
+ 0x195c, 0x3138, 0x0180, 0x0d14, 0x25a4,
+ 0x185c, 0x3038, 0x0080, 0x0c14, 0x24a4,
+ 0x1860, 0x303c, 0x0084, 0x0c18, 0x24a8,
+ 0x1960, 0x313c, 0x0184, 0x0d18, 0x25a8,
+ 0x1a60, 0x323c, 0x0284, 0x0e18, 0x26a8,
+ 0x1a64, 0x3240, 0x0288, 0x0e1c, 0x26ac,
+ 0x1964, 0x3140, 0x0188, 0x0d1c, 0x25ac,
+ 0x1864, 0x3040, 0x0088, 0x0c1c, 0x24ac,
+ 0x1868, 0x3044, 0x008c, 0x0c20, 0x24b0,
+ 0x1968, 0x3144, 0x018c, 0x0d20, 0x25b0,
+ 0x1a68, 0x3244, 0x028c, 0x0e20, 0x26b0,
+ 0x1e48, 0x3624, 0x066c, 0x1200, 0x2a90,
+ 0x1f48, 0x3724, 0x076c, 0x1300, 0x2b90,
+ 0x2048, 0x3824, 0x086c, 0x1400, 0x2c90,
+ 0x204c, 0x3828, 0x0870, 0x1404, 0x2c94,
+ 0x1f4c, 0x3728, 0x0770, 0x1304, 0x2b94,
+ 0x1e4c, 0x3628, 0x0670, 0x1204, 0x2a94,
+ 0x1e50, 0x362c, 0x0674, 0x1208, 0x2a98,
+ 0x1f50, 0x372c, 0x0774, 0x1308, 0x2b98,
+ 0x2050, 0x382c, 0x0874, 0x1408, 0x2c98,
+ 0x2054, 0x3830, 0x0878, 0x140c, 0x2c9c,
+ 0x1f54, 0x3730, 0x0778, 0x130c, 0x2b9c,
+ 0x1e54, 0x3630, 0x0678, 0x120c, 0x2a9c,
+ 0x1e58, 0x3634, 0x067c, 0x1210, 0x2aa0,
+ 0x1f58, 0x3734, 0x077c, 0x1310, 0x2ba0,
+ 0x2058, 0x3834, 0x087c, 0x1410, 0x2ca0,
+ 0x205c, 0x3838, 0x0880, 0x1414, 0x2ca4,
+ 0x1f5c, 0x3738, 0x0780, 0x1314, 0x2ba4,
+ 0x1e5c, 0x3638, 0x0680, 0x1214, 0x2aa4,
+ 0x1e60, 0x363c, 0x0684, 0x1218, 0x2aa8,
+ 0x1f60, 0x373c, 0x0784, 0x1318, 0x2ba8,
+ 0x2060, 0x383c, 0x0884, 0x1418, 0x2ca8,
+ 0x2064, 0x3840, 0x0888, 0x141c, 0x2cac,
+ 0x1f64, 0x3740, 0x0788, 0x131c, 0x2bac,
+ 0x1e64, 0x3640, 0x0688, 0x121c, 0x2aac,
+ 0x1e68, 0x3644, 0x068c, 0x1220, 0x2ab0,
+ 0x1f68, 0x3744, 0x078c, 0x1320, 0x2bb0,
+ 0x2068, 0x3844, 0x088c, 0x1420, 0x2cb0,
+ 0x2448, 0x0024, 0x0c6c, 0x1800, 0x3090,
+ 0x2548, 0x0124, 0x0d6c, 0x1900, 0x3190,
+ 0x2648, 0x0224, 0x0e6c, 0x1a00, 0x3290,
+ 0x264c, 0x0228, 0x0e70, 0x1a04, 0x3294,
+ 0x254c, 0x0128, 0x0d70, 0x1904, 0x3194,
+ 0x244c, 0x0028, 0x0c70, 0x1804, 0x3094,
+ 0x2450, 0x002c, 0x0c74, 0x1808, 0x3098,
+ 0x2550, 0x012c, 0x0d74, 0x1908, 0x3198,
+ 0x2650, 0x022c, 0x0e74, 0x1a08, 0x3298,
+ 0x2654, 0x0230, 0x0e78, 0x1a0c, 0x329c,
+ 0x2554, 0x0130, 0x0d78, 0x190c, 0x319c,
+ 0x2454, 0x0030, 0x0c78, 0x180c, 0x309c,
+ 0x2458, 0x0034, 0x0c7c, 0x1810, 0x30a0,
+ 0x2558, 0x0134, 0x0d7c, 0x1910, 0x31a0,
+ 0x2658, 0x0234, 0x0e7c, 0x1a10, 0x32a0,
+ 0x265c, 0x0238, 0x0e80, 0x1a14, 0x32a4,
+ 0x255c, 0x0138, 0x0d80, 0x1914, 0x31a4,
+ 0x245c, 0x0038, 0x0c80, 0x1814, 0x30a4,
+ 0x2460, 0x003c, 0x0c84, 0x1818, 0x30a8,
+ 0x2560, 0x013c, 0x0d84, 0x1918, 0x31a8,
+ 0x2660, 0x023c, 0x0e84, 0x1a18, 0x32a8,
+ 0x2664, 0x0240, 0x0e88, 0x1a1c, 0x32ac,
+ 0x2564, 0x0140, 0x0d88, 0x191c, 0x31ac,
+ 0x2464, 0x0040, 0x0c88, 0x181c, 0x30ac,
+ 0x2468, 0x0044, 0x0c8c, 0x1820, 0x30b0,
+ 0x2568, 0x0144, 0x0d8c, 0x1920, 0x31b0,
+ 0x2668, 0x0244, 0x0e8c, 0x1a20, 0x32b0,
+ 0x2a48, 0x0624, 0x126c, 0x1e00, 0x3690,
+ 0x2b48, 0x0724, 0x136c, 0x1f00, 0x3790,
+ 0x2c48, 0x0824, 0x146c, 0x2000, 0x3890,
+ 0x2c4c, 0x0828, 0x1470, 0x2004, 0x3894,
+ 0x2b4c, 0x0728, 0x1370, 0x1f04, 0x3794,
+ 0x2a4c, 0x0628, 0x1270, 0x1e04, 0x3694,
+ 0x2a50, 0x062c, 0x1274, 0x1e08, 0x3698,
+ 0x2b50, 0x072c, 0x1374, 0x1f08, 0x3798,
+ 0x2c50, 0x082c, 0x1474, 0x2008, 0x3898,
+ 0x2c54, 0x0830, 0x1478, 0x200c, 0x389c,
+ 0x2b54, 0x0730, 0x1378, 0x1f0c, 0x379c,
+ 0x2a54, 0x0630, 0x1278, 0x1e0c, 0x369c,
+ 0x2a58, 0x0634, 0x127c, 0x1e10, 0x36a0,
+ 0x2b58, 0x0734, 0x137c, 0x1f10, 0x37a0,
+ 0x2c58, 0x0834, 0x147c, 0x2010, 0x38a0,
+ 0x2c5c, 0x0838, 0x1480, 0x2014, 0x38a4,
+ 0x2b5c, 0x0738, 0x1380, 0x1f14, 0x37a4,
+ 0x2a5c, 0x0638, 0x1280, 0x1e14, 0x36a4,
+ 0x2a60, 0x063c, 0x1284, 0x1e18, 0x36a8,
+ 0x2b60, 0x073c, 0x1384, 0x1f18, 0x37a8,
+ 0x2c60, 0x083c, 0x1484, 0x2018, 0x38a8,
+ 0x2c64, 0x0840, 0x1488, 0x201c, 0x38ac,
+ 0x2b64, 0x0740, 0x1388, 0x1f1c, 0x37ac,
+ 0x2a64, 0x0640, 0x1288, 0x1e1c, 0x36ac,
+ 0x2a68, 0x0644, 0x128c, 0x1e20, 0x36b0,
+ 0x2b68, 0x0744, 0x138c, 0x1f20, 0x37b0,
+ 0x2c68, 0x0844, 0x148c, 0x2020, 0x38b0,
+ 0x3048, 0x0c24, 0x186c, 0x2400, 0x0090,
+ 0x3148, 0x0d24, 0x196c, 0x2500, 0x0190,
+ 0x3248, 0x0e24, 0x1a6c, 0x2600, 0x0290,
+ 0x324c, 0x0e28, 0x1a70, 0x2604, 0x0294,
+ 0x314c, 0x0d28, 0x1970, 0x2504, 0x0194,
+ 0x304c, 0x0c28, 0x1870, 0x2404, 0x0094,
+ 0x3050, 0x0c2c, 0x1874, 0x2408, 0x0098,
+ 0x3150, 0x0d2c, 0x1974, 0x2508, 0x0198,
+ 0x3250, 0x0e2c, 0x1a74, 0x2608, 0x0298,
+ 0x3254, 0x0e30, 0x1a78, 0x260c, 0x029c,
+ 0x3154, 0x0d30, 0x1978, 0x250c, 0x019c,
+ 0x3054, 0x0c30, 0x1878, 0x240c, 0x009c,
+ 0x3058, 0x0c34, 0x187c, 0x2410, 0x00a0,
+ 0x3158, 0x0d34, 0x197c, 0x2510, 0x01a0,
+ 0x3258, 0x0e34, 0x1a7c, 0x2610, 0x02a0,
+ 0x325c, 0x0e38, 0x1a80, 0x2614, 0x02a4,
+ 0x315c, 0x0d38, 0x1980, 0x2514, 0x01a4,
+ 0x305c, 0x0c38, 0x1880, 0x2414, 0x00a4,
+ 0x3060, 0x0c3c, 0x1884, 0x2418, 0x00a8,
+ 0x3160, 0x0d3c, 0x1984, 0x2518, 0x01a8,
+ 0x3260, 0x0e3c, 0x1a84, 0x2618, 0x02a8,
+ 0x3264, 0x0e40, 0x1a88, 0x261c, 0x02ac,
+ 0x3164, 0x0d40, 0x1988, 0x251c, 0x01ac,
+ 0x3064, 0x0c40, 0x1888, 0x241c, 0x00ac,
+ 0x3068, 0x0c44, 0x188c, 0x2420, 0x00b0,
+ 0x3168, 0x0d44, 0x198c, 0x2520, 0x01b0,
+ 0x3268, 0x0e44, 0x1a8c, 0x2620, 0x02b0,
+ 0x3648, 0x1224, 0x1e6c, 0x2a00, 0x0690,
+ 0x3748, 0x1324, 0x1f6c, 0x2b00, 0x0790,
+ 0x3848, 0x1424, 0x206c, 0x2c00, 0x0890,
+ 0x384c, 0x1428, 0x2070, 0x2c04, 0x0894,
+ 0x374c, 0x1328, 0x1f70, 0x2b04, 0x0794,
+ 0x364c, 0x1228, 0x1e70, 0x2a04, 0x0694,
+ 0x3650, 0x122c, 0x1e74, 0x2a08, 0x0698,
+ 0x3750, 0x132c, 0x1f74, 0x2b08, 0x0798,
+ 0x3850, 0x142c, 0x2074, 0x2c08, 0x0898,
+ 0x3854, 0x1430, 0x2078, 0x2c0c, 0x089c,
+ 0x3754, 0x1330, 0x1f78, 0x2b0c, 0x079c,
+ 0x3654, 0x1230, 0x1e78, 0x2a0c, 0x069c,
+ 0x3658, 0x1234, 0x1e7c, 0x2a10, 0x06a0,
+ 0x3758, 0x1334, 0x1f7c, 0x2b10, 0x07a0,
+ 0x3858, 0x1434, 0x207c, 0x2c10, 0x08a0,
+ 0x385c, 0x1438, 0x2080, 0x2c14, 0x08a4,
+ 0x375c, 0x1338, 0x1f80, 0x2b14, 0x07a4,
+ 0x365c, 0x1238, 0x1e80, 0x2a14, 0x06a4,
+ 0x3660, 0x123c, 0x1e84, 0x2a18, 0x06a8,
+ 0x3760, 0x133c, 0x1f84, 0x2b18, 0x07a8,
+ 0x3860, 0x143c, 0x2084, 0x2c18, 0x08a8,
+ 0x3864, 0x1440, 0x2088, 0x2c1c, 0x08ac,
+ 0x3764, 0x1340, 0x1f88, 0x2b1c, 0x07ac,
+ 0x3664, 0x1240, 0x1e88, 0x2a1c, 0x06ac,
+ 0x3668, 0x1244, 0x1e8c, 0x2a20, 0x06b0,
+ 0x3768, 0x1344, 0x1f8c, 0x2b20, 0x07b0,
+ 0x3868, 0x1444, 0x208c, 0x2c20, 0x08b0,
+ 0x0048, 0x1824, 0x246c, 0x3000, 0x0c90,
+ 0x0148, 0x1924, 0x256c, 0x3100, 0x0d90,
+ 0x0248, 0x1a24, 0x266c, 0x3200, 0x0e90,
+ 0x024c, 0x1a28, 0x2670, 0x3204, 0x0e94,
+ 0x014c, 0x1928, 0x2570, 0x3104, 0x0d94,
+ 0x004c, 0x1828, 0x2470, 0x3004, 0x0c94,
+ 0x0050, 0x182c, 0x2474, 0x3008, 0x0c98,
+ 0x0150, 0x192c, 0x2574, 0x3108, 0x0d98,
+ 0x0250, 0x1a2c, 0x2674, 0x3208, 0x0e98,
+ 0x0254, 0x1a30, 0x2678, 0x320c, 0x0e9c,
+ 0x0154, 0x1930, 0x2578, 0x310c, 0x0d9c,
+ 0x0054, 0x1830, 0x2478, 0x300c, 0x0c9c,
+ 0x0058, 0x1834, 0x247c, 0x3010, 0x0ca0,
+ 0x0158, 0x1934, 0x257c, 0x3110, 0x0da0,
+ 0x0258, 0x1a34, 0x267c, 0x3210, 0x0ea0,
+ 0x025c, 0x1a38, 0x2680, 0x3214, 0x0ea4,
+ 0x015c, 0x1938, 0x2580, 0x3114, 0x0da4,
+ 0x005c, 0x1838, 0x2480, 0x3014, 0x0ca4,
+ 0x0060, 0x183c, 0x2484, 0x3018, 0x0ca8,
+ 0x0160, 0x193c, 0x2584, 0x3118, 0x0da8,
+ 0x0260, 0x1a3c, 0x2684, 0x3218, 0x0ea8,
+ 0x0264, 0x1a40, 0x2688, 0x321c, 0x0eac,
+ 0x0164, 0x1940, 0x2588, 0x311c, 0x0dac,
+ 0x0064, 0x1840, 0x2488, 0x301c, 0x0cac,
+ 0x0068, 0x1844, 0x248c, 0x3020, 0x0cb0,
+ 0x0168, 0x1944, 0x258c, 0x3120, 0x0db0,
+ 0x0268, 0x1a44, 0x268c, 0x3220, 0x0eb0,
+ 0x0648, 0x1e24, 0x2a6c, 0x3600, 0x1290,
+ 0x0748, 0x1f24, 0x2b6c, 0x3700, 0x1390,
+ 0x0848, 0x2024, 0x2c6c, 0x3800, 0x1490,
+ 0x084c, 0x2028, 0x2c70, 0x3804, 0x1494,
+ 0x074c, 0x1f28, 0x2b70, 0x3704, 0x1394,
+ 0x064c, 0x1e28, 0x2a70, 0x3604, 0x1294,
+ 0x0650, 0x1e2c, 0x2a74, 0x3608, 0x1298,
+ 0x0750, 0x1f2c, 0x2b74, 0x3708, 0x1398,
+ 0x0850, 0x202c, 0x2c74, 0x3808, 0x1498,
+ 0x0854, 0x2030, 0x2c78, 0x380c, 0x149c,
+ 0x0754, 0x1f30, 0x2b78, 0x370c, 0x139c,
+ 0x0654, 0x1e30, 0x2a78, 0x360c, 0x129c,
+ 0x0658, 0x1e34, 0x2a7c, 0x3610, 0x12a0,
+ 0x0758, 0x1f34, 0x2b7c, 0x3710, 0x13a0,
+ 0x0858, 0x2034, 0x2c7c, 0x3810, 0x14a0,
+ 0x085c, 0x2038, 0x2c80, 0x3814, 0x14a4,
+ 0x075c, 0x1f38, 0x2b80, 0x3714, 0x13a4,
+ 0x065c, 0x1e38, 0x2a80, 0x3614, 0x12a4,
+ 0x0660, 0x1e3c, 0x2a84, 0x3618, 0x12a8,
+ 0x0760, 0x1f3c, 0x2b84, 0x3718, 0x13a8,
+ 0x0860, 0x203c, 0x2c84, 0x3818, 0x14a8,
+ 0x0864, 0x2040, 0x2c88, 0x381c, 0x14ac,
+ 0x0764, 0x1f40, 0x2b88, 0x371c, 0x13ac,
+ 0x0664, 0x1e40, 0x2a88, 0x361c, 0x12ac,
+ 0x0668, 0x1e44, 0x2a8c, 0x3620, 0x12b0,
+ 0x0768, 0x1f44, 0x2b8c, 0x3720, 0x13b0,
+ 0x0868, 0x2044, 0x2c8c, 0x3820, 0x14b0,
+ 0x0f48, 0x2724, 0x336c, 0x0300, 0x1b90,
+ 0x1048, 0x2824, 0x346c, 0x0400, 0x1c90,
+ 0x1148, 0x2924, 0x356c, 0x0500, 0x1d90,
+ 0x114c, 0x2928, 0x3570, 0x0504, 0x1d94,
+ 0x104c, 0x2828, 0x3470, 0x0404, 0x1c94,
+ 0x0f4c, 0x2728, 0x3370, 0x0304, 0x1b94,
+ 0x0f50, 0x272c, 0x3374, 0x0308, 0x1b98,
+ 0x1050, 0x282c, 0x3474, 0x0408, 0x1c98,
+ 0x1150, 0x292c, 0x3574, 0x0508, 0x1d98,
+ 0x1154, 0x2930, 0x3578, 0x050c, 0x1d9c,
+ 0x1054, 0x2830, 0x3478, 0x040c, 0x1c9c,
+ 0x0f54, 0x2730, 0x3378, 0x030c, 0x1b9c,
+ 0x0f58, 0x2734, 0x337c, 0x0310, 0x1ba0,
+ 0x1058, 0x2834, 0x347c, 0x0410, 0x1ca0,
+ 0x1158, 0x2934, 0x357c, 0x0510, 0x1da0,
+ 0x115c, 0x2938, 0x3580, 0x0514, 0x1da4,
+ 0x105c, 0x2838, 0x3480, 0x0414, 0x1ca4,
+ 0x0f5c, 0x2738, 0x3380, 0x0314, 0x1ba4,
+ 0x0f60, 0x273c, 0x3384, 0x0318, 0x1ba8,
+ 0x1060, 0x283c, 0x3484, 0x0418, 0x1ca8,
+ 0x1160, 0x293c, 0x3584, 0x0518, 0x1da8,
+ 0x1164, 0x2940, 0x3588, 0x051c, 0x1dac,
+ 0x1064, 0x2840, 0x3488, 0x041c, 0x1cac,
+ 0x0f64, 0x2740, 0x3388, 0x031c, 0x1bac,
+ 0x0f68, 0x2744, 0x338c, 0x0320, 0x1bb0,
+ 0x1068, 0x2844, 0x348c, 0x0420, 0x1cb0,
+ 0x1168, 0x2944, 0x358c, 0x0520, 0x1db0,
+ 0x1548, 0x2d24, 0x396c, 0x0900, 0x2190,
+ 0x1648, 0x2e24, 0x3a6c, 0x0a00, 0x2290,
+ 0x1748, 0x2f24, 0x3b6c, 0x0b00, 0x2390,
+ 0x174c, 0x2f28, 0x3b70, 0x0b04, 0x2394,
+ 0x164c, 0x2e28, 0x3a70, 0x0a04, 0x2294,
+ 0x154c, 0x2d28, 0x3970, 0x0904, 0x2194,
+ 0x1550, 0x2d2c, 0x3974, 0x0908, 0x2198,
+ 0x1650, 0x2e2c, 0x3a74, 0x0a08, 0x2298,
+ 0x1750, 0x2f2c, 0x3b74, 0x0b08, 0x2398,
+ 0x1754, 0x2f30, 0x3b78, 0x0b0c, 0x239c,
+ 0x1654, 0x2e30, 0x3a78, 0x0a0c, 0x229c,
+ 0x1554, 0x2d30, 0x3978, 0x090c, 0x219c,
+ 0x1558, 0x2d34, 0x397c, 0x0910, 0x21a0,
+ 0x1658, 0x2e34, 0x3a7c, 0x0a10, 0x22a0,
+ 0x1758, 0x2f34, 0x3b7c, 0x0b10, 0x23a0,
+ 0x175c, 0x2f38, 0x3b80, 0x0b14, 0x23a4,
+ 0x165c, 0x2e38, 0x3a80, 0x0a14, 0x22a4,
+ 0x155c, 0x2d38, 0x3980, 0x0914, 0x21a4,
+ 0x1560, 0x2d3c, 0x3984, 0x0918, 0x21a8,
+ 0x1660, 0x2e3c, 0x3a84, 0x0a18, 0x22a8,
+ 0x1760, 0x2f3c, 0x3b84, 0x0b18, 0x23a8,
+ 0x1764, 0x2f40, 0x3b88, 0x0b1c, 0x23ac,
+ 0x1664, 0x2e40, 0x3a88, 0x0a1c, 0x22ac,
+ 0x1564, 0x2d40, 0x3988, 0x091c, 0x21ac,
+ 0x1568, 0x2d44, 0x398c, 0x0920, 0x21b0,
+ 0x1668, 0x2e44, 0x3a8c, 0x0a20, 0x22b0,
+ 0x1768, 0x2f44, 0x3b8c, 0x0b20, 0x23b0,
+ 0x1b48, 0x3324, 0x036c, 0x0f00, 0x2790,
+ 0x1c48, 0x3424, 0x046c, 0x1000, 0x2890,
+ 0x1d48, 0x3524, 0x056c, 0x1100, 0x2990,
+ 0x1d4c, 0x3528, 0x0570, 0x1104, 0x2994,
+ 0x1c4c, 0x3428, 0x0470, 0x1004, 0x2894,
+ 0x1b4c, 0x3328, 0x0370, 0x0f04, 0x2794,
+ 0x1b50, 0x332c, 0x0374, 0x0f08, 0x2798,
+ 0x1c50, 0x342c, 0x0474, 0x1008, 0x2898,
+ 0x1d50, 0x352c, 0x0574, 0x1108, 0x2998,
+ 0x1d54, 0x3530, 0x0578, 0x110c, 0x299c,
+ 0x1c54, 0x3430, 0x0478, 0x100c, 0x289c,
+ 0x1b54, 0x3330, 0x0378, 0x0f0c, 0x279c,
+ 0x1b58, 0x3334, 0x037c, 0x0f10, 0x27a0,
+ 0x1c58, 0x3434, 0x047c, 0x1010, 0x28a0,
+ 0x1d58, 0x3534, 0x057c, 0x1110, 0x29a0,
+ 0x1d5c, 0x3538, 0x0580, 0x1114, 0x29a4,
+ 0x1c5c, 0x3438, 0x0480, 0x1014, 0x28a4,
+ 0x1b5c, 0x3338, 0x0380, 0x0f14, 0x27a4,
+ 0x1b60, 0x333c, 0x0384, 0x0f18, 0x27a8,
+ 0x1c60, 0x343c, 0x0484, 0x1018, 0x28a8,
+ 0x1d60, 0x353c, 0x0584, 0x1118, 0x29a8,
+ 0x1d64, 0x3540, 0x0588, 0x111c, 0x29ac,
+ 0x1c64, 0x3440, 0x0488, 0x101c, 0x28ac,
+ 0x1b64, 0x3340, 0x0388, 0x0f1c, 0x27ac,
+ 0x1b68, 0x3344, 0x038c, 0x0f20, 0x27b0,
+ 0x1c68, 0x3444, 0x048c, 0x1020, 0x28b0,
+ 0x1d68, 0x3544, 0x058c, 0x1120, 0x29b0,
+ 0x2148, 0x3924, 0x096c, 0x1500, 0x2d90,
+ 0x2248, 0x3a24, 0x0a6c, 0x1600, 0x2e90,
+ 0x2348, 0x3b24, 0x0b6c, 0x1700, 0x2f90,
+ 0x234c, 0x3b28, 0x0b70, 0x1704, 0x2f94,
+ 0x224c, 0x3a28, 0x0a70, 0x1604, 0x2e94,
+ 0x214c, 0x3928, 0x0970, 0x1504, 0x2d94,
+ 0x2150, 0x392c, 0x0974, 0x1508, 0x2d98,
+ 0x2250, 0x3a2c, 0x0a74, 0x1608, 0x2e98,
+ 0x2350, 0x3b2c, 0x0b74, 0x1708, 0x2f98,
+ 0x2354, 0x3b30, 0x0b78, 0x170c, 0x2f9c,
+ 0x2254, 0x3a30, 0x0a78, 0x160c, 0x2e9c,
+ 0x2154, 0x3930, 0x0978, 0x150c, 0x2d9c,
+ 0x2158, 0x3934, 0x097c, 0x1510, 0x2da0,
+ 0x2258, 0x3a34, 0x0a7c, 0x1610, 0x2ea0,
+ 0x2358, 0x3b34, 0x0b7c, 0x1710, 0x2fa0,
+ 0x235c, 0x3b38, 0x0b80, 0x1714, 0x2fa4,
+ 0x225c, 0x3a38, 0x0a80, 0x1614, 0x2ea4,
+ 0x215c, 0x3938, 0x0980, 0x1514, 0x2da4,
+ 0x2160, 0x393c, 0x0984, 0x1518, 0x2da8,
+ 0x2260, 0x3a3c, 0x0a84, 0x1618, 0x2ea8,
+ 0x2360, 0x3b3c, 0x0b84, 0x1718, 0x2fa8,
+ 0x2364, 0x3b40, 0x0b88, 0x171c, 0x2fac,
+ 0x2264, 0x3a40, 0x0a88, 0x161c, 0x2eac,
+ 0x2164, 0x3940, 0x0988, 0x151c, 0x2dac,
+ 0x2168, 0x3944, 0x098c, 0x1520, 0x2db0,
+ 0x2268, 0x3a44, 0x0a8c, 0x1620, 0x2eb0,
+ 0x2368, 0x3b44, 0x0b8c, 0x1720, 0x2fb0,
+ 0x2748, 0x0324, 0x0f6c, 0x1b00, 0x3390,
+ 0x2848, 0x0424, 0x106c, 0x1c00, 0x3490,
+ 0x2948, 0x0524, 0x116c, 0x1d00, 0x3590,
+ 0x294c, 0x0528, 0x1170, 0x1d04, 0x3594,
+ 0x284c, 0x0428, 0x1070, 0x1c04, 0x3494,
+ 0x274c, 0x0328, 0x0f70, 0x1b04, 0x3394,
+ 0x2750, 0x032c, 0x0f74, 0x1b08, 0x3398,
+ 0x2850, 0x042c, 0x1074, 0x1c08, 0x3498,
+ 0x2950, 0x052c, 0x1174, 0x1d08, 0x3598,
+ 0x2954, 0x0530, 0x1178, 0x1d0c, 0x359c,
+ 0x2854, 0x0430, 0x1078, 0x1c0c, 0x349c,
+ 0x2754, 0x0330, 0x0f78, 0x1b0c, 0x339c,
+ 0x2758, 0x0334, 0x0f7c, 0x1b10, 0x33a0,
+ 0x2858, 0x0434, 0x107c, 0x1c10, 0x34a0,
+ 0x2958, 0x0534, 0x117c, 0x1d10, 0x35a0,
+ 0x295c, 0x0538, 0x1180, 0x1d14, 0x35a4,
+ 0x285c, 0x0438, 0x1080, 0x1c14, 0x34a4,
+ 0x275c, 0x0338, 0x0f80, 0x1b14, 0x33a4,
+ 0x2760, 0x033c, 0x0f84, 0x1b18, 0x33a8,
+ 0x2860, 0x043c, 0x1084, 0x1c18, 0x34a8,
+ 0x2960, 0x053c, 0x1184, 0x1d18, 0x35a8,
+ 0x2964, 0x0540, 0x1188, 0x1d1c, 0x35ac,
+ 0x2864, 0x0440, 0x1088, 0x1c1c, 0x34ac,
+ 0x2764, 0x0340, 0x0f88, 0x1b1c, 0x33ac,
+ 0x2768, 0x0344, 0x0f8c, 0x1b20, 0x33b0,
+ 0x2868, 0x0444, 0x108c, 0x1c20, 0x34b0,
+ 0x2968, 0x0544, 0x118c, 0x1d20, 0x35b0,
+ 0x2d48, 0x0924, 0x156c, 0x2100, 0x3990,
+ 0x2e48, 0x0a24, 0x166c, 0x2200, 0x3a90,
+ 0x2f48, 0x0b24, 0x176c, 0x2300, 0x3b90,
+ 0x2f4c, 0x0b28, 0x1770, 0x2304, 0x3b94,
+ 0x2e4c, 0x0a28, 0x1670, 0x2204, 0x3a94,
+ 0x2d4c, 0x0928, 0x1570, 0x2104, 0x3994,
+ 0x2d50, 0x092c, 0x1574, 0x2108, 0x3998,
+ 0x2e50, 0x0a2c, 0x1674, 0x2208, 0x3a98,
+ 0x2f50, 0x0b2c, 0x1774, 0x2308, 0x3b98,
+ 0x2f54, 0x0b30, 0x1778, 0x230c, 0x3b9c,
+ 0x2e54, 0x0a30, 0x1678, 0x220c, 0x3a9c,
+ 0x2d54, 0x0930, 0x1578, 0x210c, 0x399c,
+ 0x2d58, 0x0934, 0x157c, 0x2110, 0x39a0,
+ 0x2e58, 0x0a34, 0x167c, 0x2210, 0x3aa0,
+ 0x2f58, 0x0b34, 0x177c, 0x2310, 0x3ba0,
+ 0x2f5c, 0x0b38, 0x1780, 0x2314, 0x3ba4,
+ 0x2e5c, 0x0a38, 0x1680, 0x2214, 0x3aa4,
+ 0x2d5c, 0x0938, 0x1580, 0x2114, 0x39a4,
+ 0x2d60, 0x093c, 0x1584, 0x2118, 0x39a8,
+ 0x2e60, 0x0a3c, 0x1684, 0x2218, 0x3aa8,
+ 0x2f60, 0x0b3c, 0x1784, 0x2318, 0x3ba8,
+ 0x2f64, 0x0b40, 0x1788, 0x231c, 0x3bac,
+ 0x2e64, 0x0a40, 0x1688, 0x221c, 0x3aac,
+ 0x2d64, 0x0940, 0x1588, 0x211c, 0x39ac,
+ 0x2d68, 0x0944, 0x158c, 0x2120, 0x39b0,
+ 0x2e68, 0x0a44, 0x168c, 0x2220, 0x3ab0,
+ 0x2f68, 0x0b44, 0x178c, 0x2320, 0x3bb0,
+ 0x3348, 0x0f24, 0x1b6c, 0x2700, 0x0390,
+ 0x3448, 0x1024, 0x1c6c, 0x2800, 0x0490,
+ 0x3548, 0x1124, 0x1d6c, 0x2900, 0x0590,
+ 0x354c, 0x1128, 0x1d70, 0x2904, 0x0594,
+ 0x344c, 0x1028, 0x1c70, 0x2804, 0x0494,
+ 0x334c, 0x0f28, 0x1b70, 0x2704, 0x0394,
+ 0x3350, 0x0f2c, 0x1b74, 0x2708, 0x0398,
+ 0x3450, 0x102c, 0x1c74, 0x2808, 0x0498,
+ 0x3550, 0x112c, 0x1d74, 0x2908, 0x0598,
+ 0x3554, 0x1130, 0x1d78, 0x290c, 0x059c,
+ 0x3454, 0x1030, 0x1c78, 0x280c, 0x049c,
+ 0x3354, 0x0f30, 0x1b78, 0x270c, 0x039c,
+ 0x3358, 0x0f34, 0x1b7c, 0x2710, 0x03a0,
+ 0x3458, 0x1034, 0x1c7c, 0x2810, 0x04a0,
+ 0x3558, 0x1134, 0x1d7c, 0x2910, 0x05a0,
+ 0x355c, 0x1138, 0x1d80, 0x2914, 0x05a4,
+ 0x345c, 0x1038, 0x1c80, 0x2814, 0x04a4,
+ 0x335c, 0x0f38, 0x1b80, 0x2714, 0x03a4,
+ 0x3360, 0x0f3c, 0x1b84, 0x2718, 0x03a8,
+ 0x3460, 0x103c, 0x1c84, 0x2818, 0x04a8,
+ 0x3560, 0x113c, 0x1d84, 0x2918, 0x05a8,
+ 0x3564, 0x1140, 0x1d88, 0x291c, 0x05ac,
+ 0x3464, 0x1040, 0x1c88, 0x281c, 0x04ac,
+ 0x3364, 0x0f40, 0x1b88, 0x271c, 0x03ac,
+ 0x3368, 0x0f44, 0x1b8c, 0x2720, 0x03b0,
+ 0x3468, 0x1044, 0x1c8c, 0x2820, 0x04b0,
+ 0x3568, 0x1144, 0x1d8c, 0x2920, 0x05b0,
+ 0x3948, 0x1524, 0x216c, 0x2d00, 0x0990,
+ 0x3a48, 0x1624, 0x226c, 0x2e00, 0x0a90,
+ 0x3b48, 0x1724, 0x236c, 0x2f00, 0x0b90,
+ 0x3b4c, 0x1728, 0x2370, 0x2f04, 0x0b94,
+ 0x3a4c, 0x1628, 0x2270, 0x2e04, 0x0a94,
+ 0x394c, 0x1528, 0x2170, 0x2d04, 0x0994,
+ 0x3950, 0x152c, 0x2174, 0x2d08, 0x0998,
+ 0x3a50, 0x162c, 0x2274, 0x2e08, 0x0a98,
+ 0x3b50, 0x172c, 0x2374, 0x2f08, 0x0b98,
+ 0x3b54, 0x1730, 0x2378, 0x2f0c, 0x0b9c,
+ 0x3a54, 0x1630, 0x2278, 0x2e0c, 0x0a9c,
+ 0x3954, 0x1530, 0x2178, 0x2d0c, 0x099c,
+ 0x3958, 0x1534, 0x217c, 0x2d10, 0x09a0,
+ 0x3a58, 0x1634, 0x227c, 0x2e10, 0x0aa0,
+ 0x3b58, 0x1734, 0x237c, 0x2f10, 0x0ba0,
+ 0x3b5c, 0x1738, 0x2380, 0x2f14, 0x0ba4,
+ 0x3a5c, 0x1638, 0x2280, 0x2e14, 0x0aa4,
+ 0x395c, 0x1538, 0x2180, 0x2d14, 0x09a4,
+ 0x3960, 0x153c, 0x2184, 0x2d18, 0x09a8,
+ 0x3a60, 0x163c, 0x2284, 0x2e18, 0x0aa8,
+ 0x3b60, 0x173c, 0x2384, 0x2f18, 0x0ba8,
+ 0x3b64, 0x1740, 0x2388, 0x2f1c, 0x0bac,
+ 0x3a64, 0x1640, 0x2288, 0x2e1c, 0x0aac,
+ 0x3964, 0x1540, 0x2188, 0x2d1c, 0x09ac,
+ 0x3968, 0x1544, 0x218c, 0x2d20, 0x09b0,
+ 0x3a68, 0x1644, 0x228c, 0x2e20, 0x0ab0,
+ 0x3b68, 0x1744, 0x238c, 0x2f20, 0x0bb0,
+ 0x0348, 0x1b24, 0x276c, 0x3300, 0x0f90,
+ 0x0448, 0x1c24, 0x286c, 0x3400, 0x1090,
+ 0x0548, 0x1d24, 0x296c, 0x3500, 0x1190,
+ 0x054c, 0x1d28, 0x2970, 0x3504, 0x1194,
+ 0x044c, 0x1c28, 0x2870, 0x3404, 0x1094,
+ 0x034c, 0x1b28, 0x2770, 0x3304, 0x0f94,
+ 0x0350, 0x1b2c, 0x2774, 0x3308, 0x0f98,
+ 0x0450, 0x1c2c, 0x2874, 0x3408, 0x1098,
+ 0x0550, 0x1d2c, 0x2974, 0x3508, 0x1198,
+ 0x0554, 0x1d30, 0x2978, 0x350c, 0x119c,
+ 0x0454, 0x1c30, 0x2878, 0x340c, 0x109c,
+ 0x0354, 0x1b30, 0x2778, 0x330c, 0x0f9c,
+ 0x0358, 0x1b34, 0x277c, 0x3310, 0x0fa0,
+ 0x0458, 0x1c34, 0x287c, 0x3410, 0x10a0,
+ 0x0558, 0x1d34, 0x297c, 0x3510, 0x11a0,
+ 0x055c, 0x1d38, 0x2980, 0x3514, 0x11a4,
+ 0x045c, 0x1c38, 0x2880, 0x3414, 0x10a4,
+ 0x035c, 0x1b38, 0x2780, 0x3314, 0x0fa4,
+ 0x0360, 0x1b3c, 0x2784, 0x3318, 0x0fa8,
+ 0x0460, 0x1c3c, 0x2884, 0x3418, 0x10a8,
+ 0x0560, 0x1d3c, 0x2984, 0x3518, 0x11a8,
+ 0x0564, 0x1d40, 0x2988, 0x351c, 0x11ac,
+ 0x0464, 0x1c40, 0x2888, 0x341c, 0x10ac,
+ 0x0364, 0x1b40, 0x2788, 0x331c, 0x0fac,
+ 0x0368, 0x1b44, 0x278c, 0x3320, 0x0fb0,
+ 0x0468, 0x1c44, 0x288c, 0x3420, 0x10b0,
+ 0x0568, 0x1d44, 0x298c, 0x3520, 0x11b0,
+ 0x0948, 0x2124, 0x2d6c, 0x3900, 0x1590,
+ 0x0a48, 0x2224, 0x2e6c, 0x3a00, 0x1690,
+ 0x0b48, 0x2324, 0x2f6c, 0x3b00, 0x1790,
+ 0x0b4c, 0x2328, 0x2f70, 0x3b04, 0x1794,
+ 0x0a4c, 0x2228, 0x2e70, 0x3a04, 0x1694,
+ 0x094c, 0x2128, 0x2d70, 0x3904, 0x1594,
+ 0x0950, 0x212c, 0x2d74, 0x3908, 0x1598,
+ 0x0a50, 0x222c, 0x2e74, 0x3a08, 0x1698,
+ 0x0b50, 0x232c, 0x2f74, 0x3b08, 0x1798,
+ 0x0b54, 0x2330, 0x2f78, 0x3b0c, 0x179c,
+ 0x0a54, 0x2230, 0x2e78, 0x3a0c, 0x169c,
+ 0x0954, 0x2130, 0x2d78, 0x390c, 0x159c,
+ 0x0958, 0x2134, 0x2d7c, 0x3910, 0x15a0,
+ 0x0a58, 0x2234, 0x2e7c, 0x3a10, 0x16a0,
+ 0x0b58, 0x2334, 0x2f7c, 0x3b10, 0x17a0,
+ 0x0b5c, 0x2338, 0x2f80, 0x3b14, 0x17a4,
+ 0x0a5c, 0x2238, 0x2e80, 0x3a14, 0x16a4,
+ 0x095c, 0x2138, 0x2d80, 0x3914, 0x15a4,
+ 0x0960, 0x213c, 0x2d84, 0x3918, 0x15a8,
+ 0x0a60, 0x223c, 0x2e84, 0x3a18, 0x16a8,
+ 0x0b60, 0x233c, 0x2f84, 0x3b18, 0x17a8,
+ 0x0b64, 0x2340, 0x2f88, 0x3b1c, 0x17ac,
+ 0x0a64, 0x2240, 0x2e88, 0x3a1c, 0x16ac,
+ 0x0964, 0x2140, 0x2d88, 0x391c, 0x15ac,
+ 0x0968, 0x2144, 0x2d8c, 0x3920, 0x15b0,
+ 0x0a68, 0x2244, 0x2e8c, 0x3a20, 0x16b0,
+ 0x0b68, 0x2344, 0x2f8c, 0x3b20, 0x17b0,
 };
 
 /* 2 channels per frame, 12 DIF sequences per channel,
    27 video segments per DIF sequence, 5 macroblocks per video segment */
 static const uint16_t dv_place_422_625[2*12*27*5] = {
- 0x0c24, 0x2412, 0x3036, 0x0000, 0x1848,
- 0x0d24, 0x2512, 0x3136, 0x0100, 0x1948,
- 0x0e24, 0x2612, 0x3236, 0x0200, 0x1a48,
- 0x0e26, 0x2614, 0x3238, 0x0202, 0x1a4a,
- 0x0d26, 0x2514, 0x3138, 0x0102, 0x194a,
- 0x0c26, 0x2414, 0x3038, 0x0002, 0x184a,
- 0x0c28, 0x2416, 0x303a, 0x0004, 0x184c,
- 0x0d28, 0x2516, 0x313a, 0x0104, 0x194c,
- 0x0e28, 0x2616, 0x323a, 0x0204, 0x1a4c,
- 0x0e2a, 0x2618, 0x323c, 0x0206, 0x1a4e,
- 0x0d2a, 0x2518, 0x313c, 0x0106, 0x194e,
- 0x0c2a, 0x2418, 0x303c, 0x0006, 0x184e,
- 0x0c2c, 0x241a, 0x303e, 0x0008, 0x1850,
- 0x0d2c, 0x251a, 0x313e, 0x0108, 0x1950,
- 0x0e2c, 0x261a, 0x323e, 0x0208, 0x1a50,
- 0x0e2e, 0x261c, 0x3240, 0x020a, 0x1a52,
- 0x0d2e, 0x251c, 0x3140, 0x010a, 0x1952,
- 0x0c2e, 0x241c, 0x3040, 0x000a, 0x1852,
- 0x0c30, 0x241e, 0x3042, 0x000c, 0x1854,
- 0x0d30, 0x251e, 0x3142, 0x010c, 0x1954,
- 0x0e30, 0x261e, 0x3242, 0x020c, 0x1a54,
- 0x0e32, 0x2620, 0x3244, 0x020e, 0x1a56,
- 0x0d32, 0x2520, 0x3144, 0x010e, 0x1956,
- 0x0c32, 0x2420, 0x3044, 0x000e, 0x1856,
- 0x0c34, 0x2422, 0x3046, 0x0010, 0x1858,
- 0x0d34, 0x2522, 0x3146, 0x0110, 0x1958,
- 0x0e34, 0x2622, 0x3246, 0x0210, 0x1a58,
- 0x1224, 0x2a12, 0x3636, 0x0600, 0x1e48,
- 0x1324, 0x2b12, 0x3736, 0x0700, 0x1f48,
- 0x1424, 0x2c12, 0x3836, 0x0800, 0x2048,
- 0x1426, 0x2c14, 0x3838, 0x0802, 0x204a,
- 0x1326, 0x2b14, 0x3738, 0x0702, 0x1f4a,
- 0x1226, 0x2a14, 0x3638, 0x0602, 0x1e4a,
- 0x1228, 0x2a16, 0x363a, 0x0604, 0x1e4c,
- 0x1328, 0x2b16, 0x373a, 0x0704, 0x1f4c,
- 0x1428, 0x2c16, 0x383a, 0x0804, 0x204c,
- 0x142a, 0x2c18, 0x383c, 0x0806, 0x204e,
- 0x132a, 0x2b18, 0x373c, 0x0706, 0x1f4e,
- 0x122a, 0x2a18, 0x363c, 0x0606, 0x1e4e,
- 0x122c, 0x2a1a, 0x363e, 0x0608, 0x1e50,
- 0x132c, 0x2b1a, 0x373e, 0x0708, 0x1f50,
- 0x142c, 0x2c1a, 0x383e, 0x0808, 0x2050,
- 0x142e, 0x2c1c, 0x3840, 0x080a, 0x2052,
- 0x132e, 0x2b1c, 0x3740, 0x070a, 0x1f52,
- 0x122e, 0x2a1c, 0x3640, 0x060a, 0x1e52,
- 0x1230, 0x2a1e, 0x3642, 0x060c, 0x1e54,
- 0x1330, 0x2b1e, 0x3742, 0x070c, 0x1f54,
- 0x1430, 0x2c1e, 0x3842, 0x080c, 0x2054,
- 0x1432, 0x2c20, 0x3844, 0x080e, 0x2056,
- 0x1332, 0x2b20, 0x3744, 0x070e, 0x1f56,
- 0x1232, 0x2a20, 0x3644, 0x060e, 0x1e56,
- 0x1234, 0x2a22, 0x3646, 0x0610, 0x1e58,
- 0x1334, 0x2b22, 0x3746, 0x0710, 0x1f58,
- 0x1434, 0x2c22, 0x3846, 0x0810, 0x2058,
- 0x1824, 0x3012, 0x3c36, 0x0c00, 0x2448,
- 0x1924, 0x3112, 0x3d36, 0x0d00, 0x2548,
- 0x1a24, 0x3212, 0x3e36, 0x0e00, 0x2648,
- 0x1a26, 0x3214, 0x3e38, 0x0e02, 0x264a,
- 0x1926, 0x3114, 0x3d38, 0x0d02, 0x254a,
- 0x1826, 0x3014, 0x3c38, 0x0c02, 0x244a,
- 0x1828, 0x3016, 0x3c3a, 0x0c04, 0x244c,
- 0x1928, 0x3116, 0x3d3a, 0x0d04, 0x254c,
- 0x1a28, 0x3216, 0x3e3a, 0x0e04, 0x264c,
- 0x1a2a, 0x3218, 0x3e3c, 0x0e06, 0x264e,
- 0x192a, 0x3118, 0x3d3c, 0x0d06, 0x254e,
- 0x182a, 0x3018, 0x3c3c, 0x0c06, 0x244e,
- 0x182c, 0x301a, 0x3c3e, 0x0c08, 0x2450,
- 0x192c, 0x311a, 0x3d3e, 0x0d08, 0x2550,
- 0x1a2c, 0x321a, 0x3e3e, 0x0e08, 0x2650,
- 0x1a2e, 0x321c, 0x3e40, 0x0e0a, 0x2652,
- 0x192e, 0x311c, 0x3d40, 0x0d0a, 0x2552,
- 0x182e, 0x301c, 0x3c40, 0x0c0a, 0x2452,
- 0x1830, 0x301e, 0x3c42, 0x0c0c, 0x2454,
- 0x1930, 0x311e, 0x3d42, 0x0d0c, 0x2554,
- 0x1a30, 0x321e, 0x3e42, 0x0e0c, 0x2654,
- 0x1a32, 0x3220, 0x3e44, 0x0e0e, 0x2656,
- 0x1932, 0x3120, 0x3d44, 0x0d0e, 0x2556,
- 0x1832, 0x3020, 0x3c44, 0x0c0e, 0x2456,
- 0x1834, 0x3022, 0x3c46, 0x0c10, 0x2458,
- 0x1934, 0x3122, 0x3d46, 0x0d10, 0x2558,
- 0x1a34, 0x3222, 0x3e46, 0x0e10, 0x2658,
- 0x1e24, 0x3612, 0x4236, 0x1200, 0x2a48,
- 0x1f24, 0x3712, 0x4336, 0x1300, 0x2b48,
- 0x2024, 0x3812, 0x4436, 0x1400, 0x2c48,
- 0x2026, 0x3814, 0x4438, 0x1402, 0x2c4a,
- 0x1f26, 0x3714, 0x4338, 0x1302, 0x2b4a,
- 0x1e26, 0x3614, 0x4238, 0x1202, 0x2a4a,
- 0x1e28, 0x3616, 0x423a, 0x1204, 0x2a4c,
- 0x1f28, 0x3716, 0x433a, 0x1304, 0x2b4c,
- 0x2028, 0x3816, 0x443a, 0x1404, 0x2c4c,
- 0x202a, 0x3818, 0x443c, 0x1406, 0x2c4e,
- 0x1f2a, 0x3718, 0x433c, 0x1306, 0x2b4e,
- 0x1e2a, 0x3618, 0x423c, 0x1206, 0x2a4e,
- 0x1e2c, 0x361a, 0x423e, 0x1208, 0x2a50,
- 0x1f2c, 0x371a, 0x433e, 0x1308, 0x2b50,
- 0x202c, 0x381a, 0x443e, 0x1408, 0x2c50,
- 0x202e, 0x381c, 0x4440, 0x140a, 0x2c52,
- 0x1f2e, 0x371c, 0x4340, 0x130a, 0x2b52,
- 0x1e2e, 0x361c, 0x4240, 0x120a, 0x2a52,
- 0x1e30, 0x361e, 0x4242, 0x120c, 0x2a54,
- 0x1f30, 0x371e, 0x4342, 0x130c, 0x2b54,
- 0x2030, 0x381e, 0x4442, 0x140c, 0x2c54,
- 0x2032, 0x3820, 0x4444, 0x140e, 0x2c56,
- 0x1f32, 0x3720, 0x4344, 0x130e, 0x2b56,
- 0x1e32, 0x3620, 0x4244, 0x120e, 0x2a56,
- 0x1e34, 0x3622, 0x4246, 0x1210, 0x2a58,
- 0x1f34, 0x3722, 0x4346, 0x1310, 0x2b58,
- 0x2034, 0x3822, 0x4446, 0x1410, 0x2c58,
- 0x2424, 0x3c12, 0x0036, 0x1800, 0x3048,
- 0x2524, 0x3d12, 0x0136, 0x1900, 0x3148,
- 0x2624, 0x3e12, 0x0236, 0x1a00, 0x3248,
- 0x2626, 0x3e14, 0x0238, 0x1a02, 0x324a,
- 0x2526, 0x3d14, 0x0138, 0x1902, 0x314a,
- 0x2426, 0x3c14, 0x0038, 0x1802, 0x304a,
- 0x2428, 0x3c16, 0x003a, 0x1804, 0x304c,
- 0x2528, 0x3d16, 0x013a, 0x1904, 0x314c,
- 0x2628, 0x3e16, 0x023a, 0x1a04, 0x324c,
- 0x262a, 0x3e18, 0x023c, 0x1a06, 0x324e,
- 0x252a, 0x3d18, 0x013c, 0x1906, 0x314e,
- 0x242a, 0x3c18, 0x003c, 0x1806, 0x304e,
- 0x242c, 0x3c1a, 0x003e, 0x1808, 0x3050,
- 0x252c, 0x3d1a, 0x013e, 0x1908, 0x3150,
- 0x262c, 0x3e1a, 0x023e, 0x1a08, 0x3250,
- 0x262e, 0x3e1c, 0x0240, 0x1a0a, 0x3252,
- 0x252e, 0x3d1c, 0x0140, 0x190a, 0x3152,
- 0x242e, 0x3c1c, 0x0040, 0x180a, 0x3052,
- 0x2430, 0x3c1e, 0x0042, 0x180c, 0x3054,
- 0x2530, 0x3d1e, 0x0142, 0x190c, 0x3154,
- 0x2630, 0x3e1e, 0x0242, 0x1a0c, 0x3254,
- 0x2632, 0x3e20, 0x0244, 0x1a0e, 0x3256,
- 0x2532, 0x3d20, 0x0144, 0x190e, 0x3156,
- 0x2432, 0x3c20, 0x0044, 0x180e, 0x3056,
- 0x2434, 0x3c22, 0x0046, 0x1810, 0x3058,
- 0x2534, 0x3d22, 0x0146, 0x1910, 0x3158,
- 0x2634, 0x3e22, 0x0246, 0x1a10, 0x3258,
- 0x2a24, 0x4212, 0x0636, 0x1e00, 0x3648,
- 0x2b24, 0x4312, 0x0736, 0x1f00, 0x3748,
- 0x2c24, 0x4412, 0x0836, 0x2000, 0x3848,
- 0x2c26, 0x4414, 0x0838, 0x2002, 0x384a,
- 0x2b26, 0x4314, 0x0738, 0x1f02, 0x374a,
- 0x2a26, 0x4214, 0x0638, 0x1e02, 0x364a,
- 0x2a28, 0x4216, 0x063a, 0x1e04, 0x364c,
- 0x2b28, 0x4316, 0x073a, 0x1f04, 0x374c,
- 0x2c28, 0x4416, 0x083a, 0x2004, 0x384c,
- 0x2c2a, 0x4418, 0x083c, 0x2006, 0x384e,
- 0x2b2a, 0x4318, 0x073c, 0x1f06, 0x374e,
- 0x2a2a, 0x4218, 0x063c, 0x1e06, 0x364e,
- 0x2a2c, 0x421a, 0x063e, 0x1e08, 0x3650,
- 0x2b2c, 0x431a, 0x073e, 0x1f08, 0x3750,
- 0x2c2c, 0x441a, 0x083e, 0x2008, 0x3850,
- 0x2c2e, 0x441c, 0x0840, 0x200a, 0x3852,
- 0x2b2e, 0x431c, 0x0740, 0x1f0a, 0x3752,
- 0x2a2e, 0x421c, 0x0640, 0x1e0a, 0x3652,
- 0x2a30, 0x421e, 0x0642, 0x1e0c, 0x3654,
- 0x2b30, 0x431e, 0x0742, 0x1f0c, 0x3754,
- 0x2c30, 0x441e, 0x0842, 0x200c, 0x3854,
- 0x2c32, 0x4420, 0x0844, 0x200e, 0x3856,
- 0x2b32, 0x4320, 0x0744, 0x1f0e, 0x3756,
- 0x2a32, 0x4220, 0x0644, 0x1e0e, 0x3656,
- 0x2a34, 0x4222, 0x0646, 0x1e10, 0x3658,
- 0x2b34, 0x4322, 0x0746, 0x1f10, 0x3758,
- 0x2c34, 0x4422, 0x0846, 0x2010, 0x3858,
- 0x3024, 0x0012, 0x0c36, 0x2400, 0x3c48,
- 0x3124, 0x0112, 0x0d36, 0x2500, 0x3d48,
- 0x3224, 0x0212, 0x0e36, 0x2600, 0x3e48,
- 0x3226, 0x0214, 0x0e38, 0x2602, 0x3e4a,
- 0x3126, 0x0114, 0x0d38, 0x2502, 0x3d4a,
- 0x3026, 0x0014, 0x0c38, 0x2402, 0x3c4a,
- 0x3028, 0x0016, 0x0c3a, 0x2404, 0x3c4c,
- 0x3128, 0x0116, 0x0d3a, 0x2504, 0x3d4c,
- 0x3228, 0x0216, 0x0e3a, 0x2604, 0x3e4c,
- 0x322a, 0x0218, 0x0e3c, 0x2606, 0x3e4e,
- 0x312a, 0x0118, 0x0d3c, 0x2506, 0x3d4e,
- 0x302a, 0x0018, 0x0c3c, 0x2406, 0x3c4e,
- 0x302c, 0x001a, 0x0c3e, 0x2408, 0x3c50,
- 0x312c, 0x011a, 0x0d3e, 0x2508, 0x3d50,
- 0x322c, 0x021a, 0x0e3e, 0x2608, 0x3e50,
- 0x322e, 0x021c, 0x0e40, 0x260a, 0x3e52,
- 0x312e, 0x011c, 0x0d40, 0x250a, 0x3d52,
- 0x302e, 0x001c, 0x0c40, 0x240a, 0x3c52,
- 0x3030, 0x001e, 0x0c42, 0x240c, 0x3c54,
- 0x3130, 0x011e, 0x0d42, 0x250c, 0x3d54,
- 0x3230, 0x021e, 0x0e42, 0x260c, 0x3e54,
- 0x3232, 0x0220, 0x0e44, 0x260e, 0x3e56,
- 0x3132, 0x0120, 0x0d44, 0x250e, 0x3d56,
- 0x3032, 0x0020, 0x0c44, 0x240e, 0x3c56,
- 0x3034, 0x0022, 0x0c46, 0x2410, 0x3c58,
- 0x3134, 0x0122, 0x0d46, 0x2510, 0x3d58,
- 0x3234, 0x0222, 0x0e46, 0x2610, 0x3e58,
- 0x3624, 0x0612, 0x1236, 0x2a00, 0x4248,
- 0x3724, 0x0712, 0x1336, 0x2b00, 0x4348,
- 0x3824, 0x0812, 0x1436, 0x2c00, 0x4448,
- 0x3826, 0x0814, 0x1438, 0x2c02, 0x444a,
- 0x3726, 0x0714, 0x1338, 0x2b02, 0x434a,
- 0x3626, 0x0614, 0x1238, 0x2a02, 0x424a,
- 0x3628, 0x0616, 0x123a, 0x2a04, 0x424c,
- 0x3728, 0x0716, 0x133a, 0x2b04, 0x434c,
- 0x3828, 0x0816, 0x143a, 0x2c04, 0x444c,
- 0x382a, 0x0818, 0x143c, 0x2c06, 0x444e,
- 0x372a, 0x0718, 0x133c, 0x2b06, 0x434e,
- 0x362a, 0x0618, 0x123c, 0x2a06, 0x424e,
- 0x362c, 0x061a, 0x123e, 0x2a08, 0x4250,
- 0x372c, 0x071a, 0x133e, 0x2b08, 0x4350,
- 0x382c, 0x081a, 0x143e, 0x2c08, 0x4450,
- 0x382e, 0x081c, 0x1440, 0x2c0a, 0x4452,
- 0x372e, 0x071c, 0x1340, 0x2b0a, 0x4352,
- 0x362e, 0x061c, 0x1240, 0x2a0a, 0x4252,
- 0x3630, 0x061e, 0x1242, 0x2a0c, 0x4254,
- 0x3730, 0x071e, 0x1342, 0x2b0c, 0x4354,
- 0x3830, 0x081e, 0x1442, 0x2c0c, 0x4454,
- 0x3832, 0x0820, 0x1444, 0x2c0e, 0x4456,
- 0x3732, 0x0720, 0x1344, 0x2b0e, 0x4356,
- 0x3632, 0x0620, 0x1244, 0x2a0e, 0x4256,
- 0x3634, 0x0622, 0x1246, 0x2a10, 0x4258,
- 0x3734, 0x0722, 0x1346, 0x2b10, 0x4358,
- 0x3834, 0x0822, 0x1446, 0x2c10, 0x4458,
- 0x3c24, 0x0c12, 0x1836, 0x3000, 0x0048,
- 0x3d24, 0x0d12, 0x1936, 0x3100, 0x0148,
- 0x3e24, 0x0e12, 0x1a36, 0x3200, 0x0248,
- 0x3e26, 0x0e14, 0x1a38, 0x3202, 0x024a,
- 0x3d26, 0x0d14, 0x1938, 0x3102, 0x014a,
- 0x3c26, 0x0c14, 0x1838, 0x3002, 0x004a,
- 0x3c28, 0x0c16, 0x183a, 0x3004, 0x004c,
- 0x3d28, 0x0d16, 0x193a, 0x3104, 0x014c,
- 0x3e28, 0x0e16, 0x1a3a, 0x3204, 0x024c,
- 0x3e2a, 0x0e18, 0x1a3c, 0x3206, 0x024e,
- 0x3d2a, 0x0d18, 0x193c, 0x3106, 0x014e,
- 0x3c2a, 0x0c18, 0x183c, 0x3006, 0x004e,
- 0x3c2c, 0x0c1a, 0x183e, 0x3008, 0x0050,
- 0x3d2c, 0x0d1a, 0x193e, 0x3108, 0x0150,
- 0x3e2c, 0x0e1a, 0x1a3e, 0x3208, 0x0250,
- 0x3e2e, 0x0e1c, 0x1a40, 0x320a, 0x0252,
- 0x3d2e, 0x0d1c, 0x1940, 0x310a, 0x0152,
- 0x3c2e, 0x0c1c, 0x1840, 0x300a, 0x0052,
- 0x3c30, 0x0c1e, 0x1842, 0x300c, 0x0054,
- 0x3d30, 0x0d1e, 0x1942, 0x310c, 0x0154,
- 0x3e30, 0x0e1e, 0x1a42, 0x320c, 0x0254,
- 0x3e32, 0x0e20, 0x1a44, 0x320e, 0x0256,
- 0x3d32, 0x0d20, 0x1944, 0x310e, 0x0156,
- 0x3c32, 0x0c20, 0x1844, 0x300e, 0x0056,
- 0x3c34, 0x0c22, 0x1846, 0x3010, 0x0058,
- 0x3d34, 0x0d22, 0x1946, 0x3110, 0x0158,
- 0x3e34, 0x0e22, 0x1a46, 0x3210, 0x0258,
- 0x4224, 0x1212, 0x1e36, 0x3600, 0x0648,
- 0x4324, 0x1312, 0x1f36, 0x3700, 0x0748,
- 0x4424, 0x1412, 0x2036, 0x3800, 0x0848,
- 0x4426, 0x1414, 0x2038, 0x3802, 0x084a,
- 0x4326, 0x1314, 0x1f38, 0x3702, 0x074a,
- 0x4226, 0x1214, 0x1e38, 0x3602, 0x064a,
- 0x4228, 0x1216, 0x1e3a, 0x3604, 0x064c,
- 0x4328, 0x1316, 0x1f3a, 0x3704, 0x074c,
- 0x4428, 0x1416, 0x203a, 0x3804, 0x084c,
- 0x442a, 0x1418, 0x203c, 0x3806, 0x084e,
- 0x432a, 0x1318, 0x1f3c, 0x3706, 0x074e,
- 0x422a, 0x1218, 0x1e3c, 0x3606, 0x064e,
- 0x422c, 0x121a, 0x1e3e, 0x3608, 0x0650,
- 0x432c, 0x131a, 0x1f3e, 0x3708, 0x0750,
- 0x442c, 0x141a, 0x203e, 0x3808, 0x0850,
- 0x442e, 0x141c, 0x2040, 0x380a, 0x0852,
- 0x432e, 0x131c, 0x1f40, 0x370a, 0x0752,
- 0x422e, 0x121c, 0x1e40, 0x360a, 0x0652,
- 0x4230, 0x121e, 0x1e42, 0x360c, 0x0654,
- 0x4330, 0x131e, 0x1f42, 0x370c, 0x0754,
- 0x4430, 0x141e, 0x2042, 0x380c, 0x0854,
- 0x4432, 0x1420, 0x2044, 0x380e, 0x0856,
- 0x4332, 0x1320, 0x1f44, 0x370e, 0x0756,
- 0x4232, 0x1220, 0x1e44, 0x360e, 0x0656,
- 0x4234, 0x1222, 0x1e46, 0x3610, 0x0658,
- 0x4334, 0x1322, 0x1f46, 0x3710, 0x0758,
- 0x4434, 0x1422, 0x2046, 0x3810, 0x0858,
- 0x0024, 0x1812, 0x2436, 0x3c00, 0x0c48,
- 0x0124, 0x1912, 0x2536, 0x3d00, 0x0d48,
- 0x0224, 0x1a12, 0x2636, 0x3e00, 0x0e48,
- 0x0226, 0x1a14, 0x2638, 0x3e02, 0x0e4a,
- 0x0126, 0x1914, 0x2538, 0x3d02, 0x0d4a,
- 0x0026, 0x1814, 0x2438, 0x3c02, 0x0c4a,
- 0x0028, 0x1816, 0x243a, 0x3c04, 0x0c4c,
- 0x0128, 0x1916, 0x253a, 0x3d04, 0x0d4c,
- 0x0228, 0x1a16, 0x263a, 0x3e04, 0x0e4c,
- 0x022a, 0x1a18, 0x263c, 0x3e06, 0x0e4e,
- 0x012a, 0x1918, 0x253c, 0x3d06, 0x0d4e,
- 0x002a, 0x1818, 0x243c, 0x3c06, 0x0c4e,
- 0x002c, 0x181a, 0x243e, 0x3c08, 0x0c50,
- 0x012c, 0x191a, 0x253e, 0x3d08, 0x0d50,
- 0x022c, 0x1a1a, 0x263e, 0x3e08, 0x0e50,
- 0x022e, 0x1a1c, 0x2640, 0x3e0a, 0x0e52,
- 0x012e, 0x191c, 0x2540, 0x3d0a, 0x0d52,
- 0x002e, 0x181c, 0x2440, 0x3c0a, 0x0c52,
- 0x0030, 0x181e, 0x2442, 0x3c0c, 0x0c54,
- 0x0130, 0x191e, 0x2542, 0x3d0c, 0x0d54,
- 0x0230, 0x1a1e, 0x2642, 0x3e0c, 0x0e54,
- 0x0232, 0x1a20, 0x2644, 0x3e0e, 0x0e56,
- 0x0132, 0x1920, 0x2544, 0x3d0e, 0x0d56,
- 0x0032, 0x1820, 0x2444, 0x3c0e, 0x0c56,
- 0x0034, 0x1822, 0x2446, 0x3c10, 0x0c58,
- 0x0134, 0x1922, 0x2546, 0x3d10, 0x0d58,
- 0x0234, 0x1a22, 0x2646, 0x3e10, 0x0e58,
- 0x0624, 0x1e12, 0x2a36, 0x4200, 0x1248,
- 0x0724, 0x1f12, 0x2b36, 0x4300, 0x1348,
- 0x0824, 0x2012, 0x2c36, 0x4400, 0x1448,
- 0x0826, 0x2014, 0x2c38, 0x4402, 0x144a,
- 0x0726, 0x1f14, 0x2b38, 0x4302, 0x134a,
- 0x0626, 0x1e14, 0x2a38, 0x4202, 0x124a,
- 0x0628, 0x1e16, 0x2a3a, 0x4204, 0x124c,
- 0x0728, 0x1f16, 0x2b3a, 0x4304, 0x134c,
- 0x0828, 0x2016, 0x2c3a, 0x4404, 0x144c,
- 0x082a, 0x2018, 0x2c3c, 0x4406, 0x144e,
- 0x072a, 0x1f18, 0x2b3c, 0x4306, 0x134e,
- 0x062a, 0x1e18, 0x2a3c, 0x4206, 0x124e,
- 0x062c, 0x1e1a, 0x2a3e, 0x4208, 0x1250,
- 0x072c, 0x1f1a, 0x2b3e, 0x4308, 0x1350,
- 0x082c, 0x201a, 0x2c3e, 0x4408, 0x1450,
- 0x082e, 0x201c, 0x2c40, 0x440a, 0x1452,
- 0x072e, 0x1f1c, 0x2b40, 0x430a, 0x1352,
- 0x062e, 0x1e1c, 0x2a40, 0x420a, 0x1252,
- 0x0630, 0x1e1e, 0x2a42, 0x420c, 0x1254,
- 0x0730, 0x1f1e, 0x2b42, 0x430c, 0x1354,
- 0x0830, 0x201e, 0x2c42, 0x440c, 0x1454,
- 0x0832, 0x2020, 0x2c44, 0x440e, 0x1456,
- 0x0732, 0x1f20, 0x2b44, 0x430e, 0x1356,
- 0x0632, 0x1e20, 0x2a44, 0x420e, 0x1256,
- 0x0634, 0x1e22, 0x2a46, 0x4210, 0x1258,
- 0x0734, 0x1f22, 0x2b46, 0x4310, 0x1358,
- 0x0834, 0x2022, 0x2c46, 0x4410, 0x1458,
- 0x0f24, 0x2712, 0x3336, 0x0300, 0x1b48,
- 0x1024, 0x2812, 0x3436, 0x0400, 0x1c48,
- 0x1124, 0x2912, 0x3536, 0x0500, 0x1d48,
- 0x1126, 0x2914, 0x3538, 0x0502, 0x1d4a,
- 0x1026, 0x2814, 0x3438, 0x0402, 0x1c4a,
- 0x0f26, 0x2714, 0x3338, 0x0302, 0x1b4a,
- 0x0f28, 0x2716, 0x333a, 0x0304, 0x1b4c,
- 0x1028, 0x2816, 0x343a, 0x0404, 0x1c4c,
- 0x1128, 0x2916, 0x353a, 0x0504, 0x1d4c,
- 0x112a, 0x2918, 0x353c, 0x0506, 0x1d4e,
- 0x102a, 0x2818, 0x343c, 0x0406, 0x1c4e,
- 0x0f2a, 0x2718, 0x333c, 0x0306, 0x1b4e,
- 0x0f2c, 0x271a, 0x333e, 0x0308, 0x1b50,
- 0x102c, 0x281a, 0x343e, 0x0408, 0x1c50,
- 0x112c, 0x291a, 0x353e, 0x0508, 0x1d50,
- 0x112e, 0x291c, 0x3540, 0x050a, 0x1d52,
- 0x102e, 0x281c, 0x3440, 0x040a, 0x1c52,
- 0x0f2e, 0x271c, 0x3340, 0x030a, 0x1b52,
- 0x0f30, 0x271e, 0x3342, 0x030c, 0x1b54,
- 0x1030, 0x281e, 0x3442, 0x040c, 0x1c54,
- 0x1130, 0x291e, 0x3542, 0x050c, 0x1d54,
- 0x1132, 0x2920, 0x3544, 0x050e, 0x1d56,
- 0x1032, 0x2820, 0x3444, 0x040e, 0x1c56,
- 0x0f32, 0x2720, 0x3344, 0x030e, 0x1b56,
- 0x0f34, 0x2722, 0x3346, 0x0310, 0x1b58,
- 0x1034, 0x2822, 0x3446, 0x0410, 0x1c58,
- 0x1134, 0x2922, 0x3546, 0x0510, 0x1d58,
- 0x1524, 0x2d12, 0x3936, 0x0900, 0x2148,
- 0x1624, 0x2e12, 0x3a36, 0x0a00, 0x2248,
- 0x1724, 0x2f12, 0x3b36, 0x0b00, 0x2348,
- 0x1726, 0x2f14, 0x3b38, 0x0b02, 0x234a,
- 0x1626, 0x2e14, 0x3a38, 0x0a02, 0x224a,
- 0x1526, 0x2d14, 0x3938, 0x0902, 0x214a,
- 0x1528, 0x2d16, 0x393a, 0x0904, 0x214c,
- 0x1628, 0x2e16, 0x3a3a, 0x0a04, 0x224c,
- 0x1728, 0x2f16, 0x3b3a, 0x0b04, 0x234c,
- 0x172a, 0x2f18, 0x3b3c, 0x0b06, 0x234e,
- 0x162a, 0x2e18, 0x3a3c, 0x0a06, 0x224e,
- 0x152a, 0x2d18, 0x393c, 0x0906, 0x214e,
- 0x152c, 0x2d1a, 0x393e, 0x0908, 0x2150,
- 0x162c, 0x2e1a, 0x3a3e, 0x0a08, 0x2250,
- 0x172c, 0x2f1a, 0x3b3e, 0x0b08, 0x2350,
- 0x172e, 0x2f1c, 0x3b40, 0x0b0a, 0x2352,
- 0x162e, 0x2e1c, 0x3a40, 0x0a0a, 0x2252,
- 0x152e, 0x2d1c, 0x3940, 0x090a, 0x2152,
- 0x1530, 0x2d1e, 0x3942, 0x090c, 0x2154,
- 0x1630, 0x2e1e, 0x3a42, 0x0a0c, 0x2254,
- 0x1730, 0x2f1e, 0x3b42, 0x0b0c, 0x2354,
- 0x1732, 0x2f20, 0x3b44, 0x0b0e, 0x2356,
- 0x1632, 0x2e20, 0x3a44, 0x0a0e, 0x2256,
- 0x1532, 0x2d20, 0x3944, 0x090e, 0x2156,
- 0x1534, 0x2d22, 0x3946, 0x0910, 0x2158,
- 0x1634, 0x2e22, 0x3a46, 0x0a10, 0x2258,
- 0x1734, 0x2f22, 0x3b46, 0x0b10, 0x2358,
- 0x1b24, 0x3312, 0x3f36, 0x0f00, 0x2748,
- 0x1c24, 0x3412, 0x4036, 0x1000, 0x2848,
- 0x1d24, 0x3512, 0x4136, 0x1100, 0x2948,
- 0x1d26, 0x3514, 0x4138, 0x1102, 0x294a,
- 0x1c26, 0x3414, 0x4038, 0x1002, 0x284a,
- 0x1b26, 0x3314, 0x3f38, 0x0f02, 0x274a,
- 0x1b28, 0x3316, 0x3f3a, 0x0f04, 0x274c,
- 0x1c28, 0x3416, 0x403a, 0x1004, 0x284c,
- 0x1d28, 0x3516, 0x413a, 0x1104, 0x294c,
- 0x1d2a, 0x3518, 0x413c, 0x1106, 0x294e,
- 0x1c2a, 0x3418, 0x403c, 0x1006, 0x284e,
- 0x1b2a, 0x3318, 0x3f3c, 0x0f06, 0x274e,
- 0x1b2c, 0x331a, 0x3f3e, 0x0f08, 0x2750,
- 0x1c2c, 0x341a, 0x403e, 0x1008, 0x2850,
- 0x1d2c, 0x351a, 0x413e, 0x1108, 0x2950,
- 0x1d2e, 0x351c, 0x4140, 0x110a, 0x2952,
- 0x1c2e, 0x341c, 0x4040, 0x100a, 0x2852,
- 0x1b2e, 0x331c, 0x3f40, 0x0f0a, 0x2752,
- 0x1b30, 0x331e, 0x3f42, 0x0f0c, 0x2754,
- 0x1c30, 0x341e, 0x4042, 0x100c, 0x2854,
- 0x1d30, 0x351e, 0x4142, 0x110c, 0x2954,
- 0x1d32, 0x3520, 0x4144, 0x110e, 0x2956,
- 0x1c32, 0x3420, 0x4044, 0x100e, 0x2856,
- 0x1b32, 0x3320, 0x3f44, 0x0f0e, 0x2756,
- 0x1b34, 0x3322, 0x3f46, 0x0f10, 0x2758,
- 0x1c34, 0x3422, 0x4046, 0x1010, 0x2858,
- 0x1d34, 0x3522, 0x4146, 0x1110, 0x2958,
- 0x2124, 0x3912, 0x4536, 0x1500, 0x2d48,
- 0x2224, 0x3a12, 0x4636, 0x1600, 0x2e48,
- 0x2324, 0x3b12, 0x4736, 0x1700, 0x2f48,
- 0x2326, 0x3b14, 0x4738, 0x1702, 0x2f4a,
- 0x2226, 0x3a14, 0x4638, 0x1602, 0x2e4a,
- 0x2126, 0x3914, 0x4538, 0x1502, 0x2d4a,
- 0x2128, 0x3916, 0x453a, 0x1504, 0x2d4c,
- 0x2228, 0x3a16, 0x463a, 0x1604, 0x2e4c,
- 0x2328, 0x3b16, 0x473a, 0x1704, 0x2f4c,
- 0x232a, 0x3b18, 0x473c, 0x1706, 0x2f4e,
- 0x222a, 0x3a18, 0x463c, 0x1606, 0x2e4e,
- 0x212a, 0x3918, 0x453c, 0x1506, 0x2d4e,
- 0x212c, 0x391a, 0x453e, 0x1508, 0x2d50,
- 0x222c, 0x3a1a, 0x463e, 0x1608, 0x2e50,
- 0x232c, 0x3b1a, 0x473e, 0x1708, 0x2f50,
- 0x232e, 0x3b1c, 0x4740, 0x170a, 0x2f52,
- 0x222e, 0x3a1c, 0x4640, 0x160a, 0x2e52,
- 0x212e, 0x391c, 0x4540, 0x150a, 0x2d52,
- 0x2130, 0x391e, 0x4542, 0x150c, 0x2d54,
- 0x2230, 0x3a1e, 0x4642, 0x160c, 0x2e54,
- 0x2330, 0x3b1e, 0x4742, 0x170c, 0x2f54,
- 0x2332, 0x3b20, 0x4744, 0x170e, 0x2f56,
- 0x2232, 0x3a20, 0x4644, 0x160e, 0x2e56,
- 0x2132, 0x3920, 0x4544, 0x150e, 0x2d56,
- 0x2134, 0x3922, 0x4546, 0x1510, 0x2d58,
- 0x2234, 0x3a22, 0x4646, 0x1610, 0x2e58,
- 0x2334, 0x3b22, 0x4746, 0x1710, 0x2f58,
- 0x2724, 0x3f12, 0x0336, 0x1b00, 0x3348,
- 0x2824, 0x4012, 0x0436, 0x1c00, 0x3448,
- 0x2924, 0x4112, 0x0536, 0x1d00, 0x3548,
- 0x2926, 0x4114, 0x0538, 0x1d02, 0x354a,
- 0x2826, 0x4014, 0x0438, 0x1c02, 0x344a,
- 0x2726, 0x3f14, 0x0338, 0x1b02, 0x334a,
- 0x2728, 0x3f16, 0x033a, 0x1b04, 0x334c,
- 0x2828, 0x4016, 0x043a, 0x1c04, 0x344c,
- 0x2928, 0x4116, 0x053a, 0x1d04, 0x354c,
- 0x292a, 0x4118, 0x053c, 0x1d06, 0x354e,
- 0x282a, 0x4018, 0x043c, 0x1c06, 0x344e,
- 0x272a, 0x3f18, 0x033c, 0x1b06, 0x334e,
- 0x272c, 0x3f1a, 0x033e, 0x1b08, 0x3350,
- 0x282c, 0x401a, 0x043e, 0x1c08, 0x3450,
- 0x292c, 0x411a, 0x053e, 0x1d08, 0x3550,
- 0x292e, 0x411c, 0x0540, 0x1d0a, 0x3552,
- 0x282e, 0x401c, 0x0440, 0x1c0a, 0x3452,
- 0x272e, 0x3f1c, 0x0340, 0x1b0a, 0x3352,
- 0x2730, 0x3f1e, 0x0342, 0x1b0c, 0x3354,
- 0x2830, 0x401e, 0x0442, 0x1c0c, 0x3454,
- 0x2930, 0x411e, 0x0542, 0x1d0c, 0x3554,
- 0x2932, 0x4120, 0x0544, 0x1d0e, 0x3556,
- 0x2832, 0x4020, 0x0444, 0x1c0e, 0x3456,
- 0x2732, 0x3f20, 0x0344, 0x1b0e, 0x3356,
- 0x2734, 0x3f22, 0x0346, 0x1b10, 0x3358,
- 0x2834, 0x4022, 0x0446, 0x1c10, 0x3458,
- 0x2934, 0x4122, 0x0546, 0x1d10, 0x3558,
- 0x2d24, 0x4512, 0x0936, 0x2100, 0x3948,
- 0x2e24, 0x4612, 0x0a36, 0x2200, 0x3a48,
- 0x2f24, 0x4712, 0x0b36, 0x2300, 0x3b48,
- 0x2f26, 0x4714, 0x0b38, 0x2302, 0x3b4a,
- 0x2e26, 0x4614, 0x0a38, 0x2202, 0x3a4a,
- 0x2d26, 0x4514, 0x0938, 0x2102, 0x394a,
- 0x2d28, 0x4516, 0x093a, 0x2104, 0x394c,
- 0x2e28, 0x4616, 0x0a3a, 0x2204, 0x3a4c,
- 0x2f28, 0x4716, 0x0b3a, 0x2304, 0x3b4c,
- 0x2f2a, 0x4718, 0x0b3c, 0x2306, 0x3b4e,
- 0x2e2a, 0x4618, 0x0a3c, 0x2206, 0x3a4e,
- 0x2d2a, 0x4518, 0x093c, 0x2106, 0x394e,
- 0x2d2c, 0x451a, 0x093e, 0x2108, 0x3950,
- 0x2e2c, 0x461a, 0x0a3e, 0x2208, 0x3a50,
- 0x2f2c, 0x471a, 0x0b3e, 0x2308, 0x3b50,
- 0x2f2e, 0x471c, 0x0b40, 0x230a, 0x3b52,
- 0x2e2e, 0x461c, 0x0a40, 0x220a, 0x3a52,
- 0x2d2e, 0x451c, 0x0940, 0x210a, 0x3952,
- 0x2d30, 0x451e, 0x0942, 0x210c, 0x3954,
- 0x2e30, 0x461e, 0x0a42, 0x220c, 0x3a54,
- 0x2f30, 0x471e, 0x0b42, 0x230c, 0x3b54,
- 0x2f32, 0x4720, 0x0b44, 0x230e, 0x3b56,
- 0x2e32, 0x4620, 0x0a44, 0x220e, 0x3a56,
- 0x2d32, 0x4520, 0x0944, 0x210e, 0x3956,
- 0x2d34, 0x4522, 0x0946, 0x2110, 0x3958,
- 0x2e34, 0x4622, 0x0a46, 0x2210, 0x3a58,
- 0x2f34, 0x4722, 0x0b46, 0x2310, 0x3b58,
- 0x3324, 0x0312, 0x0f36, 0x2700, 0x3f48,
- 0x3424, 0x0412, 0x1036, 0x2800, 0x4048,
- 0x3524, 0x0512, 0x1136, 0x2900, 0x4148,
- 0x3526, 0x0514, 0x1138, 0x2902, 0x414a,
- 0x3426, 0x0414, 0x1038, 0x2802, 0x404a,
- 0x3326, 0x0314, 0x0f38, 0x2702, 0x3f4a,
- 0x3328, 0x0316, 0x0f3a, 0x2704, 0x3f4c,
- 0x3428, 0x0416, 0x103a, 0x2804, 0x404c,
- 0x3528, 0x0516, 0x113a, 0x2904, 0x414c,
- 0x352a, 0x0518, 0x113c, 0x2906, 0x414e,
- 0x342a, 0x0418, 0x103c, 0x2806, 0x404e,
- 0x332a, 0x0318, 0x0f3c, 0x2706, 0x3f4e,
- 0x332c, 0x031a, 0x0f3e, 0x2708, 0x3f50,
- 0x342c, 0x041a, 0x103e, 0x2808, 0x4050,
- 0x352c, 0x051a, 0x113e, 0x2908, 0x4150,
- 0x352e, 0x051c, 0x1140, 0x290a, 0x4152,
- 0x342e, 0x041c, 0x1040, 0x280a, 0x4052,
- 0x332e, 0x031c, 0x0f40, 0x270a, 0x3f52,
- 0x3330, 0x031e, 0x0f42, 0x270c, 0x3f54,
- 0x3430, 0x041e, 0x1042, 0x280c, 0x4054,
- 0x3530, 0x051e, 0x1142, 0x290c, 0x4154,
- 0x3532, 0x0520, 0x1144, 0x290e, 0x4156,
- 0x3432, 0x0420, 0x1044, 0x280e, 0x4056,
- 0x3332, 0x0320, 0x0f44, 0x270e, 0x3f56,
- 0x3334, 0x0322, 0x0f46, 0x2710, 0x3f58,
- 0x3434, 0x0422, 0x1046, 0x2810, 0x4058,
- 0x3534, 0x0522, 0x1146, 0x2910, 0x4158,
- 0x3924, 0x0912, 0x1536, 0x2d00, 0x4548,
- 0x3a24, 0x0a12, 0x1636, 0x2e00, 0x4648,
- 0x3b24, 0x0b12, 0x1736, 0x2f00, 0x4748,
- 0x3b26, 0x0b14, 0x1738, 0x2f02, 0x474a,
- 0x3a26, 0x0a14, 0x1638, 0x2e02, 0x464a,
- 0x3926, 0x0914, 0x1538, 0x2d02, 0x454a,
- 0x3928, 0x0916, 0x153a, 0x2d04, 0x454c,
- 0x3a28, 0x0a16, 0x163a, 0x2e04, 0x464c,
- 0x3b28, 0x0b16, 0x173a, 0x2f04, 0x474c,
- 0x3b2a, 0x0b18, 0x173c, 0x2f06, 0x474e,
- 0x3a2a, 0x0a18, 0x163c, 0x2e06, 0x464e,
- 0x392a, 0x0918, 0x153c, 0x2d06, 0x454e,
- 0x392c, 0x091a, 0x153e, 0x2d08, 0x4550,
- 0x3a2c, 0x0a1a, 0x163e, 0x2e08, 0x4650,
- 0x3b2c, 0x0b1a, 0x173e, 0x2f08, 0x4750,
- 0x3b2e, 0x0b1c, 0x1740, 0x2f0a, 0x4752,
- 0x3a2e, 0x0a1c, 0x1640, 0x2e0a, 0x4652,
- 0x392e, 0x091c, 0x1540, 0x2d0a, 0x4552,
- 0x3930, 0x091e, 0x1542, 0x2d0c, 0x4554,
- 0x3a30, 0x0a1e, 0x1642, 0x2e0c, 0x4654,
- 0x3b30, 0x0b1e, 0x1742, 0x2f0c, 0x4754,
- 0x3b32, 0x0b20, 0x1744, 0x2f0e, 0x4756,
- 0x3a32, 0x0a20, 0x1644, 0x2e0e, 0x4656,
- 0x3932, 0x0920, 0x1544, 0x2d0e, 0x4556,
- 0x3934, 0x0922, 0x1546, 0x2d10, 0x4558,
- 0x3a34, 0x0a22, 0x1646, 0x2e10, 0x4658,
- 0x3b34, 0x0b22, 0x1746, 0x2f10, 0x4758,
- 0x3f24, 0x0f12, 0x1b36, 0x3300, 0x0348,
- 0x4024, 0x1012, 0x1c36, 0x3400, 0x0448,
- 0x4124, 0x1112, 0x1d36, 0x3500, 0x0548,
- 0x4126, 0x1114, 0x1d38, 0x3502, 0x054a,
- 0x4026, 0x1014, 0x1c38, 0x3402, 0x044a,
- 0x3f26, 0x0f14, 0x1b38, 0x3302, 0x034a,
- 0x3f28, 0x0f16, 0x1b3a, 0x3304, 0x034c,
- 0x4028, 0x1016, 0x1c3a, 0x3404, 0x044c,
- 0x4128, 0x1116, 0x1d3a, 0x3504, 0x054c,
- 0x412a, 0x1118, 0x1d3c, 0x3506, 0x054e,
- 0x402a, 0x1018, 0x1c3c, 0x3406, 0x044e,
- 0x3f2a, 0x0f18, 0x1b3c, 0x3306, 0x034e,
- 0x3f2c, 0x0f1a, 0x1b3e, 0x3308, 0x0350,
- 0x402c, 0x101a, 0x1c3e, 0x3408, 0x0450,
- 0x412c, 0x111a, 0x1d3e, 0x3508, 0x0550,
- 0x412e, 0x111c, 0x1d40, 0x350a, 0x0552,
- 0x402e, 0x101c, 0x1c40, 0x340a, 0x0452,
- 0x3f2e, 0x0f1c, 0x1b40, 0x330a, 0x0352,
- 0x3f30, 0x0f1e, 0x1b42, 0x330c, 0x0354,
- 0x4030, 0x101e, 0x1c42, 0x340c, 0x0454,
- 0x4130, 0x111e, 0x1d42, 0x350c, 0x0554,
- 0x4132, 0x1120, 0x1d44, 0x350e, 0x0556,
- 0x4032, 0x1020, 0x1c44, 0x340e, 0x0456,
- 0x3f32, 0x0f20, 0x1b44, 0x330e, 0x0356,
- 0x3f34, 0x0f22, 0x1b46, 0x3310, 0x0358,
- 0x4034, 0x1022, 0x1c46, 0x3410, 0x0458,
- 0x4134, 0x1122, 0x1d46, 0x3510, 0x0558,
- 0x4524, 0x1512, 0x2136, 0x3900, 0x0948,
- 0x4624, 0x1612, 0x2236, 0x3a00, 0x0a48,
- 0x4724, 0x1712, 0x2336, 0x3b00, 0x0b48,
- 0x4726, 0x1714, 0x2338, 0x3b02, 0x0b4a,
- 0x4626, 0x1614, 0x2238, 0x3a02, 0x0a4a,
- 0x4526, 0x1514, 0x2138, 0x3902, 0x094a,
- 0x4528, 0x1516, 0x213a, 0x3904, 0x094c,
- 0x4628, 0x1616, 0x223a, 0x3a04, 0x0a4c,
- 0x4728, 0x1716, 0x233a, 0x3b04, 0x0b4c,
- 0x472a, 0x1718, 0x233c, 0x3b06, 0x0b4e,
- 0x462a, 0x1618, 0x223c, 0x3a06, 0x0a4e,
- 0x452a, 0x1518, 0x213c, 0x3906, 0x094e,
- 0x452c, 0x151a, 0x213e, 0x3908, 0x0950,
- 0x462c, 0x161a, 0x223e, 0x3a08, 0x0a50,
- 0x472c, 0x171a, 0x233e, 0x3b08, 0x0b50,
- 0x472e, 0x171c, 0x2340, 0x3b0a, 0x0b52,
- 0x462e, 0x161c, 0x2240, 0x3a0a, 0x0a52,
- 0x452e, 0x151c, 0x2140, 0x390a, 0x0952,
- 0x4530, 0x151e, 0x2142, 0x390c, 0x0954,
- 0x4630, 0x161e, 0x2242, 0x3a0c, 0x0a54,
- 0x4730, 0x171e, 0x2342, 0x3b0c, 0x0b54,
- 0x4732, 0x1720, 0x2344, 0x3b0e, 0x0b56,
- 0x4632, 0x1620, 0x2244, 0x3a0e, 0x0a56,
- 0x4532, 0x1520, 0x2144, 0x390e, 0x0956,
- 0x4534, 0x1522, 0x2146, 0x3910, 0x0958,
- 0x4634, 0x1622, 0x2246, 0x3a10, 0x0a58,
- 0x4734, 0x1722, 0x2346, 0x3b10, 0x0b58,
- 0x0324, 0x1b12, 0x2736, 0x3f00, 0x0f48,
- 0x0424, 0x1c12, 0x2836, 0x4000, 0x1048,
- 0x0524, 0x1d12, 0x2936, 0x4100, 0x1148,
- 0x0526, 0x1d14, 0x2938, 0x4102, 0x114a,
- 0x0426, 0x1c14, 0x2838, 0x4002, 0x104a,
- 0x0326, 0x1b14, 0x2738, 0x3f02, 0x0f4a,
- 0x0328, 0x1b16, 0x273a, 0x3f04, 0x0f4c,
- 0x0428, 0x1c16, 0x283a, 0x4004, 0x104c,
- 0x0528, 0x1d16, 0x293a, 0x4104, 0x114c,
- 0x052a, 0x1d18, 0x293c, 0x4106, 0x114e,
- 0x042a, 0x1c18, 0x283c, 0x4006, 0x104e,
- 0x032a, 0x1b18, 0x273c, 0x3f06, 0x0f4e,
- 0x032c, 0x1b1a, 0x273e, 0x3f08, 0x0f50,
- 0x042c, 0x1c1a, 0x283e, 0x4008, 0x1050,
- 0x052c, 0x1d1a, 0x293e, 0x4108, 0x1150,
- 0x052e, 0x1d1c, 0x2940, 0x410a, 0x1152,
- 0x042e, 0x1c1c, 0x2840, 0x400a, 0x1052,
- 0x032e, 0x1b1c, 0x2740, 0x3f0a, 0x0f52,
- 0x0330, 0x1b1e, 0x2742, 0x3f0c, 0x0f54,
- 0x0430, 0x1c1e, 0x2842, 0x400c, 0x1054,
- 0x0530, 0x1d1e, 0x2942, 0x410c, 0x1154,
- 0x0532, 0x1d20, 0x2944, 0x410e, 0x1156,
- 0x0432, 0x1c20, 0x2844, 0x400e, 0x1056,
- 0x0332, 0x1b20, 0x2744, 0x3f0e, 0x0f56,
- 0x0334, 0x1b22, 0x2746, 0x3f10, 0x0f58,
- 0x0434, 0x1c22, 0x2846, 0x4010, 0x1058,
- 0x0534, 0x1d22, 0x2946, 0x4110, 0x1158,
- 0x0924, 0x2112, 0x2d36, 0x4500, 0x1548,
- 0x0a24, 0x2212, 0x2e36, 0x4600, 0x1648,
- 0x0b24, 0x2312, 0x2f36, 0x4700, 0x1748,
- 0x0b26, 0x2314, 0x2f38, 0x4702, 0x174a,
- 0x0a26, 0x2214, 0x2e38, 0x4602, 0x164a,
- 0x0926, 0x2114, 0x2d38, 0x4502, 0x154a,
- 0x0928, 0x2116, 0x2d3a, 0x4504, 0x154c,
- 0x0a28, 0x2216, 0x2e3a, 0x4604, 0x164c,
- 0x0b28, 0x2316, 0x2f3a, 0x4704, 0x174c,
- 0x0b2a, 0x2318, 0x2f3c, 0x4706, 0x174e,
- 0x0a2a, 0x2218, 0x2e3c, 0x4606, 0x164e,
- 0x092a, 0x2118, 0x2d3c, 0x4506, 0x154e,
- 0x092c, 0x211a, 0x2d3e, 0x4508, 0x1550,
- 0x0a2c, 0x221a, 0x2e3e, 0x4608, 0x1650,
- 0x0b2c, 0x231a, 0x2f3e, 0x4708, 0x1750,
- 0x0b2e, 0x231c, 0x2f40, 0x470a, 0x1752,
- 0x0a2e, 0x221c, 0x2e40, 0x460a, 0x1652,
- 0x092e, 0x211c, 0x2d40, 0x450a, 0x1552,
- 0x0930, 0x211e, 0x2d42, 0x450c, 0x1554,
- 0x0a30, 0x221e, 0x2e42, 0x460c, 0x1654,
- 0x0b30, 0x231e, 0x2f42, 0x470c, 0x1754,
- 0x0b32, 0x2320, 0x2f44, 0x470e, 0x1756,
- 0x0a32, 0x2220, 0x2e44, 0x460e, 0x1656,
- 0x0932, 0x2120, 0x2d44, 0x450e, 0x1556,
- 0x0934, 0x2122, 0x2d46, 0x4510, 0x1558,
- 0x0a34, 0x2222, 0x2e46, 0x4610, 0x1658,
- 0x0b34, 0x2322, 0x2f46, 0x4710, 0x1758,
+ 0x0c48, 0x2424, 0x306c, 0x0000, 0x1890,
+ 0x0d48, 0x2524, 0x316c, 0x0100, 0x1990,
+ 0x0e48, 0x2624, 0x326c, 0x0200, 0x1a90,
+ 0x0e4c, 0x2628, 0x3270, 0x0204, 0x1a94,
+ 0x0d4c, 0x2528, 0x3170, 0x0104, 0x1994,
+ 0x0c4c, 0x2428, 0x3070, 0x0004, 0x1894,
+ 0x0c50, 0x242c, 0x3074, 0x0008, 0x1898,
+ 0x0d50, 0x252c, 0x3174, 0x0108, 0x1998,
+ 0x0e50, 0x262c, 0x3274, 0x0208, 0x1a98,
+ 0x0e54, 0x2630, 0x3278, 0x020c, 0x1a9c,
+ 0x0d54, 0x2530, 0x3178, 0x010c, 0x199c,
+ 0x0c54, 0x2430, 0x3078, 0x000c, 0x189c,
+ 0x0c58, 0x2434, 0x307c, 0x0010, 0x18a0,
+ 0x0d58, 0x2534, 0x317c, 0x0110, 0x19a0,
+ 0x0e58, 0x2634, 0x327c, 0x0210, 0x1aa0,
+ 0x0e5c, 0x2638, 0x3280, 0x0214, 0x1aa4,
+ 0x0d5c, 0x2538, 0x3180, 0x0114, 0x19a4,
+ 0x0c5c, 0x2438, 0x3080, 0x0014, 0x18a4,
+ 0x0c60, 0x243c, 0x3084, 0x0018, 0x18a8,
+ 0x0d60, 0x253c, 0x3184, 0x0118, 0x19a8,
+ 0x0e60, 0x263c, 0x3284, 0x0218, 0x1aa8,
+ 0x0e64, 0x2640, 0x3288, 0x021c, 0x1aac,
+ 0x0d64, 0x2540, 0x3188, 0x011c, 0x19ac,
+ 0x0c64, 0x2440, 0x3088, 0x001c, 0x18ac,
+ 0x0c68, 0x2444, 0x308c, 0x0020, 0x18b0,
+ 0x0d68, 0x2544, 0x318c, 0x0120, 0x19b0,
+ 0x0e68, 0x2644, 0x328c, 0x0220, 0x1ab0,
+ 0x1248, 0x2a24, 0x366c, 0x0600, 0x1e90,
+ 0x1348, 0x2b24, 0x376c, 0x0700, 0x1f90,
+ 0x1448, 0x2c24, 0x386c, 0x0800, 0x2090,
+ 0x144c, 0x2c28, 0x3870, 0x0804, 0x2094,
+ 0x134c, 0x2b28, 0x3770, 0x0704, 0x1f94,
+ 0x124c, 0x2a28, 0x3670, 0x0604, 0x1e94,
+ 0x1250, 0x2a2c, 0x3674, 0x0608, 0x1e98,
+ 0x1350, 0x2b2c, 0x3774, 0x0708, 0x1f98,
+ 0x1450, 0x2c2c, 0x3874, 0x0808, 0x2098,
+ 0x1454, 0x2c30, 0x3878, 0x080c, 0x209c,
+ 0x1354, 0x2b30, 0x3778, 0x070c, 0x1f9c,
+ 0x1254, 0x2a30, 0x3678, 0x060c, 0x1e9c,
+ 0x1258, 0x2a34, 0x367c, 0x0610, 0x1ea0,
+ 0x1358, 0x2b34, 0x377c, 0x0710, 0x1fa0,
+ 0x1458, 0x2c34, 0x387c, 0x0810, 0x20a0,
+ 0x145c, 0x2c38, 0x3880, 0x0814, 0x20a4,
+ 0x135c, 0x2b38, 0x3780, 0x0714, 0x1fa4,
+ 0x125c, 0x2a38, 0x3680, 0x0614, 0x1ea4,
+ 0x1260, 0x2a3c, 0x3684, 0x0618, 0x1ea8,
+ 0x1360, 0x2b3c, 0x3784, 0x0718, 0x1fa8,
+ 0x1460, 0x2c3c, 0x3884, 0x0818, 0x20a8,
+ 0x1464, 0x2c40, 0x3888, 0x081c, 0x20ac,
+ 0x1364, 0x2b40, 0x3788, 0x071c, 0x1fac,
+ 0x1264, 0x2a40, 0x3688, 0x061c, 0x1eac,
+ 0x1268, 0x2a44, 0x368c, 0x0620, 0x1eb0,
+ 0x1368, 0x2b44, 0x378c, 0x0720, 0x1fb0,
+ 0x1468, 0x2c44, 0x388c, 0x0820, 0x20b0,
+ 0x1848, 0x3024, 0x3c6c, 0x0c00, 0x2490,
+ 0x1948, 0x3124, 0x3d6c, 0x0d00, 0x2590,
+ 0x1a48, 0x3224, 0x3e6c, 0x0e00, 0x2690,
+ 0x1a4c, 0x3228, 0x3e70, 0x0e04, 0x2694,
+ 0x194c, 0x3128, 0x3d70, 0x0d04, 0x2594,
+ 0x184c, 0x3028, 0x3c70, 0x0c04, 0x2494,
+ 0x1850, 0x302c, 0x3c74, 0x0c08, 0x2498,
+ 0x1950, 0x312c, 0x3d74, 0x0d08, 0x2598,
+ 0x1a50, 0x322c, 0x3e74, 0x0e08, 0x2698,
+ 0x1a54, 0x3230, 0x3e78, 0x0e0c, 0x269c,
+ 0x1954, 0x3130, 0x3d78, 0x0d0c, 0x259c,
+ 0x1854, 0x3030, 0x3c78, 0x0c0c, 0x249c,
+ 0x1858, 0x3034, 0x3c7c, 0x0c10, 0x24a0,
+ 0x1958, 0x3134, 0x3d7c, 0x0d10, 0x25a0,
+ 0x1a58, 0x3234, 0x3e7c, 0x0e10, 0x26a0,
+ 0x1a5c, 0x3238, 0x3e80, 0x0e14, 0x26a4,
+ 0x195c, 0x3138, 0x3d80, 0x0d14, 0x25a4,
+ 0x185c, 0x3038, 0x3c80, 0x0c14, 0x24a4,
+ 0x1860, 0x303c, 0x3c84, 0x0c18, 0x24a8,
+ 0x1960, 0x313c, 0x3d84, 0x0d18, 0x25a8,
+ 0x1a60, 0x323c, 0x3e84, 0x0e18, 0x26a8,
+ 0x1a64, 0x3240, 0x3e88, 0x0e1c, 0x26ac,
+ 0x1964, 0x3140, 0x3d88, 0x0d1c, 0x25ac,
+ 0x1864, 0x3040, 0x3c88, 0x0c1c, 0x24ac,
+ 0x1868, 0x3044, 0x3c8c, 0x0c20, 0x24b0,
+ 0x1968, 0x3144, 0x3d8c, 0x0d20, 0x25b0,
+ 0x1a68, 0x3244, 0x3e8c, 0x0e20, 0x26b0,
+ 0x1e48, 0x3624, 0x426c, 0x1200, 0x2a90,
+ 0x1f48, 0x3724, 0x436c, 0x1300, 0x2b90,
+ 0x2048, 0x3824, 0x446c, 0x1400, 0x2c90,
+ 0x204c, 0x3828, 0x4470, 0x1404, 0x2c94,
+ 0x1f4c, 0x3728, 0x4370, 0x1304, 0x2b94,
+ 0x1e4c, 0x3628, 0x4270, 0x1204, 0x2a94,
+ 0x1e50, 0x362c, 0x4274, 0x1208, 0x2a98,
+ 0x1f50, 0x372c, 0x4374, 0x1308, 0x2b98,
+ 0x2050, 0x382c, 0x4474, 0x1408, 0x2c98,
+ 0x2054, 0x3830, 0x4478, 0x140c, 0x2c9c,
+ 0x1f54, 0x3730, 0x4378, 0x130c, 0x2b9c,
+ 0x1e54, 0x3630, 0x4278, 0x120c, 0x2a9c,
+ 0x1e58, 0x3634, 0x427c, 0x1210, 0x2aa0,
+ 0x1f58, 0x3734, 0x437c, 0x1310, 0x2ba0,
+ 0x2058, 0x3834, 0x447c, 0x1410, 0x2ca0,
+ 0x205c, 0x3838, 0x4480, 0x1414, 0x2ca4,
+ 0x1f5c, 0x3738, 0x4380, 0x1314, 0x2ba4,
+ 0x1e5c, 0x3638, 0x4280, 0x1214, 0x2aa4,
+ 0x1e60, 0x363c, 0x4284, 0x1218, 0x2aa8,
+ 0x1f60, 0x373c, 0x4384, 0x1318, 0x2ba8,
+ 0x2060, 0x383c, 0x4484, 0x1418, 0x2ca8,
+ 0x2064, 0x3840, 0x4488, 0x141c, 0x2cac,
+ 0x1f64, 0x3740, 0x4388, 0x131c, 0x2bac,
+ 0x1e64, 0x3640, 0x4288, 0x121c, 0x2aac,
+ 0x1e68, 0x3644, 0x428c, 0x1220, 0x2ab0,
+ 0x1f68, 0x3744, 0x438c, 0x1320, 0x2bb0,
+ 0x2068, 0x3844, 0x448c, 0x1420, 0x2cb0,
+ 0x2448, 0x3c24, 0x006c, 0x1800, 0x3090,
+ 0x2548, 0x3d24, 0x016c, 0x1900, 0x3190,
+ 0x2648, 0x3e24, 0x026c, 0x1a00, 0x3290,
+ 0x264c, 0x3e28, 0x0270, 0x1a04, 0x3294,
+ 0x254c, 0x3d28, 0x0170, 0x1904, 0x3194,
+ 0x244c, 0x3c28, 0x0070, 0x1804, 0x3094,
+ 0x2450, 0x3c2c, 0x0074, 0x1808, 0x3098,
+ 0x2550, 0x3d2c, 0x0174, 0x1908, 0x3198,
+ 0x2650, 0x3e2c, 0x0274, 0x1a08, 0x3298,
+ 0x2654, 0x3e30, 0x0278, 0x1a0c, 0x329c,
+ 0x2554, 0x3d30, 0x0178, 0x190c, 0x319c,
+ 0x2454, 0x3c30, 0x0078, 0x180c, 0x309c,
+ 0x2458, 0x3c34, 0x007c, 0x1810, 0x30a0,
+ 0x2558, 0x3d34, 0x017c, 0x1910, 0x31a0,
+ 0x2658, 0x3e34, 0x027c, 0x1a10, 0x32a0,
+ 0x265c, 0x3e38, 0x0280, 0x1a14, 0x32a4,
+ 0x255c, 0x3d38, 0x0180, 0x1914, 0x31a4,
+ 0x245c, 0x3c38, 0x0080, 0x1814, 0x30a4,
+ 0x2460, 0x3c3c, 0x0084, 0x1818, 0x30a8,
+ 0x2560, 0x3d3c, 0x0184, 0x1918, 0x31a8,
+ 0x2660, 0x3e3c, 0x0284, 0x1a18, 0x32a8,
+ 0x2664, 0x3e40, 0x0288, 0x1a1c, 0x32ac,
+ 0x2564, 0x3d40, 0x0188, 0x191c, 0x31ac,
+ 0x2464, 0x3c40, 0x0088, 0x181c, 0x30ac,
+ 0x2468, 0x3c44, 0x008c, 0x1820, 0x30b0,
+ 0x2568, 0x3d44, 0x018c, 0x1920, 0x31b0,
+ 0x2668, 0x3e44, 0x028c, 0x1a20, 0x32b0,
+ 0x2a48, 0x4224, 0x066c, 0x1e00, 0x3690,
+ 0x2b48, 0x4324, 0x076c, 0x1f00, 0x3790,
+ 0x2c48, 0x4424, 0x086c, 0x2000, 0x3890,
+ 0x2c4c, 0x4428, 0x0870, 0x2004, 0x3894,
+ 0x2b4c, 0x4328, 0x0770, 0x1f04, 0x3794,
+ 0x2a4c, 0x4228, 0x0670, 0x1e04, 0x3694,
+ 0x2a50, 0x422c, 0x0674, 0x1e08, 0x3698,
+ 0x2b50, 0x432c, 0x0774, 0x1f08, 0x3798,
+ 0x2c50, 0x442c, 0x0874, 0x2008, 0x3898,
+ 0x2c54, 0x4430, 0x0878, 0x200c, 0x389c,
+ 0x2b54, 0x4330, 0x0778, 0x1f0c, 0x379c,
+ 0x2a54, 0x4230, 0x0678, 0x1e0c, 0x369c,
+ 0x2a58, 0x4234, 0x067c, 0x1e10, 0x36a0,
+ 0x2b58, 0x4334, 0x077c, 0x1f10, 0x37a0,
+ 0x2c58, 0x4434, 0x087c, 0x2010, 0x38a0,
+ 0x2c5c, 0x4438, 0x0880, 0x2014, 0x38a4,
+ 0x2b5c, 0x4338, 0x0780, 0x1f14, 0x37a4,
+ 0x2a5c, 0x4238, 0x0680, 0x1e14, 0x36a4,
+ 0x2a60, 0x423c, 0x0684, 0x1e18, 0x36a8,
+ 0x2b60, 0x433c, 0x0784, 0x1f18, 0x37a8,
+ 0x2c60, 0x443c, 0x0884, 0x2018, 0x38a8,
+ 0x2c64, 0x4440, 0x0888, 0x201c, 0x38ac,
+ 0x2b64, 0x4340, 0x0788, 0x1f1c, 0x37ac,
+ 0x2a64, 0x4240, 0x0688, 0x1e1c, 0x36ac,
+ 0x2a68, 0x4244, 0x068c, 0x1e20, 0x36b0,
+ 0x2b68, 0x4344, 0x078c, 0x1f20, 0x37b0,
+ 0x2c68, 0x4444, 0x088c, 0x2020, 0x38b0,
+ 0x3048, 0x0024, 0x0c6c, 0x2400, 0x3c90,
+ 0x3148, 0x0124, 0x0d6c, 0x2500, 0x3d90,
+ 0x3248, 0x0224, 0x0e6c, 0x2600, 0x3e90,
+ 0x324c, 0x0228, 0x0e70, 0x2604, 0x3e94,
+ 0x314c, 0x0128, 0x0d70, 0x2504, 0x3d94,
+ 0x304c, 0x0028, 0x0c70, 0x2404, 0x3c94,
+ 0x3050, 0x002c, 0x0c74, 0x2408, 0x3c98,
+ 0x3150, 0x012c, 0x0d74, 0x2508, 0x3d98,
+ 0x3250, 0x022c, 0x0e74, 0x2608, 0x3e98,
+ 0x3254, 0x0230, 0x0e78, 0x260c, 0x3e9c,
+ 0x3154, 0x0130, 0x0d78, 0x250c, 0x3d9c,
+ 0x3054, 0x0030, 0x0c78, 0x240c, 0x3c9c,
+ 0x3058, 0x0034, 0x0c7c, 0x2410, 0x3ca0,
+ 0x3158, 0x0134, 0x0d7c, 0x2510, 0x3da0,
+ 0x3258, 0x0234, 0x0e7c, 0x2610, 0x3ea0,
+ 0x325c, 0x0238, 0x0e80, 0x2614, 0x3ea4,
+ 0x315c, 0x0138, 0x0d80, 0x2514, 0x3da4,
+ 0x305c, 0x0038, 0x0c80, 0x2414, 0x3ca4,
+ 0x3060, 0x003c, 0x0c84, 0x2418, 0x3ca8,
+ 0x3160, 0x013c, 0x0d84, 0x2518, 0x3da8,
+ 0x3260, 0x023c, 0x0e84, 0x2618, 0x3ea8,
+ 0x3264, 0x0240, 0x0e88, 0x261c, 0x3eac,
+ 0x3164, 0x0140, 0x0d88, 0x251c, 0x3dac,
+ 0x3064, 0x0040, 0x0c88, 0x241c, 0x3cac,
+ 0x3068, 0x0044, 0x0c8c, 0x2420, 0x3cb0,
+ 0x3168, 0x0144, 0x0d8c, 0x2520, 0x3db0,
+ 0x3268, 0x0244, 0x0e8c, 0x2620, 0x3eb0,
+ 0x3648, 0x0624, 0x126c, 0x2a00, 0x4290,
+ 0x3748, 0x0724, 0x136c, 0x2b00, 0x4390,
+ 0x3848, 0x0824, 0x146c, 0x2c00, 0x4490,
+ 0x384c, 0x0828, 0x1470, 0x2c04, 0x4494,
+ 0x374c, 0x0728, 0x1370, 0x2b04, 0x4394,
+ 0x364c, 0x0628, 0x1270, 0x2a04, 0x4294,
+ 0x3650, 0x062c, 0x1274, 0x2a08, 0x4298,
+ 0x3750, 0x072c, 0x1374, 0x2b08, 0x4398,
+ 0x3850, 0x082c, 0x1474, 0x2c08, 0x4498,
+ 0x3854, 0x0830, 0x1478, 0x2c0c, 0x449c,
+ 0x3754, 0x0730, 0x1378, 0x2b0c, 0x439c,
+ 0x3654, 0x0630, 0x1278, 0x2a0c, 0x429c,
+ 0x3658, 0x0634, 0x127c, 0x2a10, 0x42a0,
+ 0x3758, 0x0734, 0x137c, 0x2b10, 0x43a0,
+ 0x3858, 0x0834, 0x147c, 0x2c10, 0x44a0,
+ 0x385c, 0x0838, 0x1480, 0x2c14, 0x44a4,
+ 0x375c, 0x0738, 0x1380, 0x2b14, 0x43a4,
+ 0x365c, 0x0638, 0x1280, 0x2a14, 0x42a4,
+ 0x3660, 0x063c, 0x1284, 0x2a18, 0x42a8,
+ 0x3760, 0x073c, 0x1384, 0x2b18, 0x43a8,
+ 0x3860, 0x083c, 0x1484, 0x2c18, 0x44a8,
+ 0x3864, 0x0840, 0x1488, 0x2c1c, 0x44ac,
+ 0x3764, 0x0740, 0x1388, 0x2b1c, 0x43ac,
+ 0x3664, 0x0640, 0x1288, 0x2a1c, 0x42ac,
+ 0x3668, 0x0644, 0x128c, 0x2a20, 0x42b0,
+ 0x3768, 0x0744, 0x138c, 0x2b20, 0x43b0,
+ 0x3868, 0x0844, 0x148c, 0x2c20, 0x44b0,
+ 0x3c48, 0x0c24, 0x186c, 0x3000, 0x0090,
+ 0x3d48, 0x0d24, 0x196c, 0x3100, 0x0190,
+ 0x3e48, 0x0e24, 0x1a6c, 0x3200, 0x0290,
+ 0x3e4c, 0x0e28, 0x1a70, 0x3204, 0x0294,
+ 0x3d4c, 0x0d28, 0x1970, 0x3104, 0x0194,
+ 0x3c4c, 0x0c28, 0x1870, 0x3004, 0x0094,
+ 0x3c50, 0x0c2c, 0x1874, 0x3008, 0x0098,
+ 0x3d50, 0x0d2c, 0x1974, 0x3108, 0x0198,
+ 0x3e50, 0x0e2c, 0x1a74, 0x3208, 0x0298,
+ 0x3e54, 0x0e30, 0x1a78, 0x320c, 0x029c,
+ 0x3d54, 0x0d30, 0x1978, 0x310c, 0x019c,
+ 0x3c54, 0x0c30, 0x1878, 0x300c, 0x009c,
+ 0x3c58, 0x0c34, 0x187c, 0x3010, 0x00a0,
+ 0x3d58, 0x0d34, 0x197c, 0x3110, 0x01a0,
+ 0x3e58, 0x0e34, 0x1a7c, 0x3210, 0x02a0,
+ 0x3e5c, 0x0e38, 0x1a80, 0x3214, 0x02a4,
+ 0x3d5c, 0x0d38, 0x1980, 0x3114, 0x01a4,
+ 0x3c5c, 0x0c38, 0x1880, 0x3014, 0x00a4,
+ 0x3c60, 0x0c3c, 0x1884, 0x3018, 0x00a8,
+ 0x3d60, 0x0d3c, 0x1984, 0x3118, 0x01a8,
+ 0x3e60, 0x0e3c, 0x1a84, 0x3218, 0x02a8,
+ 0x3e64, 0x0e40, 0x1a88, 0x321c, 0x02ac,
+ 0x3d64, 0x0d40, 0x1988, 0x311c, 0x01ac,
+ 0x3c64, 0x0c40, 0x1888, 0x301c, 0x00ac,
+ 0x3c68, 0x0c44, 0x188c, 0x3020, 0x00b0,
+ 0x3d68, 0x0d44, 0x198c, 0x3120, 0x01b0,
+ 0x3e68, 0x0e44, 0x1a8c, 0x3220, 0x02b0,
+ 0x4248, 0x1224, 0x1e6c, 0x3600, 0x0690,
+ 0x4348, 0x1324, 0x1f6c, 0x3700, 0x0790,
+ 0x4448, 0x1424, 0x206c, 0x3800, 0x0890,
+ 0x444c, 0x1428, 0x2070, 0x3804, 0x0894,
+ 0x434c, 0x1328, 0x1f70, 0x3704, 0x0794,
+ 0x424c, 0x1228, 0x1e70, 0x3604, 0x0694,
+ 0x4250, 0x122c, 0x1e74, 0x3608, 0x0698,
+ 0x4350, 0x132c, 0x1f74, 0x3708, 0x0798,
+ 0x4450, 0x142c, 0x2074, 0x3808, 0x0898,
+ 0x4454, 0x1430, 0x2078, 0x380c, 0x089c,
+ 0x4354, 0x1330, 0x1f78, 0x370c, 0x079c,
+ 0x4254, 0x1230, 0x1e78, 0x360c, 0x069c,
+ 0x4258, 0x1234, 0x1e7c, 0x3610, 0x06a0,
+ 0x4358, 0x1334, 0x1f7c, 0x3710, 0x07a0,
+ 0x4458, 0x1434, 0x207c, 0x3810, 0x08a0,
+ 0x445c, 0x1438, 0x2080, 0x3814, 0x08a4,
+ 0x435c, 0x1338, 0x1f80, 0x3714, 0x07a4,
+ 0x425c, 0x1238, 0x1e80, 0x3614, 0x06a4,
+ 0x4260, 0x123c, 0x1e84, 0x3618, 0x06a8,
+ 0x4360, 0x133c, 0x1f84, 0x3718, 0x07a8,
+ 0x4460, 0x143c, 0x2084, 0x3818, 0x08a8,
+ 0x4464, 0x1440, 0x2088, 0x381c, 0x08ac,
+ 0x4364, 0x1340, 0x1f88, 0x371c, 0x07ac,
+ 0x4264, 0x1240, 0x1e88, 0x361c, 0x06ac,
+ 0x4268, 0x1244, 0x1e8c, 0x3620, 0x06b0,
+ 0x4368, 0x1344, 0x1f8c, 0x3720, 0x07b0,
+ 0x4468, 0x1444, 0x208c, 0x3820, 0x08b0,
+ 0x0048, 0x1824, 0x246c, 0x3c00, 0x0c90,
+ 0x0148, 0x1924, 0x256c, 0x3d00, 0x0d90,
+ 0x0248, 0x1a24, 0x266c, 0x3e00, 0x0e90,
+ 0x024c, 0x1a28, 0x2670, 0x3e04, 0x0e94,
+ 0x014c, 0x1928, 0x2570, 0x3d04, 0x0d94,
+ 0x004c, 0x1828, 0x2470, 0x3c04, 0x0c94,
+ 0x0050, 0x182c, 0x2474, 0x3c08, 0x0c98,
+ 0x0150, 0x192c, 0x2574, 0x3d08, 0x0d98,
+ 0x0250, 0x1a2c, 0x2674, 0x3e08, 0x0e98,
+ 0x0254, 0x1a30, 0x2678, 0x3e0c, 0x0e9c,
+ 0x0154, 0x1930, 0x2578, 0x3d0c, 0x0d9c,
+ 0x0054, 0x1830, 0x2478, 0x3c0c, 0x0c9c,
+ 0x0058, 0x1834, 0x247c, 0x3c10, 0x0ca0,
+ 0x0158, 0x1934, 0x257c, 0x3d10, 0x0da0,
+ 0x0258, 0x1a34, 0x267c, 0x3e10, 0x0ea0,
+ 0x025c, 0x1a38, 0x2680, 0x3e14, 0x0ea4,
+ 0x015c, 0x1938, 0x2580, 0x3d14, 0x0da4,
+ 0x005c, 0x1838, 0x2480, 0x3c14, 0x0ca4,
+ 0x0060, 0x183c, 0x2484, 0x3c18, 0x0ca8,
+ 0x0160, 0x193c, 0x2584, 0x3d18, 0x0da8,
+ 0x0260, 0x1a3c, 0x2684, 0x3e18, 0x0ea8,
+ 0x0264, 0x1a40, 0x2688, 0x3e1c, 0x0eac,
+ 0x0164, 0x1940, 0x2588, 0x3d1c, 0x0dac,
+ 0x0064, 0x1840, 0x2488, 0x3c1c, 0x0cac,
+ 0x0068, 0x1844, 0x248c, 0x3c20, 0x0cb0,
+ 0x0168, 0x1944, 0x258c, 0x3d20, 0x0db0,
+ 0x0268, 0x1a44, 0x268c, 0x3e20, 0x0eb0,
+ 0x0648, 0x1e24, 0x2a6c, 0x4200, 0x1290,
+ 0x0748, 0x1f24, 0x2b6c, 0x4300, 0x1390,
+ 0x0848, 0x2024, 0x2c6c, 0x4400, 0x1490,
+ 0x084c, 0x2028, 0x2c70, 0x4404, 0x1494,
+ 0x074c, 0x1f28, 0x2b70, 0x4304, 0x1394,
+ 0x064c, 0x1e28, 0x2a70, 0x4204, 0x1294,
+ 0x0650, 0x1e2c, 0x2a74, 0x4208, 0x1298,
+ 0x0750, 0x1f2c, 0x2b74, 0x4308, 0x1398,
+ 0x0850, 0x202c, 0x2c74, 0x4408, 0x1498,
+ 0x0854, 0x2030, 0x2c78, 0x440c, 0x149c,
+ 0x0754, 0x1f30, 0x2b78, 0x430c, 0x139c,
+ 0x0654, 0x1e30, 0x2a78, 0x420c, 0x129c,
+ 0x0658, 0x1e34, 0x2a7c, 0x4210, 0x12a0,
+ 0x0758, 0x1f34, 0x2b7c, 0x4310, 0x13a0,
+ 0x0858, 0x2034, 0x2c7c, 0x4410, 0x14a0,
+ 0x085c, 0x2038, 0x2c80, 0x4414, 0x14a4,
+ 0x075c, 0x1f38, 0x2b80, 0x4314, 0x13a4,
+ 0x065c, 0x1e38, 0x2a80, 0x4214, 0x12a4,
+ 0x0660, 0x1e3c, 0x2a84, 0x4218, 0x12a8,
+ 0x0760, 0x1f3c, 0x2b84, 0x4318, 0x13a8,
+ 0x0860, 0x203c, 0x2c84, 0x4418, 0x14a8,
+ 0x0864, 0x2040, 0x2c88, 0x441c, 0x14ac,
+ 0x0764, 0x1f40, 0x2b88, 0x431c, 0x13ac,
+ 0x0664, 0x1e40, 0x2a88, 0x421c, 0x12ac,
+ 0x0668, 0x1e44, 0x2a8c, 0x4220, 0x12b0,
+ 0x0768, 0x1f44, 0x2b8c, 0x4320, 0x13b0,
+ 0x0868, 0x2044, 0x2c8c, 0x4420, 0x14b0,
+ 0x0f48, 0x2724, 0x336c, 0x0300, 0x1b90,
+ 0x1048, 0x2824, 0x346c, 0x0400, 0x1c90,
+ 0x1148, 0x2924, 0x356c, 0x0500, 0x1d90,
+ 0x114c, 0x2928, 0x3570, 0x0504, 0x1d94,
+ 0x104c, 0x2828, 0x3470, 0x0404, 0x1c94,
+ 0x0f4c, 0x2728, 0x3370, 0x0304, 0x1b94,
+ 0x0f50, 0x272c, 0x3374, 0x0308, 0x1b98,
+ 0x1050, 0x282c, 0x3474, 0x0408, 0x1c98,
+ 0x1150, 0x292c, 0x3574, 0x0508, 0x1d98,
+ 0x1154, 0x2930, 0x3578, 0x050c, 0x1d9c,
+ 0x1054, 0x2830, 0x3478, 0x040c, 0x1c9c,
+ 0x0f54, 0x2730, 0x3378, 0x030c, 0x1b9c,
+ 0x0f58, 0x2734, 0x337c, 0x0310, 0x1ba0,
+ 0x1058, 0x2834, 0x347c, 0x0410, 0x1ca0,
+ 0x1158, 0x2934, 0x357c, 0x0510, 0x1da0,
+ 0x115c, 0x2938, 0x3580, 0x0514, 0x1da4,
+ 0x105c, 0x2838, 0x3480, 0x0414, 0x1ca4,
+ 0x0f5c, 0x2738, 0x3380, 0x0314, 0x1ba4,
+ 0x0f60, 0x273c, 0x3384, 0x0318, 0x1ba8,
+ 0x1060, 0x283c, 0x3484, 0x0418, 0x1ca8,
+ 0x1160, 0x293c, 0x3584, 0x0518, 0x1da8,
+ 0x1164, 0x2940, 0x3588, 0x051c, 0x1dac,
+ 0x1064, 0x2840, 0x3488, 0x041c, 0x1cac,
+ 0x0f64, 0x2740, 0x3388, 0x031c, 0x1bac,
+ 0x0f68, 0x2744, 0x338c, 0x0320, 0x1bb0,
+ 0x1068, 0x2844, 0x348c, 0x0420, 0x1cb0,
+ 0x1168, 0x2944, 0x358c, 0x0520, 0x1db0,
+ 0x1548, 0x2d24, 0x396c, 0x0900, 0x2190,
+ 0x1648, 0x2e24, 0x3a6c, 0x0a00, 0x2290,
+ 0x1748, 0x2f24, 0x3b6c, 0x0b00, 0x2390,
+ 0x174c, 0x2f28, 0x3b70, 0x0b04, 0x2394,
+ 0x164c, 0x2e28, 0x3a70, 0x0a04, 0x2294,
+ 0x154c, 0x2d28, 0x3970, 0x0904, 0x2194,
+ 0x1550, 0x2d2c, 0x3974, 0x0908, 0x2198,
+ 0x1650, 0x2e2c, 0x3a74, 0x0a08, 0x2298,
+ 0x1750, 0x2f2c, 0x3b74, 0x0b08, 0x2398,
+ 0x1754, 0x2f30, 0x3b78, 0x0b0c, 0x239c,
+ 0x1654, 0x2e30, 0x3a78, 0x0a0c, 0x229c,
+ 0x1554, 0x2d30, 0x3978, 0x090c, 0x219c,
+ 0x1558, 0x2d34, 0x397c, 0x0910, 0x21a0,
+ 0x1658, 0x2e34, 0x3a7c, 0x0a10, 0x22a0,
+ 0x1758, 0x2f34, 0x3b7c, 0x0b10, 0x23a0,
+ 0x175c, 0x2f38, 0x3b80, 0x0b14, 0x23a4,
+ 0x165c, 0x2e38, 0x3a80, 0x0a14, 0x22a4,
+ 0x155c, 0x2d38, 0x3980, 0x0914, 0x21a4,
+ 0x1560, 0x2d3c, 0x3984, 0x0918, 0x21a8,
+ 0x1660, 0x2e3c, 0x3a84, 0x0a18, 0x22a8,
+ 0x1760, 0x2f3c, 0x3b84, 0x0b18, 0x23a8,
+ 0x1764, 0x2f40, 0x3b88, 0x0b1c, 0x23ac,
+ 0x1664, 0x2e40, 0x3a88, 0x0a1c, 0x22ac,
+ 0x1564, 0x2d40, 0x3988, 0x091c, 0x21ac,
+ 0x1568, 0x2d44, 0x398c, 0x0920, 0x21b0,
+ 0x1668, 0x2e44, 0x3a8c, 0x0a20, 0x22b0,
+ 0x1768, 0x2f44, 0x3b8c, 0x0b20, 0x23b0,
+ 0x1b48, 0x3324, 0x3f6c, 0x0f00, 0x2790,
+ 0x1c48, 0x3424, 0x406c, 0x1000, 0x2890,
+ 0x1d48, 0x3524, 0x416c, 0x1100, 0x2990,
+ 0x1d4c, 0x3528, 0x4170, 0x1104, 0x2994,
+ 0x1c4c, 0x3428, 0x4070, 0x1004, 0x2894,
+ 0x1b4c, 0x3328, 0x3f70, 0x0f04, 0x2794,
+ 0x1b50, 0x332c, 0x3f74, 0x0f08, 0x2798,
+ 0x1c50, 0x342c, 0x4074, 0x1008, 0x2898,
+ 0x1d50, 0x352c, 0x4174, 0x1108, 0x2998,
+ 0x1d54, 0x3530, 0x4178, 0x110c, 0x299c,
+ 0x1c54, 0x3430, 0x4078, 0x100c, 0x289c,
+ 0x1b54, 0x3330, 0x3f78, 0x0f0c, 0x279c,
+ 0x1b58, 0x3334, 0x3f7c, 0x0f10, 0x27a0,
+ 0x1c58, 0x3434, 0x407c, 0x1010, 0x28a0,
+ 0x1d58, 0x3534, 0x417c, 0x1110, 0x29a0,
+ 0x1d5c, 0x3538, 0x4180, 0x1114, 0x29a4,
+ 0x1c5c, 0x3438, 0x4080, 0x1014, 0x28a4,
+ 0x1b5c, 0x3338, 0x3f80, 0x0f14, 0x27a4,
+ 0x1b60, 0x333c, 0x3f84, 0x0f18, 0x27a8,
+ 0x1c60, 0x343c, 0x4084, 0x1018, 0x28a8,
+ 0x1d60, 0x353c, 0x4184, 0x1118, 0x29a8,
+ 0x1d64, 0x3540, 0x4188, 0x111c, 0x29ac,
+ 0x1c64, 0x3440, 0x4088, 0x101c, 0x28ac,
+ 0x1b64, 0x3340, 0x3f88, 0x0f1c, 0x27ac,
+ 0x1b68, 0x3344, 0x3f8c, 0x0f20, 0x27b0,
+ 0x1c68, 0x3444, 0x408c, 0x1020, 0x28b0,
+ 0x1d68, 0x3544, 0x418c, 0x1120, 0x29b0,
+ 0x2148, 0x3924, 0x456c, 0x1500, 0x2d90,
+ 0x2248, 0x3a24, 0x466c, 0x1600, 0x2e90,
+ 0x2348, 0x3b24, 0x476c, 0x1700, 0x2f90,
+ 0x234c, 0x3b28, 0x4770, 0x1704, 0x2f94,
+ 0x224c, 0x3a28, 0x4670, 0x1604, 0x2e94,
+ 0x214c, 0x3928, 0x4570, 0x1504, 0x2d94,
+ 0x2150, 0x392c, 0x4574, 0x1508, 0x2d98,
+ 0x2250, 0x3a2c, 0x4674, 0x1608, 0x2e98,
+ 0x2350, 0x3b2c, 0x4774, 0x1708, 0x2f98,
+ 0x2354, 0x3b30, 0x4778, 0x170c, 0x2f9c,
+ 0x2254, 0x3a30, 0x4678, 0x160c, 0x2e9c,
+ 0x2154, 0x3930, 0x4578, 0x150c, 0x2d9c,
+ 0x2158, 0x3934, 0x457c, 0x1510, 0x2da0,
+ 0x2258, 0x3a34, 0x467c, 0x1610, 0x2ea0,
+ 0x2358, 0x3b34, 0x477c, 0x1710, 0x2fa0,
+ 0x235c, 0x3b38, 0x4780, 0x1714, 0x2fa4,
+ 0x225c, 0x3a38, 0x4680, 0x1614, 0x2ea4,
+ 0x215c, 0x3938, 0x4580, 0x1514, 0x2da4,
+ 0x2160, 0x393c, 0x4584, 0x1518, 0x2da8,
+ 0x2260, 0x3a3c, 0x4684, 0x1618, 0x2ea8,
+ 0x2360, 0x3b3c, 0x4784, 0x1718, 0x2fa8,
+ 0x2364, 0x3b40, 0x4788, 0x171c, 0x2fac,
+ 0x2264, 0x3a40, 0x4688, 0x161c, 0x2eac,
+ 0x2164, 0x3940, 0x4588, 0x151c, 0x2dac,
+ 0x2168, 0x3944, 0x458c, 0x1520, 0x2db0,
+ 0x2268, 0x3a44, 0x468c, 0x1620, 0x2eb0,
+ 0x2368, 0x3b44, 0x478c, 0x1720, 0x2fb0,
+ 0x2748, 0x3f24, 0x036c, 0x1b00, 0x3390,
+ 0x2848, 0x4024, 0x046c, 0x1c00, 0x3490,
+ 0x2948, 0x4124, 0x056c, 0x1d00, 0x3590,
+ 0x294c, 0x4128, 0x0570, 0x1d04, 0x3594,
+ 0x284c, 0x4028, 0x0470, 0x1c04, 0x3494,
+ 0x274c, 0x3f28, 0x0370, 0x1b04, 0x3394,
+ 0x2750, 0x3f2c, 0x0374, 0x1b08, 0x3398,
+ 0x2850, 0x402c, 0x0474, 0x1c08, 0x3498,
+ 0x2950, 0x412c, 0x0574, 0x1d08, 0x3598,
+ 0x2954, 0x4130, 0x0578, 0x1d0c, 0x359c,
+ 0x2854, 0x4030, 0x0478, 0x1c0c, 0x349c,
+ 0x2754, 0x3f30, 0x0378, 0x1b0c, 0x339c,
+ 0x2758, 0x3f34, 0x037c, 0x1b10, 0x33a0,
+ 0x2858, 0x4034, 0x047c, 0x1c10, 0x34a0,
+ 0x2958, 0x4134, 0x057c, 0x1d10, 0x35a0,
+ 0x295c, 0x4138, 0x0580, 0x1d14, 0x35a4,
+ 0x285c, 0x4038, 0x0480, 0x1c14, 0x34a4,
+ 0x275c, 0x3f38, 0x0380, 0x1b14, 0x33a4,
+ 0x2760, 0x3f3c, 0x0384, 0x1b18, 0x33a8,
+ 0x2860, 0x403c, 0x0484, 0x1c18, 0x34a8,
+ 0x2960, 0x413c, 0x0584, 0x1d18, 0x35a8,
+ 0x2964, 0x4140, 0x0588, 0x1d1c, 0x35ac,
+ 0x2864, 0x4040, 0x0488, 0x1c1c, 0x34ac,
+ 0x2764, 0x3f40, 0x0388, 0x1b1c, 0x33ac,
+ 0x2768, 0x3f44, 0x038c, 0x1b20, 0x33b0,
+ 0x2868, 0x4044, 0x048c, 0x1c20, 0x34b0,
+ 0x2968, 0x4144, 0x058c, 0x1d20, 0x35b0,
+ 0x2d48, 0x4524, 0x096c, 0x2100, 0x3990,
+ 0x2e48, 0x4624, 0x0a6c, 0x2200, 0x3a90,
+ 0x2f48, 0x4724, 0x0b6c, 0x2300, 0x3b90,
+ 0x2f4c, 0x4728, 0x0b70, 0x2304, 0x3b94,
+ 0x2e4c, 0x4628, 0x0a70, 0x2204, 0x3a94,
+ 0x2d4c, 0x4528, 0x0970, 0x2104, 0x3994,
+ 0x2d50, 0x452c, 0x0974, 0x2108, 0x3998,
+ 0x2e50, 0x462c, 0x0a74, 0x2208, 0x3a98,
+ 0x2f50, 0x472c, 0x0b74, 0x2308, 0x3b98,
+ 0x2f54, 0x4730, 0x0b78, 0x230c, 0x3b9c,
+ 0x2e54, 0x4630, 0x0a78, 0x220c, 0x3a9c,
+ 0x2d54, 0x4530, 0x0978, 0x210c, 0x399c,
+ 0x2d58, 0x4534, 0x097c, 0x2110, 0x39a0,
+ 0x2e58, 0x4634, 0x0a7c, 0x2210, 0x3aa0,
+ 0x2f58, 0x4734, 0x0b7c, 0x2310, 0x3ba0,
+ 0x2f5c, 0x4738, 0x0b80, 0x2314, 0x3ba4,
+ 0x2e5c, 0x4638, 0x0a80, 0x2214, 0x3aa4,
+ 0x2d5c, 0x4538, 0x0980, 0x2114, 0x39a4,
+ 0x2d60, 0x453c, 0x0984, 0x2118, 0x39a8,
+ 0x2e60, 0x463c, 0x0a84, 0x2218, 0x3aa8,
+ 0x2f60, 0x473c, 0x0b84, 0x2318, 0x3ba8,
+ 0x2f64, 0x4740, 0x0b88, 0x231c, 0x3bac,
+ 0x2e64, 0x4640, 0x0a88, 0x221c, 0x3aac,
+ 0x2d64, 0x4540, 0x0988, 0x211c, 0x39ac,
+ 0x2d68, 0x4544, 0x098c, 0x2120, 0x39b0,
+ 0x2e68, 0x4644, 0x0a8c, 0x2220, 0x3ab0,
+ 0x2f68, 0x4744, 0x0b8c, 0x2320, 0x3bb0,
+ 0x3348, 0x0324, 0x0f6c, 0x2700, 0x3f90,
+ 0x3448, 0x0424, 0x106c, 0x2800, 0x4090,
+ 0x3548, 0x0524, 0x116c, 0x2900, 0x4190,
+ 0x354c, 0x0528, 0x1170, 0x2904, 0x4194,
+ 0x344c, 0x0428, 0x1070, 0x2804, 0x4094,
+ 0x334c, 0x0328, 0x0f70, 0x2704, 0x3f94,
+ 0x3350, 0x032c, 0x0f74, 0x2708, 0x3f98,
+ 0x3450, 0x042c, 0x1074, 0x2808, 0x4098,
+ 0x3550, 0x052c, 0x1174, 0x2908, 0x4198,
+ 0x3554, 0x0530, 0x1178, 0x290c, 0x419c,
+ 0x3454, 0x0430, 0x1078, 0x280c, 0x409c,
+ 0x3354, 0x0330, 0x0f78, 0x270c, 0x3f9c,
+ 0x3358, 0x0334, 0x0f7c, 0x2710, 0x3fa0,
+ 0x3458, 0x0434, 0x107c, 0x2810, 0x40a0,
+ 0x3558, 0x0534, 0x117c, 0x2910, 0x41a0,
+ 0x355c, 0x0538, 0x1180, 0x2914, 0x41a4,
+ 0x345c, 0x0438, 0x1080, 0x2814, 0x40a4,
+ 0x335c, 0x0338, 0x0f80, 0x2714, 0x3fa4,
+ 0x3360, 0x033c, 0x0f84, 0x2718, 0x3fa8,
+ 0x3460, 0x043c, 0x1084, 0x2818, 0x40a8,
+ 0x3560, 0x053c, 0x1184, 0x2918, 0x41a8,
+ 0x3564, 0x0540, 0x1188, 0x291c, 0x41ac,
+ 0x3464, 0x0440, 0x1088, 0x281c, 0x40ac,
+ 0x3364, 0x0340, 0x0f88, 0x271c, 0x3fac,
+ 0x3368, 0x0344, 0x0f8c, 0x2720, 0x3fb0,
+ 0x3468, 0x0444, 0x108c, 0x2820, 0x40b0,
+ 0x3568, 0x0544, 0x118c, 0x2920, 0x41b0,
+ 0x3948, 0x0924, 0x156c, 0x2d00, 0x4590,
+ 0x3a48, 0x0a24, 0x166c, 0x2e00, 0x4690,
+ 0x3b48, 0x0b24, 0x176c, 0x2f00, 0x4790,
+ 0x3b4c, 0x0b28, 0x1770, 0x2f04, 0x4794,
+ 0x3a4c, 0x0a28, 0x1670, 0x2e04, 0x4694,
+ 0x394c, 0x0928, 0x1570, 0x2d04, 0x4594,
+ 0x3950, 0x092c, 0x1574, 0x2d08, 0x4598,
+ 0x3a50, 0x0a2c, 0x1674, 0x2e08, 0x4698,
+ 0x3b50, 0x0b2c, 0x1774, 0x2f08, 0x4798,
+ 0x3b54, 0x0b30, 0x1778, 0x2f0c, 0x479c,
+ 0x3a54, 0x0a30, 0x1678, 0x2e0c, 0x469c,
+ 0x3954, 0x0930, 0x1578, 0x2d0c, 0x459c,
+ 0x3958, 0x0934, 0x157c, 0x2d10, 0x45a0,
+ 0x3a58, 0x0a34, 0x167c, 0x2e10, 0x46a0,
+ 0x3b58, 0x0b34, 0x177c, 0x2f10, 0x47a0,
+ 0x3b5c, 0x0b38, 0x1780, 0x2f14, 0x47a4,
+ 0x3a5c, 0x0a38, 0x1680, 0x2e14, 0x46a4,
+ 0x395c, 0x0938, 0x1580, 0x2d14, 0x45a4,
+ 0x3960, 0x093c, 0x1584, 0x2d18, 0x45a8,
+ 0x3a60, 0x0a3c, 0x1684, 0x2e18, 0x46a8,
+ 0x3b60, 0x0b3c, 0x1784, 0x2f18, 0x47a8,
+ 0x3b64, 0x0b40, 0x1788, 0x2f1c, 0x47ac,
+ 0x3a64, 0x0a40, 0x1688, 0x2e1c, 0x46ac,
+ 0x3964, 0x0940, 0x1588, 0x2d1c, 0x45ac,
+ 0x3968, 0x0944, 0x158c, 0x2d20, 0x45b0,
+ 0x3a68, 0x0a44, 0x168c, 0x2e20, 0x46b0,
+ 0x3b68, 0x0b44, 0x178c, 0x2f20, 0x47b0,
+ 0x3f48, 0x0f24, 0x1b6c, 0x3300, 0x0390,
+ 0x4048, 0x1024, 0x1c6c, 0x3400, 0x0490,
+ 0x4148, 0x1124, 0x1d6c, 0x3500, 0x0590,
+ 0x414c, 0x1128, 0x1d70, 0x3504, 0x0594,
+ 0x404c, 0x1028, 0x1c70, 0x3404, 0x0494,
+ 0x3f4c, 0x0f28, 0x1b70, 0x3304, 0x0394,
+ 0x3f50, 0x0f2c, 0x1b74, 0x3308, 0x0398,
+ 0x4050, 0x102c, 0x1c74, 0x3408, 0x0498,
+ 0x4150, 0x112c, 0x1d74, 0x3508, 0x0598,
+ 0x4154, 0x1130, 0x1d78, 0x350c, 0x059c,
+ 0x4054, 0x1030, 0x1c78, 0x340c, 0x049c,
+ 0x3f54, 0x0f30, 0x1b78, 0x330c, 0x039c,
+ 0x3f58, 0x0f34, 0x1b7c, 0x3310, 0x03a0,
+ 0x4058, 0x1034, 0x1c7c, 0x3410, 0x04a0,
+ 0x4158, 0x1134, 0x1d7c, 0x3510, 0x05a0,
+ 0x415c, 0x1138, 0x1d80, 0x3514, 0x05a4,
+ 0x405c, 0x1038, 0x1c80, 0x3414, 0x04a4,
+ 0x3f5c, 0x0f38, 0x1b80, 0x3314, 0x03a4,
+ 0x3f60, 0x0f3c, 0x1b84, 0x3318, 0x03a8,
+ 0x4060, 0x103c, 0x1c84, 0x3418, 0x04a8,
+ 0x4160, 0x113c, 0x1d84, 0x3518, 0x05a8,
+ 0x4164, 0x1140, 0x1d88, 0x351c, 0x05ac,
+ 0x4064, 0x1040, 0x1c88, 0x341c, 0x04ac,
+ 0x3f64, 0x0f40, 0x1b88, 0x331c, 0x03ac,
+ 0x3f68, 0x0f44, 0x1b8c, 0x3320, 0x03b0,
+ 0x4068, 0x1044, 0x1c8c, 0x3420, 0x04b0,
+ 0x4168, 0x1144, 0x1d8c, 0x3520, 0x05b0,
+ 0x4548, 0x1524, 0x216c, 0x3900, 0x0990,
+ 0x4648, 0x1624, 0x226c, 0x3a00, 0x0a90,
+ 0x4748, 0x1724, 0x236c, 0x3b00, 0x0b90,
+ 0x474c, 0x1728, 0x2370, 0x3b04, 0x0b94,
+ 0x464c, 0x1628, 0x2270, 0x3a04, 0x0a94,
+ 0x454c, 0x1528, 0x2170, 0x3904, 0x0994,
+ 0x4550, 0x152c, 0x2174, 0x3908, 0x0998,
+ 0x4650, 0x162c, 0x2274, 0x3a08, 0x0a98,
+ 0x4750, 0x172c, 0x2374, 0x3b08, 0x0b98,
+ 0x4754, 0x1730, 0x2378, 0x3b0c, 0x0b9c,
+ 0x4654, 0x1630, 0x2278, 0x3a0c, 0x0a9c,
+ 0x4554, 0x1530, 0x2178, 0x390c, 0x099c,
+ 0x4558, 0x1534, 0x217c, 0x3910, 0x09a0,
+ 0x4658, 0x1634, 0x227c, 0x3a10, 0x0aa0,
+ 0x4758, 0x1734, 0x237c, 0x3b10, 0x0ba0,
+ 0x475c, 0x1738, 0x2380, 0x3b14, 0x0ba4,
+ 0x465c, 0x1638, 0x2280, 0x3a14, 0x0aa4,
+ 0x455c, 0x1538, 0x2180, 0x3914, 0x09a4,
+ 0x4560, 0x153c, 0x2184, 0x3918, 0x09a8,
+ 0x4660, 0x163c, 0x2284, 0x3a18, 0x0aa8,
+ 0x4760, 0x173c, 0x2384, 0x3b18, 0x0ba8,
+ 0x4764, 0x1740, 0x2388, 0x3b1c, 0x0bac,
+ 0x4664, 0x1640, 0x2288, 0x3a1c, 0x0aac,
+ 0x4564, 0x1540, 0x2188, 0x391c, 0x09ac,
+ 0x4568, 0x1544, 0x218c, 0x3920, 0x09b0,
+ 0x4668, 0x1644, 0x228c, 0x3a20, 0x0ab0,
+ 0x4768, 0x1744, 0x238c, 0x3b20, 0x0bb0,
+ 0x0348, 0x1b24, 0x276c, 0x3f00, 0x0f90,
+ 0x0448, 0x1c24, 0x286c, 0x4000, 0x1090,
+ 0x0548, 0x1d24, 0x296c, 0x4100, 0x1190,
+ 0x054c, 0x1d28, 0x2970, 0x4104, 0x1194,
+ 0x044c, 0x1c28, 0x2870, 0x4004, 0x1094,
+ 0x034c, 0x1b28, 0x2770, 0x3f04, 0x0f94,
+ 0x0350, 0x1b2c, 0x2774, 0x3f08, 0x0f98,
+ 0x0450, 0x1c2c, 0x2874, 0x4008, 0x1098,
+ 0x0550, 0x1d2c, 0x2974, 0x4108, 0x1198,
+ 0x0554, 0x1d30, 0x2978, 0x410c, 0x119c,
+ 0x0454, 0x1c30, 0x2878, 0x400c, 0x109c,
+ 0x0354, 0x1b30, 0x2778, 0x3f0c, 0x0f9c,
+ 0x0358, 0x1b34, 0x277c, 0x3f10, 0x0fa0,
+ 0x0458, 0x1c34, 0x287c, 0x4010, 0x10a0,
+ 0x0558, 0x1d34, 0x297c, 0x4110, 0x11a0,
+ 0x055c, 0x1d38, 0x2980, 0x4114, 0x11a4,
+ 0x045c, 0x1c38, 0x2880, 0x4014, 0x10a4,
+ 0x035c, 0x1b38, 0x2780, 0x3f14, 0x0fa4,
+ 0x0360, 0x1b3c, 0x2784, 0x3f18, 0x0fa8,
+ 0x0460, 0x1c3c, 0x2884, 0x4018, 0x10a8,
+ 0x0560, 0x1d3c, 0x2984, 0x4118, 0x11a8,
+ 0x0564, 0x1d40, 0x2988, 0x411c, 0x11ac,
+ 0x0464, 0x1c40, 0x2888, 0x401c, 0x10ac,
+ 0x0364, 0x1b40, 0x2788, 0x3f1c, 0x0fac,
+ 0x0368, 0x1b44, 0x278c, 0x3f20, 0x0fb0,
+ 0x0468, 0x1c44, 0x288c, 0x4020, 0x10b0,
+ 0x0568, 0x1d44, 0x298c, 0x4120, 0x11b0,
+ 0x0948, 0x2124, 0x2d6c, 0x4500, 0x1590,
+ 0x0a48, 0x2224, 0x2e6c, 0x4600, 0x1690,
+ 0x0b48, 0x2324, 0x2f6c, 0x4700, 0x1790,
+ 0x0b4c, 0x2328, 0x2f70, 0x4704, 0x1794,
+ 0x0a4c, 0x2228, 0x2e70, 0x4604, 0x1694,
+ 0x094c, 0x2128, 0x2d70, 0x4504, 0x1594,
+ 0x0950, 0x212c, 0x2d74, 0x4508, 0x1598,
+ 0x0a50, 0x222c, 0x2e74, 0x4608, 0x1698,
+ 0x0b50, 0x232c, 0x2f74, 0x4708, 0x1798,
+ 0x0b54, 0x2330, 0x2f78, 0x470c, 0x179c,
+ 0x0a54, 0x2230, 0x2e78, 0x460c, 0x169c,
+ 0x0954, 0x2130, 0x2d78, 0x450c, 0x159c,
+ 0x0958, 0x2134, 0x2d7c, 0x4510, 0x15a0,
+ 0x0a58, 0x2234, 0x2e7c, 0x4610, 0x16a0,
+ 0x0b58, 0x2334, 0x2f7c, 0x4710, 0x17a0,
+ 0x0b5c, 0x2338, 0x2f80, 0x4714, 0x17a4,
+ 0x0a5c, 0x2238, 0x2e80, 0x4614, 0x16a4,
+ 0x095c, 0x2138, 0x2d80, 0x4514, 0x15a4,
+ 0x0960, 0x213c, 0x2d84, 0x4518, 0x15a8,
+ 0x0a60, 0x223c, 0x2e84, 0x4618, 0x16a8,
+ 0x0b60, 0x233c, 0x2f84, 0x4718, 0x17a8,
+ 0x0b64, 0x2340, 0x2f88, 0x471c, 0x17ac,
+ 0x0a64, 0x2240, 0x2e88, 0x461c, 0x16ac,
+ 0x0964, 0x2140, 0x2d88, 0x451c, 0x15ac,
+ 0x0968, 0x2144, 0x2d8c, 0x4520, 0x15b0,
+ 0x0a68, 0x2244, 0x2e8c, 0x4620, 0x16b0,
+ 0x0b68, 0x2344, 0x2f8c, 0x4720, 0x17b0,
 };
 
-static const uint16_t dv_place_1080i60[4*10*27*5] = {
- 0x2048, 0x5024, 0x686c, 0x0800, 0x3890,
- 0x3848, 0x6824, 0x086c, 0x2000, 0x5090,
- 0x5048, 0x0824, 0x206c, 0x3800, 0x6890,
- 0x6848, 0x2024, 0x386c, 0x5000, 0x0890,
- 0x0848, 0x3824, 0x506c, 0x6800, 0x2090,
- 0x204a, 0x5026, 0x686e, 0x0802, 0x3892,
- 0x384a, 0x6826, 0x086e, 0x2002, 0x5092,
- 0x504a, 0x0826, 0x206e, 0x3802, 0x6892,
- 0x684a, 0x2026, 0x386e, 0x5002, 0x0892,
- 0x084a, 0x3826, 0x506e, 0x6802, 0x2092,
- 0x204c, 0x5028, 0x6870, 0x0804, 0x3894,
- 0x384c, 0x6828, 0x0870, 0x2004, 0x5094,
- 0x504c, 0x0828, 0x2070, 0x3804, 0x6894,
- 0x684c, 0x2028, 0x3870, 0x5004, 0x0894,
- 0x084c, 0x3828, 0x5070, 0x6804, 0x2094,
- 0x204e, 0x502a, 0x6872, 0x0806, 0x3896,
- 0x384e, 0x682a, 0x0872, 0x2006, 0x5096,
- 0x504e, 0x082a, 0x2072, 0x3806, 0x6896,
- 0x684e, 0x202a, 0x3872, 0x5006, 0x0896,
- 0x084e, 0x382a, 0x5072, 0x6806, 0x2096,
- 0x2050, 0x502c, 0x6874, 0x0808, 0x3898,
- 0x3850, 0x682c, 0x0874, 0x2008, 0x5098,
- 0x5050, 0x082c, 0x2074, 0x3808, 0x6898,
- 0x6850, 0x202c, 0x3874, 0x5008, 0x0898,
- 0x0850, 0x382c, 0x5074, 0x6808, 0x2098,
- 0x2052, 0x502e, 0x6876, 0x080a, 0x389a,
- 0x3852, 0x682e, 0x0876, 0x200a, 0x509a,
- 0x5052, 0x082e, 0x2076, 0x380a, 0x689a,
- 0x6852, 0x202e, 0x3876, 0x500a, 0x089a,
- 0x0852, 0x382e, 0x5076, 0x680a, 0x209a,
- 0x2054, 0x5030, 0x6878, 0x080c, 0x389c,
- 0x3854, 0x6830, 0x0878, 0x200c, 0x509c,
- 0x5054, 0x0830, 0x2078, 0x380c, 0x689c,
- 0x6854, 0x2030, 0x3878, 0x500c, 0x089c,
- 0x0854, 0x3830, 0x5078, 0x680c, 0x209c,
- 0x2056, 0x5032, 0x687a, 0x080e, 0x389e,
- 0x3856, 0x6832, 0x087a, 0x200e, 0x509e,
- 0x5056, 0x0832, 0x207a, 0x380e, 0x689e,
- 0x6856, 0x2032, 0x387a, 0x500e, 0x089e,
- 0x0856, 0x3832, 0x507a, 0x680e, 0x209e,
- 0x2058, 0x5034, 0x687c, 0x0810, 0x0078,
- 0x3858, 0x6834, 0x087c, 0x2010, 0x8214,
- 0x5058, 0x0834, 0x207c, 0x3810, 0x8264,
- 0x6858, 0x2034, 0x387c, 0x5010, 0x0000,
- 0x0858, 0x3834, 0x507c, 0x6810, 0x003c,
- 0x2448, 0x5424, 0x6c6c, 0x0c00, 0x3c90,
- 0x3c48, 0x6c24, 0x0c6c, 0x2400, 0x5490,
- 0x5448, 0x0c24, 0x246c, 0x3c00, 0x6c90,
- 0x6c48, 0x2424, 0x3c6c, 0x5400, 0x0c90,
- 0x0c48, 0x3c24, 0x546c, 0x6c00, 0x2490,
- 0x244a, 0x5426, 0x6c6e, 0x0c02, 0x3c92,
- 0x3c4a, 0x6c26, 0x0c6e, 0x2402, 0x5492,
- 0x544a, 0x0c26, 0x246e, 0x3c02, 0x6c92,
- 0x6c4a, 0x2426, 0x3c6e, 0x5402, 0x0c92,
- 0x0c4a, 0x3c26, 0x546e, 0x6c02, 0x2492,
- 0x244c, 0x5428, 0x6c70, 0x0c04, 0x3c94,
- 0x3c4c, 0x6c28, 0x0c70, 0x2404, 0x5494,
- 0x544c, 0x0c28, 0x2470, 0x3c04, 0x6c94,
- 0x6c4c, 0x2428, 0x3c70, 0x5404, 0x0c94,
- 0x0c4c, 0x3c28, 0x5470, 0x6c04, 0x2494,
- 0x244e, 0x542a, 0x6c72, 0x0c06, 0x3c96,
- 0x3c4e, 0x6c2a, 0x0c72, 0x2406, 0x5496,
- 0x544e, 0x0c2a, 0x2472, 0x3c06, 0x6c96,
- 0x6c4e, 0x242a, 0x3c72, 0x5406, 0x0c96,
- 0x0c4e, 0x3c2a, 0x5472, 0x6c06, 0x2496,
- 0x2450, 0x542c, 0x6c74, 0x0c08, 0x3c98,
- 0x3c50, 0x6c2c, 0x0c74, 0x2408, 0x5498,
- 0x5450, 0x0c2c, 0x2474, 0x3c08, 0x6c98,
- 0x6c50, 0x242c, 0x3c74, 0x5408, 0x0c98,
- 0x0c50, 0x3c2c, 0x5474, 0x6c08, 0x2498,
- 0x2452, 0x542e, 0x6c76, 0x0c0a, 0x3c9a,
- 0x3c52, 0x6c2e, 0x0c76, 0x240a, 0x549a,
- 0x5452, 0x0c2e, 0x2476, 0x3c0a, 0x6c9a,
- 0x6c52, 0x242e, 0x3c76, 0x540a, 0x0c9a,
- 0x0c52, 0x3c2e, 0x5476, 0x6c0a, 0x249a,
- 0x2454, 0x5430, 0x6c78, 0x0c0c, 0x3c9c,
- 0x3c54, 0x6c30, 0x0c78, 0x240c, 0x549c,
- 0x5454, 0x0c30, 0x2478, 0x3c0c, 0x6c9c,
- 0x6c54, 0x2430, 0x3c78, 0x540c, 0x0c9c,
- 0x0c54, 0x3c30, 0x5478, 0x6c0c, 0x249c,
- 0x2456, 0x5432, 0x6c7a, 0x0c0e, 0x3c9e,
- 0x3c56, 0x6c32, 0x0c7a, 0x240e, 0x549e,
- 0x5456, 0x0c32, 0x247a, 0x3c0e, 0x6c9e,
- 0x6c56, 0x2432, 0x3c7a, 0x540e, 0x0c9e,
- 0x0c56, 0x3c32, 0x547a, 0x6c0e, 0x249e,
- 0x2458, 0x5434, 0x6c7c, 0x0c10, 0x0478,
- 0x3c58, 0x6c34, 0x0c7c, 0x2410, 0x8028,
- 0x5458, 0x0c34, 0x247c, 0x3c10, 0x8078,
- 0x6c58, 0x2434, 0x3c7c, 0x5410, 0x0400,
- 0x0c58, 0x3c34, 0x547c, 0x6c10, 0x043c,
- 0x2848, 0x5824, 0x706c, 0x1000, 0x4090,
- 0x4048, 0x7024, 0x106c, 0x2800, 0x5890,
- 0x5848, 0x1024, 0x286c, 0x4000, 0x7090,
- 0x7048, 0x2824, 0x406c, 0x5800, 0x1090,
- 0x1048, 0x4024, 0x586c, 0x7000, 0x2890,
- 0x284a, 0x5826, 0x706e, 0x1002, 0x4092,
- 0x404a, 0x7026, 0x106e, 0x2802, 0x5892,
- 0x584a, 0x1026, 0x286e, 0x4002, 0x7092,
- 0x704a, 0x2826, 0x406e, 0x5802, 0x1092,
- 0x104a, 0x4026, 0x586e, 0x7002, 0x2892,
- 0x284c, 0x5828, 0x7070, 0x1004, 0x4094,
- 0x404c, 0x7028, 0x1070, 0x2804, 0x5894,
- 0x584c, 0x1028, 0x2870, 0x4004, 0x7094,
- 0x704c, 0x2828, 0x4070, 0x5804, 0x1094,
- 0x104c, 0x4028, 0x5870, 0x7004, 0x2894,
- 0x284e, 0x582a, 0x7072, 0x1006, 0x4096,
- 0x404e, 0x702a, 0x1072, 0x2806, 0x5896,
- 0x584e, 0x102a, 0x2872, 0x4006, 0x7096,
- 0x704e, 0x282a, 0x4072, 0x5806, 0x1096,
- 0x104e, 0x402a, 0x5872, 0x7006, 0x2896,
- 0x2850, 0x582c, 0x7074, 0x1008, 0x4098,
- 0x4050, 0x702c, 0x1074, 0x2808, 0x5898,
- 0x5850, 0x102c, 0x2874, 0x4008, 0x7098,
- 0x7050, 0x282c, 0x4074, 0x5808, 0x1098,
- 0x1050, 0x402c, 0x5874, 0x7008, 0x2898,
- 0x2852, 0x582e, 0x7076, 0x100a, 0x409a,
- 0x4052, 0x702e, 0x1076, 0x280a, 0x589a,
- 0x5852, 0x102e, 0x2876, 0x400a, 0x709a,
- 0x7052, 0x282e, 0x4076, 0x580a, 0x109a,
- 0x1052, 0x402e, 0x5876, 0x700a, 0x289a,
- 0x2854, 0x5830, 0x7078, 0x100c, 0x409c,
- 0x4054, 0x7030, 0x1078, 0x280c, 0x589c,
- 0x5854, 0x1030, 0x2878, 0x400c, 0x709c,
- 0x7054, 0x2830, 0x4078, 0x580c, 0x109c,
- 0x1054, 0x4030, 0x5878, 0x700c, 0x289c,
- 0x2856, 0x5832, 0x707a, 0x100e, 0x409e,
- 0x4056, 0x7032, 0x107a, 0x280e, 0x589e,
- 0x5856, 0x1032, 0x287a, 0x400e, 0x709e,
- 0x7056, 0x2832, 0x407a, 0x580e, 0x109e,
- 0x1056, 0x4032, 0x587a, 0x700e, 0x289e,
- 0x2858, 0x5834, 0x707c, 0x1010, 0x008c,
- 0x4058, 0x7034, 0x107c, 0x2810, 0x8428,
- 0x5858, 0x1034, 0x287c, 0x4010, 0x8478,
- 0x7058, 0x2834, 0x407c, 0x5810, 0x0014,
- 0x1058, 0x4034, 0x587c, 0x7010, 0x0050,
- 0x2c48, 0x5c24, 0x746c, 0x1400, 0x4490,
- 0x4448, 0x7424, 0x146c, 0x2c00, 0x5c90,
- 0x5c48, 0x1424, 0x2c6c, 0x4400, 0x7490,
- 0x7448, 0x2c24, 0x446c, 0x5c00, 0x1490,
- 0x1448, 0x4424, 0x5c6c, 0x7400, 0x2c90,
- 0x2c4a, 0x5c26, 0x746e, 0x1402, 0x4492,
- 0x444a, 0x7426, 0x146e, 0x2c02, 0x5c92,
- 0x5c4a, 0x1426, 0x2c6e, 0x4402, 0x7492,
- 0x744a, 0x2c26, 0x446e, 0x5c02, 0x1492,
- 0x144a, 0x4426, 0x5c6e, 0x7402, 0x2c92,
- 0x2c4c, 0x5c28, 0x7470, 0x1404, 0x4494,
- 0x444c, 0x7428, 0x1470, 0x2c04, 0x5c94,
- 0x5c4c, 0x1428, 0x2c70, 0x4404, 0x7494,
- 0x744c, 0x2c28, 0x4470, 0x5c04, 0x1494,
- 0x144c, 0x4428, 0x5c70, 0x7404, 0x2c94,
- 0x2c4e, 0x5c2a, 0x7472, 0x1406, 0x4496,
- 0x444e, 0x742a, 0x1472, 0x2c06, 0x5c96,
- 0x5c4e, 0x142a, 0x2c72, 0x4406, 0x7496,
- 0x744e, 0x2c2a, 0x4472, 0x5c06, 0x1496,
- 0x144e, 0x442a, 0x5c72, 0x7406, 0x2c96,
- 0x2c50, 0x5c2c, 0x7474, 0x1408, 0x4498,
- 0x4450, 0x742c, 0x1474, 0x2c08, 0x5c98,
- 0x5c50, 0x142c, 0x2c74, 0x4408, 0x7498,
- 0x7450, 0x2c2c, 0x4474, 0x5c08, 0x1498,
- 0x1450, 0x442c, 0x5c74, 0x7408, 0x2c98,
- 0x2c52, 0x5c2e, 0x7476, 0x140a, 0x449a,
- 0x4452, 0x742e, 0x1476, 0x2c0a, 0x5c9a,
- 0x5c52, 0x142e, 0x2c76, 0x440a, 0x749a,
- 0x7452, 0x2c2e, 0x4476, 0x5c0a, 0x149a,
- 0x1452, 0x442e, 0x5c76, 0x740a, 0x2c9a,
- 0x2c54, 0x5c30, 0x7478, 0x140c, 0x449c,
- 0x4454, 0x7430, 0x1478, 0x2c0c, 0x5c9c,
- 0x5c54, 0x1430, 0x2c78, 0x440c, 0x749c,
- 0x7454, 0x2c30, 0x4478, 0x5c0c, 0x149c,
- 0x1454, 0x4430, 0x5c78, 0x740c, 0x2c9c,
- 0x2c56, 0x5c32, 0x747a, 0x140e, 0x449e,
- 0x4456, 0x7432, 0x147a, 0x2c0e, 0x5c9e,
- 0x5c56, 0x1432, 0x2c7a, 0x440e, 0x749e,
- 0x7456, 0x2c32, 0x447a, 0x5c0e, 0x149e,
- 0x1456, 0x4432, 0x5c7a, 0x740e, 0x2c9e,
- 0x2c58, 0x5c34, 0x747c, 0x1410, 0x048c,
- 0x4458, 0x7434, 0x147c, 0x2c10, 0x823c,
- 0x5c58, 0x1434, 0x2c7c, 0x4410, 0x828c,
- 0x7458, 0x2c34, 0x447c, 0x5c10, 0x0414,
- 0x1458, 0x4434, 0x5c7c, 0x7410, 0x0450,
- 0x3048, 0x6024, 0x786c, 0x1800, 0x4890,
- 0x4848, 0x7824, 0x186c, 0x3000, 0x6090,
- 0x6048, 0x1824, 0x306c, 0x4800, 0x7890,
- 0x7848, 0x3024, 0x486c, 0x6000, 0x1890,
- 0x1848, 0x4824, 0x606c, 0x7800, 0x3090,
- 0x304a, 0x6026, 0x786e, 0x1802, 0x4892,
- 0x484a, 0x7826, 0x186e, 0x3002, 0x6092,
- 0x604a, 0x1826, 0x306e, 0x4802, 0x7892,
- 0x784a, 0x3026, 0x486e, 0x6002, 0x1892,
- 0x184a, 0x4826, 0x606e, 0x7802, 0x3092,
- 0x304c, 0x6028, 0x7870, 0x1804, 0x4894,
- 0x484c, 0x7828, 0x1870, 0x3004, 0x6094,
- 0x604c, 0x1828, 0x3070, 0x4804, 0x7894,
- 0x784c, 0x3028, 0x4870, 0x6004, 0x1894,
- 0x184c, 0x4828, 0x6070, 0x7804, 0x3094,
- 0x304e, 0x602a, 0x7872, 0x1806, 0x4896,
- 0x484e, 0x782a, 0x1872, 0x3006, 0x6096,
- 0x604e, 0x182a, 0x3072, 0x4806, 0x7896,
- 0x784e, 0x302a, 0x4872, 0x6006, 0x1896,
- 0x184e, 0x482a, 0x6072, 0x7806, 0x3096,
- 0x3050, 0x602c, 0x7874, 0x1808, 0x4898,
- 0x4850, 0x782c, 0x1874, 0x3008, 0x6098,
- 0x6050, 0x182c, 0x3074, 0x4808, 0x7898,
- 0x7850, 0x302c, 0x4874, 0x6008, 0x1898,
- 0x1850, 0x482c, 0x6074, 0x7808, 0x3098,
- 0x3052, 0x602e, 0x7876, 0x180a, 0x489a,
- 0x4852, 0x782e, 0x1876, 0x300a, 0x609a,
- 0x6052, 0x182e, 0x3076, 0x480a, 0x789a,
- 0x7852, 0x302e, 0x4876, 0x600a, 0x189a,
- 0x1852, 0x482e, 0x6076, 0x780a, 0x309a,
- 0x3054, 0x6030, 0x7878, 0x180c, 0x489c,
- 0x4854, 0x7830, 0x1878, 0x300c, 0x609c,
- 0x6054, 0x1830, 0x3078, 0x480c, 0x789c,
- 0x7854, 0x3030, 0x4878, 0x600c, 0x189c,
- 0x1854, 0x4830, 0x6078, 0x780c, 0x309c,
- 0x3056, 0x6032, 0x787a, 0x180e, 0x489e,
- 0x4856, 0x7832, 0x187a, 0x300e, 0x609e,
- 0x6056, 0x1832, 0x307a, 0x480e, 0x789e,
- 0x7856, 0x3032, 0x487a, 0x600e, 0x189e,
- 0x1856, 0x4832, 0x607a, 0x780e, 0x309e,
- 0x3058, 0x6034, 0x787c, 0x1810, 0x8000,
- 0x4858, 0x7834, 0x187c, 0x3010, 0x8050,
- 0x6058, 0x1834, 0x307c, 0x4810, 0x8600,
- 0x7858, 0x3034, 0x487c, 0x6010, 0x0028,
- 0x1858, 0x4834, 0x607c, 0x7810, 0x0064,
- 0x3448, 0x6424, 0x7c6c, 0x1c00, 0x4c90,
- 0x4c48, 0x7c24, 0x1c6c, 0x3400, 0x6490,
- 0x6448, 0x1c24, 0x346c, 0x4c00, 0x7c90,
- 0x7c48, 0x3424, 0x4c6c, 0x6400, 0x1c90,
- 0x1c48, 0x4c24, 0x646c, 0x7c00, 0x3490,
- 0x344a, 0x6426, 0x7c6e, 0x1c02, 0x4c92,
- 0x4c4a, 0x7c26, 0x1c6e, 0x3402, 0x6492,
- 0x644a, 0x1c26, 0x346e, 0x4c02, 0x7c92,
- 0x7c4a, 0x3426, 0x4c6e, 0x6402, 0x1c92,
- 0x1c4a, 0x4c26, 0x646e, 0x7c02, 0x3492,
- 0x344c, 0x6428, 0x7c70, 0x1c04, 0x4c94,
- 0x4c4c, 0x7c28, 0x1c70, 0x3404, 0x6494,
- 0x644c, 0x1c28, 0x3470, 0x4c04, 0x7c94,
- 0x7c4c, 0x3428, 0x4c70, 0x6404, 0x1c94,
- 0x1c4c, 0x4c28, 0x6470, 0x7c04, 0x3494,
- 0x344e, 0x642a, 0x7c72, 0x1c06, 0x4c96,
- 0x4c4e, 0x7c2a, 0x1c72, 0x3406, 0x6496,
- 0x644e, 0x1c2a, 0x3472, 0x4c06, 0x7c96,
- 0x7c4e, 0x342a, 0x4c72, 0x6406, 0x1c96,
- 0x1c4e, 0x4c2a, 0x6472, 0x7c06, 0x3496,
- 0x3450, 0x642c, 0x7c74, 0x1c08, 0x4c98,
- 0x4c50, 0x7c2c, 0x1c74, 0x3408, 0x6498,
- 0x6450, 0x1c2c, 0x3474, 0x4c08, 0x7c98,
- 0x7c50, 0x342c, 0x4c74, 0x6408, 0x1c98,
- 0x1c50, 0x4c2c, 0x6474, 0x7c08, 0x3498,
- 0x3452, 0x642e, 0x7c76, 0x1c0a, 0x4c9a,
- 0x4c52, 0x7c2e, 0x1c76, 0x340a, 0x649a,
- 0x6452, 0x1c2e, 0x3476, 0x4c0a, 0x7c9a,
- 0x7c52, 0x342e, 0x4c76, 0x640a, 0x1c9a,
- 0x1c52, 0x4c2e, 0x6476, 0x7c0a, 0x349a,
- 0x3454, 0x6430, 0x7c78, 0x1c0c, 0x4c9c,
- 0x4c54, 0x7c30, 0x1c78, 0x340c, 0x649c,
- 0x6454, 0x1c30, 0x3478, 0x4c0c, 0x7c9c,
- 0x7c54, 0x3430, 0x4c78, 0x640c, 0x1c9c,
- 0x1c54, 0x4c30, 0x6478, 0x7c0c, 0x349c,
- 0x3456, 0x6432, 0x7c7a, 0x1c0e, 0x4c9e,
- 0x4c56, 0x7c32, 0x1c7a, 0x340e, 0x649e,
- 0x6456, 0x1c32, 0x347a, 0x4c0e, 0x7c9e,
- 0x7c56, 0x3432, 0x4c7a, 0x640e, 0x1c9e,
- 0x1c56, 0x4c32, 0x647a, 0x7c0e, 0x349e,
- 0x3458, 0x6434, 0x7c7c, 0x1c10, 0x8400,
- 0x4c58, 0x7c34, 0x1c7c, 0x3410, 0x8450,
- 0x6458, 0x1c34, 0x347c, 0x4c10, 0x8650,
- 0x7c58, 0x3434, 0x4c7c, 0x6410, 0x0428,
- 0x1c58, 0x4c34, 0x647c, 0x7c10, 0x0464,
- 0x505a, 0x0836, 0x207e, 0x3812, 0x8266,
- 0x685a, 0x2036, 0x387e, 0x5012, 0x0002,
- 0x085a, 0x3836, 0x507e, 0x6812, 0x003e,
- 0x205a, 0x5036, 0x687e, 0x0812, 0x007a,
- 0x385a, 0x6836, 0x087e, 0x2012, 0x8216,
- 0x505c, 0x0838, 0x2080, 0x3814, 0x8268,
- 0x685c, 0x2038, 0x3880, 0x5014, 0x0004,
- 0x085c, 0x3838, 0x5080, 0x6814, 0x0040,
- 0x205c, 0x5038, 0x6880, 0x0814, 0x007c,
- 0x385c, 0x6838, 0x0880, 0x2014, 0x8218,
- 0x505e, 0x083a, 0x2082, 0x3816, 0x826a,
- 0x685e, 0x203a, 0x3882, 0x5016, 0x0006,
- 0x085e, 0x383a, 0x5082, 0x6816, 0x0042,
- 0x205e, 0x503a, 0x6882, 0x0816, 0x007e,
- 0x385e, 0x683a, 0x0882, 0x2016, 0x821a,
- 0x5060, 0x083c, 0x2084, 0x3818, 0x826c,
- 0x6860, 0x203c, 0x3884, 0x5018, 0x0008,
- 0x0860, 0x383c, 0x5084, 0x6818, 0x0044,
- 0x2060, 0x503c, 0x6884, 0x0818, 0x0080,
- 0x3860, 0x683c, 0x0884, 0x2018, 0x821c,
- 0x5062, 0x083e, 0x2086, 0x381a, 0x826e,
- 0x6862, 0x203e, 0x3886, 0x501a, 0x000a,
- 0x0862, 0x383e, 0x5086, 0x681a, 0x0046,
- 0x2062, 0x503e, 0x6886, 0x081a, 0x0082,
- 0x3862, 0x683e, 0x0886, 0x201a, 0x821e,
- 0x5064, 0x0840, 0x2088, 0x381c, 0x8270,
- 0x6864, 0x2040, 0x3888, 0x501c, 0x000c,
- 0x0864, 0x3840, 0x5088, 0x681c, 0x0048,
- 0x2064, 0x5040, 0x6888, 0x081c, 0x0084,
- 0x3864, 0x6840, 0x0888, 0x201c, 0x8220,
- 0x5066, 0x0842, 0x208a, 0x381e, 0x8272,
- 0x6866, 0x2042, 0x388a, 0x501e, 0x000e,
- 0x0866, 0x3842, 0x508a, 0x681e, 0x004a,
- 0x2066, 0x5042, 0x688a, 0x081e, 0x0086,
- 0x3866, 0x6842, 0x088a, 0x201e, 0x8222,
- 0x5068, 0x0844, 0x208c, 0x3820, 0x8274,
- 0x6868, 0x2044, 0x388c, 0x5020, 0x0010,
- 0x0868, 0x3844, 0x508c, 0x6820, 0x004c,
- 0x2068, 0x5044, 0x688c, 0x0820, 0x0088,
- 0x3868, 0x6844, 0x088c, 0x2020, 0x8224,
- 0x506a, 0x0846, 0x208e, 0x3822, 0x8276,
- 0x686a, 0x2046, 0x388e, 0x5022, 0x0012,
- 0x086a, 0x3846, 0x508e, 0x6822, 0x004e,
- 0x206a, 0x5046, 0x688e, 0x0822, 0x008a,
- 0x386a, 0x6846, 0x088e, 0x2022, 0x8226,
- 0x545a, 0x0c36, 0x247e, 0x3c12, 0x807a,
- 0x6c5a, 0x2436, 0x3c7e, 0x5412, 0x0402,
- 0x0c5a, 0x3c36, 0x547e, 0x6c12, 0x043e,
- 0x245a, 0x5436, 0x6c7e, 0x0c12, 0x047a,
- 0x3c5a, 0x6c36, 0x0c7e, 0x2412, 0x802a,
- 0x545c, 0x0c38, 0x2480, 0x3c14, 0x807c,
- 0x6c5c, 0x2438, 0x3c80, 0x5414, 0x0404,
- 0x0c5c, 0x3c38, 0x5480, 0x6c14, 0x0440,
- 0x245c, 0x5438, 0x6c80, 0x0c14, 0x047c,
- 0x3c5c, 0x6c38, 0x0c80, 0x2414, 0x802c,
- 0x545e, 0x0c3a, 0x2482, 0x3c16, 0x807e,
- 0x6c5e, 0x243a, 0x3c82, 0x5416, 0x0406,
- 0x0c5e, 0x3c3a, 0x5482, 0x6c16, 0x0442,
- 0x245e, 0x543a, 0x6c82, 0x0c16, 0x047e,
- 0x3c5e, 0x6c3a, 0x0c82, 0x2416, 0x802e,
- 0x5460, 0x0c3c, 0x2484, 0x3c18, 0x8080,
- 0x6c60, 0x243c, 0x3c84, 0x5418, 0x0408,
- 0x0c60, 0x3c3c, 0x5484, 0x6c18, 0x0444,
- 0x2460, 0x543c, 0x6c84, 0x0c18, 0x0480,
- 0x3c60, 0x6c3c, 0x0c84, 0x2418, 0x8030,
- 0x5462, 0x0c3e, 0x2486, 0x3c1a, 0x8082,
- 0x6c62, 0x243e, 0x3c86, 0x541a, 0x040a,
- 0x0c62, 0x3c3e, 0x5486, 0x6c1a, 0x0446,
- 0x2462, 0x543e, 0x6c86, 0x0c1a, 0x0482,
- 0x3c62, 0x6c3e, 0x0c86, 0x241a, 0x8032,
- 0x5464, 0x0c40, 0x2488, 0x3c1c, 0x8084,
- 0x6c64, 0x2440, 0x3c88, 0x541c, 0x040c,
- 0x0c64, 0x3c40, 0x5488, 0x6c1c, 0x0448,
- 0x2464, 0x5440, 0x6c88, 0x0c1c, 0x0484,
- 0x3c64, 0x6c40, 0x0c88, 0x241c, 0x8034,
- 0x5466, 0x0c42, 0x248a, 0x3c1e, 0x8086,
- 0x6c66, 0x2442, 0x3c8a, 0x541e, 0x040e,
- 0x0c66, 0x3c42, 0x548a, 0x6c1e, 0x044a,
- 0x2466, 0x5442, 0x6c8a, 0x0c1e, 0x0486,
- 0x3c66, 0x6c42, 0x0c8a, 0x241e, 0x8036,
- 0x5468, 0x0c44, 0x248c, 0x3c20, 0x8088,
- 0x6c68, 0x2444, 0x3c8c, 0x5420, 0x0410,
- 0x0c68, 0x3c44, 0x548c, 0x6c20, 0x044c,
- 0x2468, 0x5444, 0x6c8c, 0x0c20, 0x0488,
- 0x3c68, 0x6c44, 0x0c8c, 0x2420, 0x8038,
- 0x546a, 0x0c46, 0x248e, 0x3c22, 0x808a,
- 0x6c6a, 0x2446, 0x3c8e, 0x5422, 0x0412,
- 0x0c6a, 0x3c46, 0x548e, 0x6c22, 0x044e,
- 0x246a, 0x5446, 0x6c8e, 0x0c22, 0x048a,
- 0x3c6a, 0x6c46, 0x0c8e, 0x2422, 0x803a,
- 0x585a, 0x1036, 0x287e, 0x4012, 0x847a,
- 0x705a, 0x2836, 0x407e, 0x5812, 0x0016,
- 0x105a, 0x4036, 0x587e, 0x7012, 0x0052,
- 0x285a, 0x5836, 0x707e, 0x1012, 0x008e,
- 0x405a, 0x7036, 0x107e, 0x2812, 0x842a,
- 0x585c, 0x1038, 0x2880, 0x4014, 0x847c,
- 0x705c, 0x2838, 0x4080, 0x5814, 0x0018,
- 0x105c, 0x4038, 0x5880, 0x7014, 0x0054,
- 0x285c, 0x5838, 0x7080, 0x1014, 0x0090,
- 0x405c, 0x7038, 0x1080, 0x2814, 0x842c,
- 0x585e, 0x103a, 0x2882, 0x4016, 0x847e,
- 0x705e, 0x283a, 0x4082, 0x5816, 0x001a,
- 0x105e, 0x403a, 0x5882, 0x7016, 0x0056,
- 0x285e, 0x583a, 0x7082, 0x1016, 0x0092,
- 0x405e, 0x703a, 0x1082, 0x2816, 0x842e,
- 0x5860, 0x103c, 0x2884, 0x4018, 0x8480,
- 0x7060, 0x283c, 0x4084, 0x5818, 0x001c,
- 0x1060, 0x403c, 0x5884, 0x7018, 0x0058,
- 0x2860, 0x583c, 0x7084, 0x1018, 0x0094,
- 0x4060, 0x703c, 0x1084, 0x2818, 0x8430,
- 0x5862, 0x103e, 0x2886, 0x401a, 0x8482,
- 0x7062, 0x283e, 0x4086, 0x581a, 0x001e,
- 0x1062, 0x403e, 0x5886, 0x701a, 0x005a,
- 0x2862, 0x583e, 0x7086, 0x101a, 0x0096,
- 0x4062, 0x703e, 0x1086, 0x281a, 0x8432,
- 0x5864, 0x1040, 0x2888, 0x401c, 0x8484,
- 0x7064, 0x2840, 0x4088, 0x581c, 0x0020,
- 0x1064, 0x4040, 0x5888, 0x701c, 0x005c,
- 0x2864, 0x5840, 0x7088, 0x101c, 0x0098,
- 0x4064, 0x7040, 0x1088, 0x281c, 0x8434,
- 0x5866, 0x1042, 0x288a, 0x401e, 0x8486,
- 0x7066, 0x2842, 0x408a, 0x581e, 0x0022,
- 0x1066, 0x4042, 0x588a, 0x701e, 0x005e,
- 0x2866, 0x5842, 0x708a, 0x101e, 0x009a,
- 0x4066, 0x7042, 0x108a, 0x281e, 0x8436,
- 0x5868, 0x1044, 0x288c, 0x4020, 0x8488,
- 0x7068, 0x2844, 0x408c, 0x5820, 0x0024,
- 0x1068, 0x4044, 0x588c, 0x7020, 0x0060,
- 0x2868, 0x5844, 0x708c, 0x1020, 0x009c,
- 0x4068, 0x7044, 0x108c, 0x2820, 0x8438,
- 0x586a, 0x1046, 0x288e, 0x4022, 0x848a,
- 0x706a, 0x2846, 0x408e, 0x5822, 0x0026,
- 0x106a, 0x4046, 0x588e, 0x7022, 0x0062,
- 0x286a, 0x5846, 0x708e, 0x1022, 0x009e,
- 0x406a, 0x7046, 0x108e, 0x2822, 0x843a,
- 0x5c5a, 0x1436, 0x2c7e, 0x4412, 0x828e,
- 0x745a, 0x2c36, 0x447e, 0x5c12, 0x0416,
- 0x145a, 0x4436, 0x5c7e, 0x7412, 0x0452,
- 0x2c5a, 0x5c36, 0x747e, 0x1412, 0x048e,
- 0x445a, 0x7436, 0x147e, 0x2c12, 0x823e,
- 0x5c5c, 0x1438, 0x2c80, 0x4414, 0x8290,
- 0x745c, 0x2c38, 0x4480, 0x5c14, 0x0418,
- 0x145c, 0x4438, 0x5c80, 0x7414, 0x0454,
- 0x2c5c, 0x5c38, 0x7480, 0x1414, 0x0490,
- 0x445c, 0x7438, 0x1480, 0x2c14, 0x8240,
- 0x5c5e, 0x143a, 0x2c82, 0x4416, 0x8292,
- 0x745e, 0x2c3a, 0x4482, 0x5c16, 0x041a,
- 0x145e, 0x443a, 0x5c82, 0x7416, 0x0456,
- 0x2c5e, 0x5c3a, 0x7482, 0x1416, 0x0492,
- 0x445e, 0x743a, 0x1482, 0x2c16, 0x8242,
- 0x5c60, 0x143c, 0x2c84, 0x4418, 0x8294,
- 0x7460, 0x2c3c, 0x4484, 0x5c18, 0x041c,
- 0x1460, 0x443c, 0x5c84, 0x7418, 0x0458,
- 0x2c60, 0x5c3c, 0x7484, 0x1418, 0x0494,
- 0x4460, 0x743c, 0x1484, 0x2c18, 0x8244,
- 0x5c62, 0x143e, 0x2c86, 0x441a, 0x8296,
- 0x7462, 0x2c3e, 0x4486, 0x5c1a, 0x041e,
- 0x1462, 0x443e, 0x5c86, 0x741a, 0x045a,
- 0x2c62, 0x5c3e, 0x7486, 0x141a, 0x0496,
- 0x4462, 0x743e, 0x1486, 0x2c1a, 0x8246,
- 0x5c64, 0x1440, 0x2c88, 0x441c, 0x8298,
- 0x7464, 0x2c40, 0x4488, 0x5c1c, 0x0420,
- 0x1464, 0x4440, 0x5c88, 0x741c, 0x045c,
- 0x2c64, 0x5c40, 0x7488, 0x141c, 0x0498,
- 0x4464, 0x7440, 0x1488, 0x2c1c, 0x8248,
- 0x5c66, 0x1442, 0x2c8a, 0x441e, 0x829a,
- 0x7466, 0x2c42, 0x448a, 0x5c1e, 0x0422,
- 0x1466, 0x4442, 0x5c8a, 0x741e, 0x045e,
- 0x2c66, 0x5c42, 0x748a, 0x141e, 0x049a,
- 0x4466, 0x7442, 0x148a, 0x2c1e, 0x824a,
- 0x5c68, 0x1444, 0x2c8c, 0x4420, 0x829c,
- 0x7468, 0x2c44, 0x448c, 0x5c20, 0x0424,
- 0x1468, 0x4444, 0x5c8c, 0x7420, 0x0460,
- 0x2c68, 0x5c44, 0x748c, 0x1420, 0x049c,
- 0x4468, 0x7444, 0x148c, 0x2c20, 0x824c,
- 0x5c6a, 0x1446, 0x2c8e, 0x4422, 0x829e,
- 0x746a, 0x2c46, 0x448e, 0x5c22, 0x0426,
- 0x146a, 0x4446, 0x5c8e, 0x7422, 0x0462,
- 0x2c6a, 0x5c46, 0x748e, 0x1422, 0x049e,
- 0x446a, 0x7446, 0x148e, 0x2c22, 0x824e,
- 0x605a, 0x1836, 0x307e, 0x4812, 0x8604,
- 0x785a, 0x3036, 0x487e, 0x6012, 0x002a,
- 0x185a, 0x4836, 0x607e, 0x7812, 0x0066,
- 0x305a, 0x6036, 0x787e, 0x1812, 0x8002,
- 0x485a, 0x7836, 0x187e, 0x3012, 0x8052,
- 0x605c, 0x1838, 0x3080, 0x4814, 0x8608,
- 0x785c, 0x3038, 0x4880, 0x6014, 0x002c,
- 0x185c, 0x4838, 0x6080, 0x7814, 0x0068,
- 0x305c, 0x6038, 0x7880, 0x1814, 0x8004,
- 0x485c, 0x7838, 0x1880, 0x3014, 0x8054,
- 0x605e, 0x183a, 0x3082, 0x4816, 0x860c,
- 0x785e, 0x303a, 0x4882, 0x6016, 0x002e,
- 0x185e, 0x483a, 0x6082, 0x7816, 0x006a,
- 0x305e, 0x603a, 0x7882, 0x1816, 0x8006,
- 0x485e, 0x783a, 0x1882, 0x3016, 0x8056,
- 0x6060, 0x183c, 0x3084, 0x4818, 0x8610,
- 0x7860, 0x303c, 0x4884, 0x6018, 0x0030,
- 0x1860, 0x483c, 0x6084, 0x7818, 0x006c,
- 0x3060, 0x603c, 0x7884, 0x1818, 0x8008,
- 0x4860, 0x783c, 0x1884, 0x3018, 0x8058,
- 0x6062, 0x183e, 0x3086, 0x481a, 0x8614,
- 0x7862, 0x303e, 0x4886, 0x601a, 0x0032,
- 0x1862, 0x483e, 0x6086, 0x781a, 0x006e,
- 0x3062, 0x603e, 0x7886, 0x181a, 0x800a,
- 0x4862, 0x783e, 0x1886, 0x301a, 0x805a,
- 0x6064, 0x1840, 0x3088, 0x481c, 0x8618,
- 0x7864, 0x3040, 0x4888, 0x601c, 0x0034,
- 0x1864, 0x4840, 0x6088, 0x781c, 0x0070,
- 0x3064, 0x6040, 0x7888, 0x181c, 0x800c,
- 0x4864, 0x7840, 0x1888, 0x301c, 0x805c,
- 0x6066, 0x1842, 0x308a, 0x481e, 0x861c,
- 0x7866, 0x3042, 0x488a, 0x601e, 0x0036,
- 0x1866, 0x4842, 0x608a, 0x781e, 0x0072,
- 0x3066, 0x6042, 0x788a, 0x181e, 0x800e,
- 0x4866, 0x7842, 0x188a, 0x301e, 0x805e,
- 0x6068, 0x1844, 0x308c, 0x4820, 0x8620,
- 0x7868, 0x3044, 0x488c, 0x6020, 0x0038,
- 0x1868, 0x4844, 0x608c, 0x7820, 0x0074,
- 0x3068, 0x6044, 0x788c, 0x1820, 0x8010,
- 0x4868, 0x7844, 0x188c, 0x3020, 0x8060,
- 0x606a, 0x1846, 0x308e, 0x4822, 0x8624,
- 0x786a, 0x3046, 0x488e, 0x6022, 0x003a,
- 0x186a, 0x4846, 0x608e, 0x7822, 0x0076,
- 0x306a, 0x6046, 0x788e, 0x1822, 0x8012,
- 0x486a, 0x7846, 0x188e, 0x3022, 0x8062,
- 0x645a, 0x1c36, 0x347e, 0x4c12, 0x8654,
- 0x7c5a, 0x3436, 0x4c7e, 0x6412, 0x042a,
- 0x1c5a, 0x4c36, 0x647e, 0x7c12, 0x0466,
- 0x345a, 0x6436, 0x7c7e, 0x1c12, 0x8402,
- 0x4c5a, 0x7c36, 0x1c7e, 0x3412, 0x8452,
- 0x645c, 0x1c38, 0x3480, 0x4c14, 0x8658,
- 0x7c5c, 0x3438, 0x4c80, 0x6414, 0x042c,
- 0x1c5c, 0x4c38, 0x6480, 0x7c14, 0x0468,
- 0x345c, 0x6438, 0x7c80, 0x1c14, 0x8404,
- 0x4c5c, 0x7c38, 0x1c80, 0x3414, 0x8454,
- 0x645e, 0x1c3a, 0x3482, 0x4c16, 0x865c,
- 0x7c5e, 0x343a, 0x4c82, 0x6416, 0x042e,
- 0x1c5e, 0x4c3a, 0x6482, 0x7c16, 0x046a,
- 0x345e, 0x643a, 0x7c82, 0x1c16, 0x8406,
- 0x4c5e, 0x7c3a, 0x1c82, 0x3416, 0x8456,
- 0x6460, 0x1c3c, 0x3484, 0x4c18, 0x8660,
- 0x7c60, 0x343c, 0x4c84, 0x6418, 0x0430,
- 0x1c60, 0x4c3c, 0x6484, 0x7c18, 0x046c,
- 0x3460, 0x643c, 0x7c84, 0x1c18, 0x8408,
- 0x4c60, 0x7c3c, 0x1c84, 0x3418, 0x8458,
- 0x6462, 0x1c3e, 0x3486, 0x4c1a, 0x8664,
- 0x7c62, 0x343e, 0x4c86, 0x641a, 0x0432,
- 0x1c62, 0x4c3e, 0x6486, 0x7c1a, 0x046e,
- 0x3462, 0x643e, 0x7c86, 0x1c1a, 0x840a,
- 0x4c62, 0x7c3e, 0x1c86, 0x341a, 0x845a,
- 0x6464, 0x1c40, 0x3488, 0x4c1c, 0x8668,
- 0x7c64, 0x3440, 0x4c88, 0x641c, 0x0434,
- 0x1c64, 0x4c40, 0x6488, 0x7c1c, 0x0470,
- 0x3464, 0x6440, 0x7c88, 0x1c1c, 0x840c,
- 0x4c64, 0x7c40, 0x1c88, 0x341c, 0x845c,
- 0x6466, 0x1c42, 0x348a, 0x4c1e, 0x866c,
- 0x7c66, 0x3442, 0x4c8a, 0x641e, 0x0436,
- 0x1c66, 0x4c42, 0x648a, 0x7c1e, 0x0472,
- 0x3466, 0x6442, 0x7c8a, 0x1c1e, 0x840e,
- 0x4c66, 0x7c42, 0x1c8a, 0x341e, 0x845e,
- 0x6468, 0x1c44, 0x348c, 0x4c20, 0x8670,
- 0x7c68, 0x3444, 0x4c8c, 0x6420, 0x0438,
- 0x1c68, 0x4c44, 0x648c, 0x7c20, 0x0474,
- 0x3468, 0x6444, 0x7c8c, 0x1c20, 0x8410,
- 0x4c68, 0x7c44, 0x1c8c, 0x3420, 0x8460,
- 0x646a, 0x1c46, 0x348e, 0x4c22, 0x8674,
- 0x7c6a, 0x3446, 0x4c8e, 0x6422, 0x043a,
- 0x1c6a, 0x4c46, 0x648e, 0x7c22, 0x0476,
- 0x346a, 0x6446, 0x7c8e, 0x1c22, 0x8412,
- 0x4c6a, 0x7c46, 0x1c8e, 0x3422, 0x8462,
- 0x0a48, 0x3a24, 0x526c, 0x6a00, 0x2290,
- 0x2248, 0x5224, 0x6a6c, 0x0a00, 0x3a90,
- 0x3a48, 0x6a24, 0x0a6c, 0x2200, 0x5290,
- 0x5248, 0x0a24, 0x226c, 0x3a00, 0x6a90,
- 0x6a48, 0x2224, 0x3a6c, 0x5200, 0x0a90,
- 0x0a4a, 0x3a26, 0x526e, 0x6a02, 0x2292,
- 0x224a, 0x5226, 0x6a6e, 0x0a02, 0x3a92,
- 0x3a4a, 0x6a26, 0x0a6e, 0x2202, 0x5292,
- 0x524a, 0x0a26, 0x226e, 0x3a02, 0x6a92,
- 0x6a4a, 0x2226, 0x3a6e, 0x5202, 0x0a92,
- 0x0a4c, 0x3a28, 0x5270, 0x6a04, 0x2294,
- 0x224c, 0x5228, 0x6a70, 0x0a04, 0x3a94,
- 0x3a4c, 0x6a28, 0x0a70, 0x2204, 0x5294,
- 0x524c, 0x0a28, 0x2270, 0x3a04, 0x6a94,
- 0x6a4c, 0x2228, 0x3a70, 0x5204, 0x0a94,
- 0x0a4e, 0x3a2a, 0x5272, 0x6a06, 0x2296,
- 0x224e, 0x522a, 0x6a72, 0x0a06, 0x3a96,
- 0x3a4e, 0x6a2a, 0x0a72, 0x2206, 0x5296,
- 0x524e, 0x0a2a, 0x2272, 0x3a06, 0x6a96,
- 0x6a4e, 0x222a, 0x3a72, 0x5206, 0x0a96,
- 0x0a50, 0x3a2c, 0x5274, 0x6a08, 0x2298,
- 0x2250, 0x522c, 0x6a74, 0x0a08, 0x3a98,
- 0x3a50, 0x6a2c, 0x0a74, 0x2208, 0x5298,
- 0x5250, 0x0a2c, 0x2274, 0x3a08, 0x6a98,
- 0x6a50, 0x222c, 0x3a74, 0x5208, 0x0a98,
- 0x0a52, 0x3a2e, 0x5276, 0x6a0a, 0x229a,
- 0x2252, 0x522e, 0x6a76, 0x0a0a, 0x3a9a,
- 0x3a52, 0x6a2e, 0x0a76, 0x220a, 0x529a,
- 0x5252, 0x0a2e, 0x2276, 0x3a0a, 0x6a9a,
- 0x6a52, 0x222e, 0x3a76, 0x520a, 0x0a9a,
- 0x0a54, 0x3a30, 0x5278, 0x6a0c, 0x229c,
- 0x2254, 0x5230, 0x6a78, 0x0a0c, 0x3a9c,
- 0x3a54, 0x6a30, 0x0a78, 0x220c, 0x529c,
- 0x5254, 0x0a30, 0x2278, 0x3a0c, 0x6a9c,
- 0x6a54, 0x2230, 0x3a78, 0x520c, 0x0a9c,
- 0x0a56, 0x3a32, 0x527a, 0x6a0e, 0x229e,
- 0x2256, 0x5232, 0x6a7a, 0x0a0e, 0x3a9e,
- 0x3a56, 0x6a32, 0x0a7a, 0x220e, 0x529e,
- 0x5256, 0x0a32, 0x227a, 0x3a0e, 0x6a9e,
- 0x6a56, 0x2232, 0x3a7a, 0x520e, 0x0a9e,
- 0x0a58, 0x3a34, 0x527c, 0x6a10, 0x023c,
- 0x2258, 0x5234, 0x6a7c, 0x0a10, 0x0278,
- 0x3a58, 0x6a34, 0x0a7c, 0x2210, 0x8414,
- 0x5258, 0x0a34, 0x227c, 0x3a10, 0x8464,
- 0x6a58, 0x2234, 0x3a7c, 0x5210, 0x0200,
- 0x0e48, 0x3e24, 0x566c, 0x6e00, 0x2690,
- 0x2648, 0x5624, 0x6e6c, 0x0e00, 0x3e90,
- 0x3e48, 0x6e24, 0x0e6c, 0x2600, 0x5690,
- 0x5648, 0x0e24, 0x266c, 0x3e00, 0x6e90,
- 0x6e48, 0x2624, 0x3e6c, 0x5600, 0x0e90,
- 0x0e4a, 0x3e26, 0x566e, 0x6e02, 0x2692,
- 0x264a, 0x5626, 0x6e6e, 0x0e02, 0x3e92,
- 0x3e4a, 0x6e26, 0x0e6e, 0x2602, 0x5692,
- 0x564a, 0x0e26, 0x266e, 0x3e02, 0x6e92,
- 0x6e4a, 0x2626, 0x3e6e, 0x5602, 0x0e92,
- 0x0e4c, 0x3e28, 0x5670, 0x6e04, 0x2694,
- 0x264c, 0x5628, 0x6e70, 0x0e04, 0x3e94,
- 0x3e4c, 0x6e28, 0x0e70, 0x2604, 0x5694,
- 0x564c, 0x0e28, 0x2670, 0x3e04, 0x6e94,
- 0x6e4c, 0x2628, 0x3e70, 0x5604, 0x0e94,
- 0x0e4e, 0x3e2a, 0x5672, 0x6e06, 0x2696,
- 0x264e, 0x562a, 0x6e72, 0x0e06, 0x3e96,
- 0x3e4e, 0x6e2a, 0x0e72, 0x2606, 0x5696,
- 0x564e, 0x0e2a, 0x2672, 0x3e06, 0x6e96,
- 0x6e4e, 0x262a, 0x3e72, 0x5606, 0x0e96,
- 0x0e50, 0x3e2c, 0x5674, 0x6e08, 0x2698,
- 0x2650, 0x562c, 0x6e74, 0x0e08, 0x3e98,
- 0x3e50, 0x6e2c, 0x0e74, 0x2608, 0x5698,
- 0x5650, 0x0e2c, 0x2674, 0x3e08, 0x6e98,
- 0x6e50, 0x262c, 0x3e74, 0x5608, 0x0e98,
- 0x0e52, 0x3e2e, 0x5676, 0x6e0a, 0x269a,
- 0x2652, 0x562e, 0x6e76, 0x0e0a, 0x3e9a,
- 0x3e52, 0x6e2e, 0x0e76, 0x260a, 0x569a,
- 0x5652, 0x0e2e, 0x2676, 0x3e0a, 0x6e9a,
- 0x6e52, 0x262e, 0x3e76, 0x560a, 0x0e9a,
- 0x0e54, 0x3e30, 0x5678, 0x6e0c, 0x269c,
- 0x2654, 0x5630, 0x6e78, 0x0e0c, 0x3e9c,
- 0x3e54, 0x6e30, 0x0e78, 0x260c, 0x569c,
- 0x5654, 0x0e30, 0x2678, 0x3e0c, 0x6e9c,
- 0x6e54, 0x2630, 0x3e78, 0x560c, 0x0e9c,
- 0x0e56, 0x3e32, 0x567a, 0x6e0e, 0x269e,
- 0x2656, 0x5632, 0x6e7a, 0x0e0e, 0x3e9e,
- 0x3e56, 0x6e32, 0x0e7a, 0x260e, 0x569e,
- 0x5656, 0x0e32, 0x267a, 0x3e0e, 0x6e9e,
- 0x6e56, 0x2632, 0x3e7a, 0x560e, 0x0e9e,
- 0x0e58, 0x3e34, 0x567c, 0x6e10, 0x063c,
- 0x2658, 0x5634, 0x6e7c, 0x0e10, 0x0678,
- 0x3e58, 0x6e34, 0x0e7c, 0x2610, 0x8228,
- 0x5658, 0x0e34, 0x267c, 0x3e10, 0x8278,
- 0x6e58, 0x2634, 0x3e7c, 0x5610, 0x0600,
- 0x1248, 0x4224, 0x5a6c, 0x7200, 0x2a90,
- 0x2a48, 0x5a24, 0x726c, 0x1200, 0x4290,
- 0x4248, 0x7224, 0x126c, 0x2a00, 0x5a90,
- 0x5a48, 0x1224, 0x2a6c, 0x4200, 0x7290,
- 0x7248, 0x2a24, 0x426c, 0x5a00, 0x1290,
- 0x124a, 0x4226, 0x5a6e, 0x7202, 0x2a92,
- 0x2a4a, 0x5a26, 0x726e, 0x1202, 0x4292,
- 0x424a, 0x7226, 0x126e, 0x2a02, 0x5a92,
- 0x5a4a, 0x1226, 0x2a6e, 0x4202, 0x7292,
- 0x724a, 0x2a26, 0x426e, 0x5a02, 0x1292,
- 0x124c, 0x4228, 0x5a70, 0x7204, 0x2a94,
- 0x2a4c, 0x5a28, 0x7270, 0x1204, 0x4294,
- 0x424c, 0x7228, 0x1270, 0x2a04, 0x5a94,
- 0x5a4c, 0x1228, 0x2a70, 0x4204, 0x7294,
- 0x724c, 0x2a28, 0x4270, 0x5a04, 0x1294,
- 0x124e, 0x422a, 0x5a72, 0x7206, 0x2a96,
- 0x2a4e, 0x5a2a, 0x7272, 0x1206, 0x4296,
- 0x424e, 0x722a, 0x1272, 0x2a06, 0x5a96,
- 0x5a4e, 0x122a, 0x2a72, 0x4206, 0x7296,
- 0x724e, 0x2a2a, 0x4272, 0x5a06, 0x1296,
- 0x1250, 0x422c, 0x5a74, 0x7208, 0x2a98,
- 0x2a50, 0x5a2c, 0x7274, 0x1208, 0x4298,
- 0x4250, 0x722c, 0x1274, 0x2a08, 0x5a98,
- 0x5a50, 0x122c, 0x2a74, 0x4208, 0x7298,
- 0x7250, 0x2a2c, 0x4274, 0x5a08, 0x1298,
- 0x1252, 0x422e, 0x5a76, 0x720a, 0x2a9a,
- 0x2a52, 0x5a2e, 0x7276, 0x120a, 0x429a,
- 0x4252, 0x722e, 0x1276, 0x2a0a, 0x5a9a,
- 0x5a52, 0x122e, 0x2a76, 0x420a, 0x729a,
- 0x7252, 0x2a2e, 0x4276, 0x5a0a, 0x129a,
- 0x1254, 0x4230, 0x5a78, 0x720c, 0x2a9c,
- 0x2a54, 0x5a30, 0x7278, 0x120c, 0x429c,
- 0x4254, 0x7230, 0x1278, 0x2a0c, 0x5a9c,
- 0x5a54, 0x1230, 0x2a78, 0x420c, 0x729c,
- 0x7254, 0x2a30, 0x4278, 0x5a0c, 0x129c,
- 0x1256, 0x4232, 0x5a7a, 0x720e, 0x2a9e,
- 0x2a56, 0x5a32, 0x727a, 0x120e, 0x429e,
- 0x4256, 0x7232, 0x127a, 0x2a0e, 0x5a9e,
- 0x5a56, 0x1232, 0x2a7a, 0x420e, 0x729e,
- 0x7256, 0x2a32, 0x427a, 0x5a0e, 0x129e,
- 0x1258, 0x4234, 0x5a7c, 0x7210, 0x0250,
- 0x2a58, 0x5a34, 0x727c, 0x1210, 0x028c,
- 0x4258, 0x7234, 0x127c, 0x2a10, 0x803c,
- 0x5a58, 0x1234, 0x2a7c, 0x4210, 0x808c,
- 0x7258, 0x2a34, 0x427c, 0x5a10, 0x0214,
- 0x1648, 0x4624, 0x5e6c, 0x7600, 0x2e90,
- 0x2e48, 0x5e24, 0x766c, 0x1600, 0x4690,
- 0x4648, 0x7624, 0x166c, 0x2e00, 0x5e90,
- 0x5e48, 0x1624, 0x2e6c, 0x4600, 0x7690,
- 0x7648, 0x2e24, 0x466c, 0x5e00, 0x1690,
- 0x164a, 0x4626, 0x5e6e, 0x7602, 0x2e92,
- 0x2e4a, 0x5e26, 0x766e, 0x1602, 0x4692,
- 0x464a, 0x7626, 0x166e, 0x2e02, 0x5e92,
- 0x5e4a, 0x1626, 0x2e6e, 0x4602, 0x7692,
- 0x764a, 0x2e26, 0x466e, 0x5e02, 0x1692,
- 0x164c, 0x4628, 0x5e70, 0x7604, 0x2e94,
- 0x2e4c, 0x5e28, 0x7670, 0x1604, 0x4694,
- 0x464c, 0x7628, 0x1670, 0x2e04, 0x5e94,
- 0x5e4c, 0x1628, 0x2e70, 0x4604, 0x7694,
- 0x764c, 0x2e28, 0x4670, 0x5e04, 0x1694,
- 0x164e, 0x462a, 0x5e72, 0x7606, 0x2e96,
- 0x2e4e, 0x5e2a, 0x7672, 0x1606, 0x4696,
- 0x464e, 0x762a, 0x1672, 0x2e06, 0x5e96,
- 0x5e4e, 0x162a, 0x2e72, 0x4606, 0x7696,
- 0x764e, 0x2e2a, 0x4672, 0x5e06, 0x1696,
- 0x1650, 0x462c, 0x5e74, 0x7608, 0x2e98,
- 0x2e50, 0x5e2c, 0x7674, 0x1608, 0x4698,
- 0x4650, 0x762c, 0x1674, 0x2e08, 0x5e98,
- 0x5e50, 0x162c, 0x2e74, 0x4608, 0x7698,
- 0x7650, 0x2e2c, 0x4674, 0x5e08, 0x1698,
- 0x1652, 0x462e, 0x5e76, 0x760a, 0x2e9a,
- 0x2e52, 0x5e2e, 0x7676, 0x160a, 0x469a,
- 0x4652, 0x762e, 0x1676, 0x2e0a, 0x5e9a,
- 0x5e52, 0x162e, 0x2e76, 0x460a, 0x769a,
- 0x7652, 0x2e2e, 0x4676, 0x5e0a, 0x169a,
- 0x1654, 0x4630, 0x5e78, 0x760c, 0x2e9c,
- 0x2e54, 0x5e30, 0x7678, 0x160c, 0x469c,
- 0x4654, 0x7630, 0x1678, 0x2e0c, 0x5e9c,
- 0x5e54, 0x1630, 0x2e78, 0x460c, 0x769c,
- 0x7654, 0x2e30, 0x4678, 0x5e0c, 0x169c,
- 0x1656, 0x4632, 0x5e7a, 0x760e, 0x2e9e,
- 0x2e56, 0x5e32, 0x767a, 0x160e, 0x469e,
- 0x4656, 0x7632, 0x167a, 0x2e0e, 0x5e9e,
- 0x5e56, 0x1632, 0x2e7a, 0x460e, 0x769e,
- 0x7656, 0x2e32, 0x467a, 0x5e0e, 0x169e,
- 0x1658, 0x4634, 0x5e7c, 0x7610, 0x0650,
- 0x2e58, 0x5e34, 0x767c, 0x1610, 0x068c,
- 0x4658, 0x7634, 0x167c, 0x2e10, 0x843c,
- 0x5e58, 0x1634, 0x2e7c, 0x4610, 0x848c,
- 0x7658, 0x2e34, 0x467c, 0x5e10, 0x0614,
- 0x1a48, 0x4a24, 0x626c, 0x7a00, 0x3290,
- 0x3248, 0x6224, 0x7a6c, 0x1a00, 0x4a90,
- 0x4a48, 0x7a24, 0x1a6c, 0x3200, 0x6290,
- 0x6248, 0x1a24, 0x326c, 0x4a00, 0x7a90,
- 0x7a48, 0x3224, 0x4a6c, 0x6200, 0x1a90,
- 0x1a4a, 0x4a26, 0x626e, 0x7a02, 0x3292,
- 0x324a, 0x6226, 0x7a6e, 0x1a02, 0x4a92,
- 0x4a4a, 0x7a26, 0x1a6e, 0x3202, 0x6292,
- 0x624a, 0x1a26, 0x326e, 0x4a02, 0x7a92,
- 0x7a4a, 0x3226, 0x4a6e, 0x6202, 0x1a92,
- 0x1a4c, 0x4a28, 0x6270, 0x7a04, 0x3294,
- 0x324c, 0x6228, 0x7a70, 0x1a04, 0x4a94,
- 0x4a4c, 0x7a28, 0x1a70, 0x3204, 0x6294,
- 0x624c, 0x1a28, 0x3270, 0x4a04, 0x7a94,
- 0x7a4c, 0x3228, 0x4a70, 0x6204, 0x1a94,
- 0x1a4e, 0x4a2a, 0x6272, 0x7a06, 0x3296,
- 0x324e, 0x622a, 0x7a72, 0x1a06, 0x4a96,
- 0x4a4e, 0x7a2a, 0x1a72, 0x3206, 0x6296,
- 0x624e, 0x1a2a, 0x3272, 0x4a06, 0x7a96,
- 0x7a4e, 0x322a, 0x4a72, 0x6206, 0x1a96,
- 0x1a50, 0x4a2c, 0x6274, 0x7a08, 0x3298,
- 0x3250, 0x622c, 0x7a74, 0x1a08, 0x4a98,
- 0x4a50, 0x7a2c, 0x1a74, 0x3208, 0x6298,
- 0x6250, 0x1a2c, 0x3274, 0x4a08, 0x7a98,
- 0x7a50, 0x322c, 0x4a74, 0x6208, 0x1a98,
- 0x1a52, 0x4a2e, 0x6276, 0x7a0a, 0x329a,
- 0x3252, 0x622e, 0x7a76, 0x1a0a, 0x4a9a,
- 0x4a52, 0x7a2e, 0x1a76, 0x320a, 0x629a,
- 0x6252, 0x1a2e, 0x3276, 0x4a0a, 0x7a9a,
- 0x7a52, 0x322e, 0x4a76, 0x620a, 0x1a9a,
- 0x1a54, 0x4a30, 0x6278, 0x7a0c, 0x329c,
- 0x3254, 0x6230, 0x7a78, 0x1a0c, 0x4a9c,
- 0x4a54, 0x7a30, 0x1a78, 0x320c, 0x629c,
- 0x6254, 0x1a30, 0x3278, 0x4a0c, 0x7a9c,
- 0x7a54, 0x3230, 0x4a78, 0x620c, 0x1a9c,
- 0x1a56, 0x4a32, 0x627a, 0x7a0e, 0x329e,
- 0x3256, 0x6232, 0x7a7a, 0x1a0e, 0x4a9e,
- 0x4a56, 0x7a32, 0x1a7a, 0x320e, 0x629e,
- 0x6256, 0x1a32, 0x327a, 0x4a0e, 0x7a9e,
- 0x7a56, 0x3232, 0x4a7a, 0x620e, 0x1a9e,
- 0x1a58, 0x4a34, 0x627c, 0x7a10, 0x0264,
- 0x3258, 0x6234, 0x7a7c, 0x1a10, 0x8200,
- 0x4a58, 0x7a34, 0x1a7c, 0x3210, 0x8250,
- 0x6258, 0x1a34, 0x327c, 0x4a10, 0x8628,
- 0x7a58, 0x3234, 0x4a7c, 0x6210, 0x0228,
- 0x1e48, 0x4e24, 0x666c, 0x7e00, 0x3690,
- 0x3648, 0x6624, 0x7e6c, 0x1e00, 0x4e90,
- 0x4e48, 0x7e24, 0x1e6c, 0x3600, 0x6690,
- 0x6648, 0x1e24, 0x366c, 0x4e00, 0x7e90,
- 0x7e48, 0x3624, 0x4e6c, 0x6600, 0x1e90,
- 0x1e4a, 0x4e26, 0x666e, 0x7e02, 0x3692,
- 0x364a, 0x6626, 0x7e6e, 0x1e02, 0x4e92,
- 0x4e4a, 0x7e26, 0x1e6e, 0x3602, 0x6692,
- 0x664a, 0x1e26, 0x366e, 0x4e02, 0x7e92,
- 0x7e4a, 0x3626, 0x4e6e, 0x6602, 0x1e92,
- 0x1e4c, 0x4e28, 0x6670, 0x7e04, 0x3694,
- 0x364c, 0x6628, 0x7e70, 0x1e04, 0x4e94,
- 0x4e4c, 0x7e28, 0x1e70, 0x3604, 0x6694,
- 0x664c, 0x1e28, 0x3670, 0x4e04, 0x7e94,
- 0x7e4c, 0x3628, 0x4e70, 0x6604, 0x1e94,
- 0x1e4e, 0x4e2a, 0x6672, 0x7e06, 0x3696,
- 0x364e, 0x662a, 0x7e72, 0x1e06, 0x4e96,
- 0x4e4e, 0x7e2a, 0x1e72, 0x3606, 0x6696,
- 0x664e, 0x1e2a, 0x3672, 0x4e06, 0x7e96,
- 0x7e4e, 0x362a, 0x4e72, 0x6606, 0x1e96,
- 0x1e50, 0x4e2c, 0x6674, 0x7e08, 0x3698,
- 0x3650, 0x662c, 0x7e74, 0x1e08, 0x4e98,
- 0x4e50, 0x7e2c, 0x1e74, 0x3608, 0x6698,
- 0x6650, 0x1e2c, 0x3674, 0x4e08, 0x7e98,
- 0x7e50, 0x362c, 0x4e74, 0x6608, 0x1e98,
- 0x1e52, 0x4e2e, 0x6676, 0x7e0a, 0x369a,
- 0x3652, 0x662e, 0x7e76, 0x1e0a, 0x4e9a,
- 0x4e52, 0x7e2e, 0x1e76, 0x360a, 0x669a,
- 0x6652, 0x1e2e, 0x3676, 0x4e0a, 0x7e9a,
- 0x7e52, 0x362e, 0x4e76, 0x660a, 0x1e9a,
- 0x1e54, 0x4e30, 0x6678, 0x7e0c, 0x369c,
- 0x3654, 0x6630, 0x7e78, 0x1e0c, 0x4e9c,
- 0x4e54, 0x7e30, 0x1e78, 0x360c, 0x669c,
- 0x6654, 0x1e30, 0x3678, 0x4e0c, 0x7e9c,
- 0x7e54, 0x3630, 0x4e78, 0x660c, 0x1e9c,
- 0x1e56, 0x4e32, 0x667a, 0x7e0e, 0x369e,
- 0x3656, 0x6632, 0x7e7a, 0x1e0e, 0x4e9e,
- 0x4e56, 0x7e32, 0x1e7a, 0x360e, 0x669e,
- 0x6656, 0x1e32, 0x367a, 0x4e0e, 0x7e9e,
- 0x7e56, 0x3632, 0x4e7a, 0x660e, 0x1e9e,
- 0x1e58, 0x4e34, 0x667c, 0x7e10, 0x0664,
- 0x3658, 0x6634, 0x7e7c, 0x1e10, 0x8014,
- 0x4e58, 0x7e34, 0x1e7c, 0x3610, 0x8064,
- 0x6658, 0x1e34, 0x367c, 0x4e10, 0x8678,
- 0x7e58, 0x3634, 0x4e7c, 0x6610, 0x0628,
- 0x3a5a, 0x6a36, 0x0a7e, 0x2212, 0x8416,
- 0x525a, 0x0a36, 0x227e, 0x3a12, 0x8466,
- 0x6a5a, 0x2236, 0x3a7e, 0x5212, 0x0202,
- 0x0a5a, 0x3a36, 0x527e, 0x6a12, 0x023e,
- 0x225a, 0x5236, 0x6a7e, 0x0a12, 0x027a,
- 0x3a5c, 0x6a38, 0x0a80, 0x2214, 0x8418,
- 0x525c, 0x0a38, 0x2280, 0x3a14, 0x8468,
- 0x6a5c, 0x2238, 0x3a80, 0x5214, 0x0204,
- 0x0a5c, 0x3a38, 0x5280, 0x6a14, 0x0240,
- 0x225c, 0x5238, 0x6a80, 0x0a14, 0x027c,
- 0x3a5e, 0x6a3a, 0x0a82, 0x2216, 0x841a,
- 0x525e, 0x0a3a, 0x2282, 0x3a16, 0x846a,
- 0x6a5e, 0x223a, 0x3a82, 0x5216, 0x0206,
- 0x0a5e, 0x3a3a, 0x5282, 0x6a16, 0x0242,
- 0x225e, 0x523a, 0x6a82, 0x0a16, 0x027e,
- 0x3a60, 0x6a3c, 0x0a84, 0x2218, 0x841c,
- 0x5260, 0x0a3c, 0x2284, 0x3a18, 0x846c,
- 0x6a60, 0x223c, 0x3a84, 0x5218, 0x0208,
- 0x0a60, 0x3a3c, 0x5284, 0x6a18, 0x0244,
- 0x2260, 0x523c, 0x6a84, 0x0a18, 0x0280,
- 0x3a62, 0x6a3e, 0x0a86, 0x221a, 0x841e,
- 0x5262, 0x0a3e, 0x2286, 0x3a1a, 0x846e,
- 0x6a62, 0x223e, 0x3a86, 0x521a, 0x020a,
- 0x0a62, 0x3a3e, 0x5286, 0x6a1a, 0x0246,
- 0x2262, 0x523e, 0x6a86, 0x0a1a, 0x0282,
- 0x3a64, 0x6a40, 0x0a88, 0x221c, 0x8420,
- 0x5264, 0x0a40, 0x2288, 0x3a1c, 0x8470,
- 0x6a64, 0x2240, 0x3a88, 0x521c, 0x020c,
- 0x0a64, 0x3a40, 0x5288, 0x6a1c, 0x0248,
- 0x2264, 0x5240, 0x6a88, 0x0a1c, 0x0284,
- 0x3a66, 0x6a42, 0x0a8a, 0x221e, 0x8422,
- 0x5266, 0x0a42, 0x228a, 0x3a1e, 0x8472,
- 0x6a66, 0x2242, 0x3a8a, 0x521e, 0x020e,
- 0x0a66, 0x3a42, 0x528a, 0x6a1e, 0x024a,
- 0x2266, 0x5242, 0x6a8a, 0x0a1e, 0x0286,
- 0x3a68, 0x6a44, 0x0a8c, 0x2220, 0x8424,
- 0x5268, 0x0a44, 0x228c, 0x3a20, 0x8474,
- 0x6a68, 0x2244, 0x3a8c, 0x5220, 0x0210,
- 0x0a68, 0x3a44, 0x528c, 0x6a20, 0x024c,
- 0x2268, 0x5244, 0x6a8c, 0x0a20, 0x0288,
- 0x3a6a, 0x6a46, 0x0a8e, 0x2222, 0x8426,
- 0x526a, 0x0a46, 0x228e, 0x3a22, 0x8476,
- 0x6a6a, 0x2246, 0x3a8e, 0x5222, 0x0212,
- 0x0a6a, 0x3a46, 0x528e, 0x6a22, 0x024e,
- 0x226a, 0x5246, 0x6a8e, 0x0a22, 0x028a,
- 0x3e5a, 0x6e36, 0x0e7e, 0x2612, 0x822a,
- 0x565a, 0x0e36, 0x267e, 0x3e12, 0x827a,
- 0x6e5a, 0x2636, 0x3e7e, 0x5612, 0x0602,
- 0x0e5a, 0x3e36, 0x567e, 0x6e12, 0x063e,
- 0x265a, 0x5636, 0x6e7e, 0x0e12, 0x067a,
- 0x3e5c, 0x6e38, 0x0e80, 0x2614, 0x822c,
- 0x565c, 0x0e38, 0x2680, 0x3e14, 0x827c,
- 0x6e5c, 0x2638, 0x3e80, 0x5614, 0x0604,
- 0x0e5c, 0x3e38, 0x5680, 0x6e14, 0x0640,
- 0x265c, 0x5638, 0x6e80, 0x0e14, 0x067c,
- 0x3e5e, 0x6e3a, 0x0e82, 0x2616, 0x822e,
- 0x565e, 0x0e3a, 0x2682, 0x3e16, 0x827e,
- 0x6e5e, 0x263a, 0x3e82, 0x5616, 0x0606,
- 0x0e5e, 0x3e3a, 0x5682, 0x6e16, 0x0642,
- 0x265e, 0x563a, 0x6e82, 0x0e16, 0x067e,
- 0x3e60, 0x6e3c, 0x0e84, 0x2618, 0x8230,
- 0x5660, 0x0e3c, 0x2684, 0x3e18, 0x8280,
- 0x6e60, 0x263c, 0x3e84, 0x5618, 0x0608,
- 0x0e60, 0x3e3c, 0x5684, 0x6e18, 0x0644,
- 0x2660, 0x563c, 0x6e84, 0x0e18, 0x0680,
- 0x3e62, 0x6e3e, 0x0e86, 0x261a, 0x8232,
- 0x5662, 0x0e3e, 0x2686, 0x3e1a, 0x8282,
- 0x6e62, 0x263e, 0x3e86, 0x561a, 0x060a,
- 0x0e62, 0x3e3e, 0x5686, 0x6e1a, 0x0646,
- 0x2662, 0x563e, 0x6e86, 0x0e1a, 0x0682,
- 0x3e64, 0x6e40, 0x0e88, 0x261c, 0x8234,
- 0x5664, 0x0e40, 0x2688, 0x3e1c, 0x8284,
- 0x6e64, 0x2640, 0x3e88, 0x561c, 0x060c,
- 0x0e64, 0x3e40, 0x5688, 0x6e1c, 0x0648,
- 0x2664, 0x5640, 0x6e88, 0x0e1c, 0x0684,
- 0x3e66, 0x6e42, 0x0e8a, 0x261e, 0x8236,
- 0x5666, 0x0e42, 0x268a, 0x3e1e, 0x8286,
- 0x6e66, 0x2642, 0x3e8a, 0x561e, 0x060e,
- 0x0e66, 0x3e42, 0x568a, 0x6e1e, 0x064a,
- 0x2666, 0x5642, 0x6e8a, 0x0e1e, 0x0686,
- 0x3e68, 0x6e44, 0x0e8c, 0x2620, 0x8238,
- 0x5668, 0x0e44, 0x268c, 0x3e20, 0x8288,
- 0x6e68, 0x2644, 0x3e8c, 0x5620, 0x0610,
- 0x0e68, 0x3e44, 0x568c, 0x6e20, 0x064c,
- 0x2668, 0x5644, 0x6e8c, 0x0e20, 0x0688,
- 0x3e6a, 0x6e46, 0x0e8e, 0x2622, 0x823a,
- 0x566a, 0x0e46, 0x268e, 0x3e22, 0x828a,
- 0x6e6a, 0x2646, 0x3e8e, 0x5622, 0x0612,
- 0x0e6a, 0x3e46, 0x568e, 0x6e22, 0x064e,
- 0x266a, 0x5646, 0x6e8e, 0x0e22, 0x068a,
- 0x425a, 0x7236, 0x127e, 0x2a12, 0x803e,
- 0x5a5a, 0x1236, 0x2a7e, 0x4212, 0x808e,
- 0x725a, 0x2a36, 0x427e, 0x5a12, 0x0216,
- 0x125a, 0x4236, 0x5a7e, 0x7212, 0x0252,
- 0x2a5a, 0x5a36, 0x727e, 0x1212, 0x028e,
- 0x425c, 0x7238, 0x1280, 0x2a14, 0x8040,
- 0x5a5c, 0x1238, 0x2a80, 0x4214, 0x8090,
- 0x725c, 0x2a38, 0x4280, 0x5a14, 0x0218,
- 0x125c, 0x4238, 0x5a80, 0x7214, 0x0254,
- 0x2a5c, 0x5a38, 0x7280, 0x1214, 0x0290,
- 0x425e, 0x723a, 0x1282, 0x2a16, 0x8042,
- 0x5a5e, 0x123a, 0x2a82, 0x4216, 0x8092,
- 0x725e, 0x2a3a, 0x4282, 0x5a16, 0x021a,
- 0x125e, 0x423a, 0x5a82, 0x7216, 0x0256,
- 0x2a5e, 0x5a3a, 0x7282, 0x1216, 0x0292,
- 0x4260, 0x723c, 0x1284, 0x2a18, 0x8044,
- 0x5a60, 0x123c, 0x2a84, 0x4218, 0x8094,
- 0x7260, 0x2a3c, 0x4284, 0x5a18, 0x021c,
- 0x1260, 0x423c, 0x5a84, 0x7218, 0x0258,
- 0x2a60, 0x5a3c, 0x7284, 0x1218, 0x0294,
- 0x4262, 0x723e, 0x1286, 0x2a1a, 0x8046,
- 0x5a62, 0x123e, 0x2a86, 0x421a, 0x8096,
- 0x7262, 0x2a3e, 0x4286, 0x5a1a, 0x021e,
- 0x1262, 0x423e, 0x5a86, 0x721a, 0x025a,
- 0x2a62, 0x5a3e, 0x7286, 0x121a, 0x0296,
- 0x4264, 0x7240, 0x1288, 0x2a1c, 0x8048,
- 0x5a64, 0x1240, 0x2a88, 0x421c, 0x8098,
- 0x7264, 0x2a40, 0x4288, 0x5a1c, 0x0220,
- 0x1264, 0x4240, 0x5a88, 0x721c, 0x025c,
- 0x2a64, 0x5a40, 0x7288, 0x121c, 0x0298,
- 0x4266, 0x7242, 0x128a, 0x2a1e, 0x804a,
- 0x5a66, 0x1242, 0x2a8a, 0x421e, 0x809a,
- 0x7266, 0x2a42, 0x428a, 0x5a1e, 0x0222,
- 0x1266, 0x4242, 0x5a8a, 0x721e, 0x025e,
- 0x2a66, 0x5a42, 0x728a, 0x121e, 0x029a,
- 0x4268, 0x7244, 0x128c, 0x2a20, 0x804c,
- 0x5a68, 0x1244, 0x2a8c, 0x4220, 0x809c,
- 0x7268, 0x2a44, 0x428c, 0x5a20, 0x0224,
- 0x1268, 0x4244, 0x5a8c, 0x7220, 0x0260,
- 0x2a68, 0x5a44, 0x728c, 0x1220, 0x029c,
- 0x426a, 0x7246, 0x128e, 0x2a22, 0x804e,
- 0x5a6a, 0x1246, 0x2a8e, 0x4222, 0x809e,
- 0x726a, 0x2a46, 0x428e, 0x5a22, 0x0226,
- 0x126a, 0x4246, 0x5a8e, 0x7222, 0x0262,
- 0x2a6a, 0x5a46, 0x728e, 0x1222, 0x029e,
- 0x465a, 0x7636, 0x167e, 0x2e12, 0x843e,
- 0x5e5a, 0x1636, 0x2e7e, 0x4612, 0x848e,
- 0x765a, 0x2e36, 0x467e, 0x5e12, 0x0616,
- 0x165a, 0x4636, 0x5e7e, 0x7612, 0x0652,
- 0x2e5a, 0x5e36, 0x767e, 0x1612, 0x068e,
- 0x465c, 0x7638, 0x1680, 0x2e14, 0x8440,
- 0x5e5c, 0x1638, 0x2e80, 0x4614, 0x8490,
- 0x765c, 0x2e38, 0x4680, 0x5e14, 0x0618,
- 0x165c, 0x4638, 0x5e80, 0x7614, 0x0654,
- 0x2e5c, 0x5e38, 0x7680, 0x1614, 0x0690,
- 0x465e, 0x763a, 0x1682, 0x2e16, 0x8442,
- 0x5e5e, 0x163a, 0x2e82, 0x4616, 0x8492,
- 0x765e, 0x2e3a, 0x4682, 0x5e16, 0x061a,
- 0x165e, 0x463a, 0x5e82, 0x7616, 0x0656,
- 0x2e5e, 0x5e3a, 0x7682, 0x1616, 0x0692,
- 0x4660, 0x763c, 0x1684, 0x2e18, 0x8444,
- 0x5e60, 0x163c, 0x2e84, 0x4618, 0x8494,
- 0x7660, 0x2e3c, 0x4684, 0x5e18, 0x061c,
- 0x1660, 0x463c, 0x5e84, 0x7618, 0x0658,
- 0x2e60, 0x5e3c, 0x7684, 0x1618, 0x0694,
- 0x4662, 0x763e, 0x1686, 0x2e1a, 0x8446,
- 0x5e62, 0x163e, 0x2e86, 0x461a, 0x8496,
- 0x7662, 0x2e3e, 0x4686, 0x5e1a, 0x061e,
- 0x1662, 0x463e, 0x5e86, 0x761a, 0x065a,
- 0x2e62, 0x5e3e, 0x7686, 0x161a, 0x0696,
- 0x4664, 0x7640, 0x1688, 0x2e1c, 0x8448,
- 0x5e64, 0x1640, 0x2e88, 0x461c, 0x8498,
- 0x7664, 0x2e40, 0x4688, 0x5e1c, 0x0620,
- 0x1664, 0x4640, 0x5e88, 0x761c, 0x065c,
- 0x2e64, 0x5e40, 0x7688, 0x161c, 0x0698,
- 0x4666, 0x7642, 0x168a, 0x2e1e, 0x844a,
- 0x5e66, 0x1642, 0x2e8a, 0x461e, 0x849a,
- 0x7666, 0x2e42, 0x468a, 0x5e1e, 0x0622,
- 0x1666, 0x4642, 0x5e8a, 0x761e, 0x065e,
- 0x2e66, 0x5e42, 0x768a, 0x161e, 0x069a,
- 0x4668, 0x7644, 0x168c, 0x2e20, 0x844c,
- 0x5e68, 0x1644, 0x2e8c, 0x4620, 0x849c,
- 0x7668, 0x2e44, 0x468c, 0x5e20, 0x0624,
- 0x1668, 0x4644, 0x5e8c, 0x7620, 0x0660,
- 0x2e68, 0x5e44, 0x768c, 0x1620, 0x069c,
- 0x466a, 0x7646, 0x168e, 0x2e22, 0x844e,
- 0x5e6a, 0x1646, 0x2e8e, 0x4622, 0x849e,
- 0x766a, 0x2e46, 0x468e, 0x5e22, 0x0626,
- 0x166a, 0x4646, 0x5e8e, 0x7622, 0x0662,
- 0x2e6a, 0x5e46, 0x768e, 0x1622, 0x069e,
- 0x4a5a, 0x7a36, 0x1a7e, 0x3212, 0x8252,
- 0x625a, 0x1a36, 0x327e, 0x4a12, 0x862c,
- 0x7a5a, 0x3236, 0x4a7e, 0x6212, 0x022a,
- 0x1a5a, 0x4a36, 0x627e, 0x7a12, 0x0266,
- 0x325a, 0x6236, 0x7a7e, 0x1a12, 0x8202,
- 0x4a5c, 0x7a38, 0x1a80, 0x3214, 0x8254,
- 0x625c, 0x1a38, 0x3280, 0x4a14, 0x8630,
- 0x7a5c, 0x3238, 0x4a80, 0x6214, 0x022c,
- 0x1a5c, 0x4a38, 0x6280, 0x7a14, 0x0268,
- 0x325c, 0x6238, 0x7a80, 0x1a14, 0x8204,
- 0x4a5e, 0x7a3a, 0x1a82, 0x3216, 0x8256,
- 0x625e, 0x1a3a, 0x3282, 0x4a16, 0x8634,
- 0x7a5e, 0x323a, 0x4a82, 0x6216, 0x022e,
- 0x1a5e, 0x4a3a, 0x6282, 0x7a16, 0x026a,
- 0x325e, 0x623a, 0x7a82, 0x1a16, 0x8206,
- 0x4a60, 0x7a3c, 0x1a84, 0x3218, 0x8258,
- 0x6260, 0x1a3c, 0x3284, 0x4a18, 0x8638,
- 0x7a60, 0x323c, 0x4a84, 0x6218, 0x0230,
- 0x1a60, 0x4a3c, 0x6284, 0x7a18, 0x026c,
- 0x3260, 0x623c, 0x7a84, 0x1a18, 0x8208,
- 0x4a62, 0x7a3e, 0x1a86, 0x321a, 0x825a,
- 0x6262, 0x1a3e, 0x3286, 0x4a1a, 0x863c,
- 0x7a62, 0x323e, 0x4a86, 0x621a, 0x0232,
- 0x1a62, 0x4a3e, 0x6286, 0x7a1a, 0x026e,
- 0x3262, 0x623e, 0x7a86, 0x1a1a, 0x820a,
- 0x4a64, 0x7a40, 0x1a88, 0x321c, 0x825c,
- 0x6264, 0x1a40, 0x3288, 0x4a1c, 0x8640,
- 0x7a64, 0x3240, 0x4a88, 0x621c, 0x0234,
- 0x1a64, 0x4a40, 0x6288, 0x7a1c, 0x0270,
- 0x3264, 0x6240, 0x7a88, 0x1a1c, 0x820c,
- 0x4a66, 0x7a42, 0x1a8a, 0x321e, 0x825e,
- 0x6266, 0x1a42, 0x328a, 0x4a1e, 0x8644,
- 0x7a66, 0x3242, 0x4a8a, 0x621e, 0x0236,
- 0x1a66, 0x4a42, 0x628a, 0x7a1e, 0x0272,
- 0x3266, 0x6242, 0x7a8a, 0x1a1e, 0x820e,
- 0x4a68, 0x7a44, 0x1a8c, 0x3220, 0x8260,
- 0x6268, 0x1a44, 0x328c, 0x4a20, 0x8648,
- 0x7a68, 0x3244, 0x4a8c, 0x6220, 0x0238,
- 0x1a68, 0x4a44, 0x628c, 0x7a20, 0x0274,
- 0x3268, 0x6244, 0x7a8c, 0x1a20, 0x8210,
- 0x4a6a, 0x7a46, 0x1a8e, 0x3222, 0x8262,
- 0x626a, 0x1a46, 0x328e, 0x4a22, 0x864c,
- 0x7a6a, 0x3246, 0x4a8e, 0x6222, 0x023a,
- 0x1a6a, 0x4a46, 0x628e, 0x7a22, 0x0276,
- 0x326a, 0x6246, 0x7a8e, 0x1a22, 0x8212,
- 0x4e5a, 0x7e36, 0x1e7e, 0x3612, 0x8066,
- 0x665a, 0x1e36, 0x367e, 0x4e12, 0x867c,
- 0x7e5a, 0x3636, 0x4e7e, 0x6612, 0x062a,
- 0x1e5a, 0x4e36, 0x667e, 0x7e12, 0x0666,
- 0x365a, 0x6636, 0x7e7e, 0x1e12, 0x8016,
- 0x4e5c, 0x7e38, 0x1e80, 0x3614, 0x8068,
- 0x665c, 0x1e38, 0x3680, 0x4e14, 0x8680,
- 0x7e5c, 0x3638, 0x4e80, 0x6614, 0x062c,
- 0x1e5c, 0x4e38, 0x6680, 0x7e14, 0x0668,
- 0x365c, 0x6638, 0x7e80, 0x1e14, 0x8018,
- 0x4e5e, 0x7e3a, 0x1e82, 0x3616, 0x806a,
- 0x665e, 0x1e3a, 0x3682, 0x4e16, 0x8684,
- 0x7e5e, 0x363a, 0x4e82, 0x6616, 0x062e,
- 0x1e5e, 0x4e3a, 0x6682, 0x7e16, 0x066a,
- 0x365e, 0x663a, 0x7e82, 0x1e16, 0x801a,
- 0x4e60, 0x7e3c, 0x1e84, 0x3618, 0x806c,
- 0x6660, 0x1e3c, 0x3684, 0x4e18, 0x8688,
- 0x7e60, 0x363c, 0x4e84, 0x6618, 0x0630,
- 0x1e60, 0x4e3c, 0x6684, 0x7e18, 0x066c,
- 0x3660, 0x663c, 0x7e84, 0x1e18, 0x801c,
- 0x4e62, 0x7e3e, 0x1e86, 0x361a, 0x806e,
- 0x6662, 0x1e3e, 0x3686, 0x4e1a, 0x868c,
- 0x7e62, 0x363e, 0x4e86, 0x661a, 0x0632,
- 0x1e62, 0x4e3e, 0x6686, 0x7e1a, 0x066e,
- 0x3662, 0x663e, 0x7e86, 0x1e1a, 0x801e,
- 0x4e64, 0x7e40, 0x1e88, 0x361c, 0x8070,
- 0x6664, 0x1e40, 0x3688, 0x4e1c, 0x8690,
- 0x7e64, 0x3640, 0x4e88, 0x661c, 0x0634,
- 0x1e64, 0x4e40, 0x6688, 0x7e1c, 0x0670,
- 0x3664, 0x6640, 0x7e88, 0x1e1c, 0x8020,
- 0x4e66, 0x7e42, 0x1e8a, 0x361e, 0x8072,
- 0x6666, 0x1e42, 0x368a, 0x4e1e, 0x8694,
- 0x7e66, 0x3642, 0x4e8a, 0x661e, 0x0636,
- 0x1e66, 0x4e42, 0x668a, 0x7e1e, 0x0672,
- 0x3666, 0x6642, 0x7e8a, 0x1e1e, 0x8022,
- 0x4e68, 0x7e44, 0x1e8c, 0x3620, 0x8074,
- 0x6668, 0x1e44, 0x368c, 0x4e20, 0x8698,
- 0x7e68, 0x3644, 0x4e8c, 0x6620, 0x0638,
- 0x1e68, 0x4e44, 0x668c, 0x7e20, 0x0674,
- 0x3668, 0x6644, 0x7e8c, 0x1e20, 0x8024,
- 0x4e6a, 0x7e46, 0x1e8e, 0x3622, 0x8076,
- 0x666a, 0x1e46, 0x368e, 0x4e22, 0x869c,
- 0x7e6a, 0x3646, 0x4e8e, 0x6622, 0x063a,
- 0x1e6a, 0x4e46, 0x668e, 0x7e22, 0x0676,
- 0x366a, 0x6646, 0x7e8e, 0x1e22, 0x8026,
-};
-
-static const uint16_t dv_place_1080i50[4*12*27*5] = {
- 0x1a48, 0x4a24, 0x626c, 0x0200, 0x3290,
- 0x2648, 0x5624, 0x6e6c, 0x0e00, 0x3e90,
- 0x3248, 0x6224, 0x7a6c, 0x1a00, 0x4a90,
- 0x3e48, 0x6e24, 0x026c, 0x2600, 0x5690,
- 0x4a48, 0x7a24, 0x0e6c, 0x3200, 0x6290,
- 0x5648, 0x0224, 0x1a6c, 0x3e00, 0x6e90,
- 0x6248, 0x0e24, 0x266c, 0x4a00, 0x7a90,
- 0x6e48, 0x1a24, 0x326c, 0x5600, 0x0290,
- 0x7a48, 0x2624, 0x3e6c, 0x6200, 0x0e90,
- 0x0248, 0x3224, 0x4a6c, 0x6e00, 0x1a90,
- 0x0e48, 0x3e24, 0x566c, 0x7a00, 0x2690,
- 0x1a4a, 0x4a26, 0x626e, 0x0202, 0x3292,
- 0x264a, 0x5626, 0x6e6e, 0x0e02, 0x3e92,
- 0x324a, 0x6226, 0x7a6e, 0x1a02, 0x4a92,
- 0x3e4a, 0x6e26, 0x026e, 0x2602, 0x5692,
- 0x4a4a, 0x7a26, 0x0e6e, 0x3202, 0x6292,
- 0x564a, 0x0226, 0x1a6e, 0x3e02, 0x6e92,
- 0x624a, 0x0e26, 0x266e, 0x4a02, 0x7a92,
- 0x6e4a, 0x1a26, 0x326e, 0x5602, 0x0292,
- 0x7a4a, 0x2626, 0x3e6e, 0x6202, 0x0e92,
- 0x024a, 0x3226, 0x4a6e, 0x6e02, 0x1a92,
- 0x0e4a, 0x3e26, 0x566e, 0x7a02, 0x2692,
- 0x1a4c, 0x4a28, 0x6270, 0x0204, 0x3294,
- 0x264c, 0x5628, 0x6e70, 0x0e04, 0x3e94,
- 0x324c, 0x6228, 0x7a70, 0x1a04, 0x4a94,
- 0x3e4c, 0x6e28, 0x0270, 0x2604, 0x5694,
- 0x4a4c, 0x7a28, 0x0e70, 0x3204, 0x6294,
- 0x564c, 0x0228, 0x1a70, 0x3e04, 0x6e94,
- 0x624c, 0x0e28, 0x2670, 0x4a04, 0x7a94,
- 0x6e4c, 0x1a28, 0x3270, 0x5604, 0x0294,
- 0x7a4c, 0x2628, 0x3e70, 0x6204, 0x0e94,
- 0x024c, 0x3228, 0x4a70, 0x6e04, 0x1a94,
- 0x0e4c, 0x3e28, 0x5670, 0x7a04, 0x2694,
- 0x1a4e, 0x4a2a, 0x6272, 0x0206, 0x3296,
- 0x264e, 0x562a, 0x6e72, 0x0e06, 0x3e96,
- 0x324e, 0x622a, 0x7a72, 0x1a06, 0x4a96,
- 0x3e4e, 0x6e2a, 0x0272, 0x2606, 0x5696,
- 0x4a4e, 0x7a2a, 0x0e72, 0x3206, 0x6296,
- 0x564e, 0x022a, 0x1a72, 0x3e06, 0x6e96,
- 0x624e, 0x0e2a, 0x2672, 0x4a06, 0x7a96,
- 0x6e4e, 0x1a2a, 0x3272, 0x5606, 0x0296,
- 0x7a4e, 0x262a, 0x3e72, 0x6206, 0x0e96,
- 0x024e, 0x322a, 0x4a72, 0x6e06, 0x1a96,
- 0x0e4e, 0x3e2a, 0x5672, 0x7a06, 0x2696,
- 0x1a50, 0x4a2c, 0x6274, 0x0208, 0x3298,
- 0x2650, 0x562c, 0x6e74, 0x0e08, 0x3e98,
- 0x3250, 0x622c, 0x7a74, 0x1a08, 0x4a98,
- 0x3e50, 0x6e2c, 0x0274, 0x2608, 0x5698,
- 0x4a50, 0x7a2c, 0x0e74, 0x3208, 0x6298,
- 0x5650, 0x022c, 0x1a74, 0x3e08, 0x6e98,
- 0x6250, 0x0e2c, 0x2674, 0x4a08, 0x7a98,
- 0x6e50, 0x1a2c, 0x3274, 0x5608, 0x0298,
- 0x7a50, 0x262c, 0x3e74, 0x6208, 0x0e98,
- 0x0250, 0x322c, 0x4a74, 0x6e08, 0x1a98,
- 0x0e50, 0x3e2c, 0x5674, 0x7a08, 0x2698,
- 0x1a52, 0x4a2e, 0x6276, 0x020a, 0x329a,
- 0x2652, 0x562e, 0x6e76, 0x0e0a, 0x3e9a,
- 0x3252, 0x622e, 0x7a76, 0x1a0a, 0x4a9a,
- 0x3e52, 0x6e2e, 0x0276, 0x260a, 0x569a,
- 0x4a52, 0x7a2e, 0x0e76, 0x320a, 0x629a,
- 0x5652, 0x022e, 0x1a76, 0x3e0a, 0x6e9a,
- 0x6252, 0x0e2e, 0x2676, 0x4a0a, 0x7a9a,
- 0x6e52, 0x1a2e, 0x3276, 0x560a, 0x029a,
- 0x7a52, 0x262e, 0x3e76, 0x620a, 0x0e9a,
- 0x0252, 0x322e, 0x4a76, 0x6e0a, 0x1a9a,
- 0x0e52, 0x3e2e, 0x5676, 0x7a0a, 0x269a,
- 0x1a54, 0x4a30, 0x6278, 0x020c, 0x329c,
- 0x2654, 0x5630, 0x6e78, 0x0e0c, 0x3e9c,
- 0x3254, 0x6230, 0x7a78, 0x1a0c, 0x4a9c,
- 0x3e54, 0x6e30, 0x0278, 0x260c, 0x569c,
- 0x4a54, 0x7a30, 0x0e78, 0x320c, 0x629c,
- 0x5654, 0x0230, 0x1a78, 0x3e0c, 0x6e9c,
- 0x6254, 0x0e30, 0x2678, 0x4a0c, 0x7a9c,
- 0x6e54, 0x1a30, 0x3278, 0x560c, 0x029c,
- 0x7a54, 0x2630, 0x3e78, 0x620c, 0x0e9c,
- 0x0254, 0x3230, 0x4a78, 0x6e0c, 0x1a9c,
- 0x0e54, 0x3e30, 0x5678, 0x7a0c, 0x269c,
- 0x1a56, 0x4a32, 0x627a, 0x020e, 0x329e,
- 0x2656, 0x5632, 0x6e7a, 0x0e0e, 0x3e9e,
- 0x3256, 0x6232, 0x7a7a, 0x1a0e, 0x4a9e,
- 0x3e56, 0x6e32, 0x027a, 0x260e, 0x569e,
- 0x4a56, 0x7a32, 0x0e7a, 0x320e, 0x629e,
- 0x5656, 0x0232, 0x1a7a, 0x3e0e, 0x6e9e,
- 0x6256, 0x0e32, 0x267a, 0x4a0e, 0x7a9e,
- 0x6e56, 0x1a32, 0x327a, 0x560e, 0x029e,
- 0x7a56, 0x2632, 0x3e7a, 0x620e, 0x0e9e,
- 0x0256, 0x3232, 0x4a7a, 0x6e0e, 0x1a9e,
- 0x0e56, 0x3e32, 0x567a, 0x7a0e, 0x269e,
- 0x1a58, 0x4a34, 0x627c, 0x0210, 0x32a0,
- 0x2658, 0x5634, 0x6e7c, 0x0e10, 0x3ea0,
- 0x3258, 0x6234, 0x7a7c, 0x1a10, 0x4aa0,
- 0x3e58, 0x6e34, 0x027c, 0x2610, 0x56a0,
- 0x4a58, 0x7a34, 0x0e7c, 0x3210, 0x62a0,
- 0x5658, 0x0234, 0x1a7c, 0x3e10, 0x6ea0,
- 0x6258, 0x0e34, 0x267c, 0x4a10, 0x7aa0,
- 0x6e58, 0x1a34, 0x327c, 0x5610, 0x02a0,
- 0x7a58, 0x2634, 0x3e7c, 0x6210, 0x0ea0,
- 0x0258, 0x3234, 0x4a7c, 0x6e10, 0x1aa0,
- 0x0e58, 0x3e34, 0x567c, 0x7a10, 0x26a0,
- 0x1e48, 0x4e24, 0x666c, 0x0600, 0x3690,
- 0x2a48, 0x5a24, 0x726c, 0x1200, 0x4290,
- 0x3648, 0x6624, 0x7e6c, 0x1e00, 0x4e90,
- 0x4248, 0x7224, 0x066c, 0x2a00, 0x5a90,
- 0x4e48, 0x7e24, 0x126c, 0x3600, 0x6690,
- 0x5a48, 0x0624, 0x1e6c, 0x4200, 0x7290,
- 0x6648, 0x1224, 0x2a6c, 0x4e00, 0x7e90,
- 0x7248, 0x1e24, 0x366c, 0x5a00, 0x0690,
- 0x7e48, 0x2a24, 0x426c, 0x6600, 0x1290,
- 0x0648, 0x3624, 0x4e6c, 0x7200, 0x1e90,
- 0x1248, 0x4224, 0x5a6c, 0x7e00, 0x2a90,
- 0x1e4a, 0x4e26, 0x666e, 0x0602, 0x3692,
- 0x2a4a, 0x5a26, 0x726e, 0x1202, 0x4292,
- 0x364a, 0x6626, 0x7e6e, 0x1e02, 0x4e92,
- 0x424a, 0x7226, 0x066e, 0x2a02, 0x5a92,
- 0x4e4a, 0x7e26, 0x126e, 0x3602, 0x6692,
- 0x5a4a, 0x0626, 0x1e6e, 0x4202, 0x7292,
- 0x664a, 0x1226, 0x2a6e, 0x4e02, 0x7e92,
- 0x724a, 0x1e26, 0x366e, 0x5a02, 0x0692,
- 0x7e4a, 0x2a26, 0x426e, 0x6602, 0x1292,
- 0x064a, 0x3626, 0x4e6e, 0x7202, 0x1e92,
- 0x124a, 0x4226, 0x5a6e, 0x7e02, 0x2a92,
- 0x1e4c, 0x4e28, 0x6670, 0x0604, 0x3694,
- 0x2a4c, 0x5a28, 0x7270, 0x1204, 0x4294,
- 0x364c, 0x6628, 0x7e70, 0x1e04, 0x4e94,
- 0x424c, 0x7228, 0x0670, 0x2a04, 0x5a94,
- 0x4e4c, 0x7e28, 0x1270, 0x3604, 0x6694,
- 0x5a4c, 0x0628, 0x1e70, 0x4204, 0x7294,
- 0x664c, 0x1228, 0x2a70, 0x4e04, 0x7e94,
- 0x724c, 0x1e28, 0x3670, 0x5a04, 0x0694,
- 0x7e4c, 0x2a28, 0x4270, 0x6604, 0x1294,
- 0x064c, 0x3628, 0x4e70, 0x7204, 0x1e94,
- 0x124c, 0x4228, 0x5a70, 0x7e04, 0x2a94,
- 0x1e4e, 0x4e2a, 0x6672, 0x0606, 0x3696,
- 0x2a4e, 0x5a2a, 0x7272, 0x1206, 0x4296,
- 0x364e, 0x662a, 0x7e72, 0x1e06, 0x4e96,
- 0x424e, 0x722a, 0x0672, 0x2a06, 0x5a96,
- 0x4e4e, 0x7e2a, 0x1272, 0x3606, 0x6696,
- 0x5a4e, 0x062a, 0x1e72, 0x4206, 0x7296,
- 0x664e, 0x122a, 0x2a72, 0x4e06, 0x7e96,
- 0x724e, 0x1e2a, 0x3672, 0x5a06, 0x0696,
- 0x7e4e, 0x2a2a, 0x4272, 0x6606, 0x1296,
- 0x064e, 0x362a, 0x4e72, 0x7206, 0x1e96,
- 0x124e, 0x422a, 0x5a72, 0x7e06, 0x2a96,
- 0x1e50, 0x4e2c, 0x6674, 0x0608, 0x3698,
- 0x2a50, 0x5a2c, 0x7274, 0x1208, 0x4298,
- 0x3650, 0x662c, 0x7e74, 0x1e08, 0x4e98,
- 0x4250, 0x722c, 0x0674, 0x2a08, 0x5a98,
- 0x4e50, 0x7e2c, 0x1274, 0x3608, 0x6698,
- 0x5a50, 0x062c, 0x1e74, 0x4208, 0x7298,
- 0x6650, 0x122c, 0x2a74, 0x4e08, 0x7e98,
- 0x7250, 0x1e2c, 0x3674, 0x5a08, 0x0698,
- 0x7e50, 0x2a2c, 0x4274, 0x6608, 0x1298,
- 0x0650, 0x362c, 0x4e74, 0x7208, 0x1e98,
- 0x1250, 0x422c, 0x5a74, 0x7e08, 0x2a98,
- 0x1e52, 0x4e2e, 0x6676, 0x060a, 0x369a,
- 0x2a52, 0x5a2e, 0x7276, 0x120a, 0x429a,
- 0x3652, 0x662e, 0x7e76, 0x1e0a, 0x4e9a,
- 0x4252, 0x722e, 0x0676, 0x2a0a, 0x5a9a,
- 0x4e52, 0x7e2e, 0x1276, 0x360a, 0x669a,
- 0x5a52, 0x062e, 0x1e76, 0x420a, 0x729a,
- 0x6652, 0x122e, 0x2a76, 0x4e0a, 0x7e9a,
- 0x7252, 0x1e2e, 0x3676, 0x5a0a, 0x069a,
- 0x7e52, 0x2a2e, 0x4276, 0x660a, 0x129a,
- 0x0652, 0x362e, 0x4e76, 0x720a, 0x1e9a,
- 0x1252, 0x422e, 0x5a76, 0x7e0a, 0x2a9a,
- 0x1e54, 0x4e30, 0x6678, 0x060c, 0x369c,
- 0x2a54, 0x5a30, 0x7278, 0x120c, 0x429c,
- 0x3654, 0x6630, 0x7e78, 0x1e0c, 0x4e9c,
- 0x4254, 0x7230, 0x0678, 0x2a0c, 0x5a9c,
- 0x4e54, 0x7e30, 0x1278, 0x360c, 0x669c,
- 0x5a54, 0x0630, 0x1e78, 0x420c, 0x729c,
- 0x6654, 0x1230, 0x2a78, 0x4e0c, 0x7e9c,
- 0x7254, 0x1e30, 0x3678, 0x5a0c, 0x069c,
- 0x7e54, 0x2a30, 0x4278, 0x660c, 0x129c,
- 0x0654, 0x3630, 0x4e78, 0x720c, 0x1e9c,
- 0x1254, 0x4230, 0x5a78, 0x7e0c, 0x2a9c,
- 0x1e56, 0x4e32, 0x667a, 0x060e, 0x369e,
- 0x2a56, 0x5a32, 0x727a, 0x120e, 0x429e,
- 0x3656, 0x6632, 0x7e7a, 0x1e0e, 0x4e9e,
- 0x4256, 0x7232, 0x067a, 0x2a0e, 0x5a9e,
- 0x4e56, 0x7e32, 0x127a, 0x360e, 0x669e,
- 0x5a56, 0x0632, 0x1e7a, 0x420e, 0x729e,
- 0x6656, 0x1232, 0x2a7a, 0x4e0e, 0x7e9e,
- 0x7256, 0x1e32, 0x367a, 0x5a0e, 0x069e,
- 0x7e56, 0x2a32, 0x427a, 0x660e, 0x129e,
- 0x0656, 0x3632, 0x4e7a, 0x720e, 0x1e9e,
- 0x1256, 0x4232, 0x5a7a, 0x7e0e, 0x2a9e,
- 0x1e58, 0x4e34, 0x667c, 0x0610, 0x36a0,
- 0x2a58, 0x5a34, 0x727c, 0x1210, 0x42a0,
- 0x3658, 0x6634, 0x7e7c, 0x1e10, 0x4ea0,
- 0x4258, 0x7234, 0x067c, 0x2a10, 0x5aa0,
- 0x4e58, 0x7e34, 0x127c, 0x3610, 0x66a0,
- 0x5a58, 0x0634, 0x1e7c, 0x4210, 0x72a0,
- 0x6658, 0x1234, 0x2a7c, 0x4e10, 0x7ea0,
- 0x7258, 0x1e34, 0x367c, 0x5a10, 0x06a0,
- 0x7e58, 0x2a34, 0x427c, 0x6610, 0x12a0,
- 0x0658, 0x3634, 0x4e7c, 0x7210, 0x1ea0,
- 0x1258, 0x4234, 0x5a7c, 0x7e10, 0x2aa0,
- 0x2248, 0x5224, 0x6a6c, 0x0a00, 0x3a90,
- 0x2e48, 0x5e24, 0x766c, 0x1600, 0x4690,
- 0x3a48, 0x6a24, 0x826c, 0x2200, 0x5290,
- 0x4648, 0x7624, 0x0a6c, 0x2e00, 0x5e90,
- 0x5248, 0x8224, 0x166c, 0x3a00, 0x6a90,
- 0x5e48, 0x0a24, 0x226c, 0x4600, 0x7690,
- 0x6a48, 0x1624, 0x2e6c, 0x5200, 0x8290,
- 0x7648, 0x2224, 0x3a6c, 0x5e00, 0x0a90,
- 0x8248, 0x2e24, 0x466c, 0x6a00, 0x1690,
- 0x0a48, 0x3a24, 0x526c, 0x7600, 0x2290,
- 0x1648, 0x4624, 0x5e6c, 0x8200, 0x2e90,
- 0x224a, 0x5226, 0x6a6e, 0x0a02, 0x3a92,
- 0x2e4a, 0x5e26, 0x766e, 0x1602, 0x4692,
- 0x3a4a, 0x6a26, 0x826e, 0x2202, 0x5292,
- 0x464a, 0x7626, 0x0a6e, 0x2e02, 0x5e92,
- 0x524a, 0x8226, 0x166e, 0x3a02, 0x6a92,
- 0x5e4a, 0x0a26, 0x226e, 0x4602, 0x7692,
- 0x6a4a, 0x1626, 0x2e6e, 0x5202, 0x8292,
- 0x764a, 0x2226, 0x3a6e, 0x5e02, 0x0a92,
- 0x824a, 0x2e26, 0x466e, 0x6a02, 0x1692,
- 0x0a4a, 0x3a26, 0x526e, 0x7602, 0x2292,
- 0x164a, 0x4626, 0x5e6e, 0x8202, 0x2e92,
- 0x224c, 0x5228, 0x6a70, 0x0a04, 0x3a94,
- 0x2e4c, 0x5e28, 0x7670, 0x1604, 0x4694,
- 0x3a4c, 0x6a28, 0x8270, 0x2204, 0x5294,
- 0x464c, 0x7628, 0x0a70, 0x2e04, 0x5e94,
- 0x524c, 0x8228, 0x1670, 0x3a04, 0x6a94,
- 0x5e4c, 0x0a28, 0x2270, 0x4604, 0x7694,
- 0x6a4c, 0x1628, 0x2e70, 0x5204, 0x8294,
- 0x764c, 0x2228, 0x3a70, 0x5e04, 0x0a94,
- 0x824c, 0x2e28, 0x4670, 0x6a04, 0x1694,
- 0x0a4c, 0x3a28, 0x5270, 0x7604, 0x2294,
- 0x164c, 0x4628, 0x5e70, 0x8204, 0x2e94,
- 0x224e, 0x522a, 0x6a72, 0x0a06, 0x3a96,
- 0x2e4e, 0x5e2a, 0x7672, 0x1606, 0x4696,
- 0x3a4e, 0x6a2a, 0x8272, 0x2206, 0x5296,
- 0x464e, 0x762a, 0x0a72, 0x2e06, 0x5e96,
- 0x524e, 0x822a, 0x1672, 0x3a06, 0x6a96,
- 0x5e4e, 0x0a2a, 0x2272, 0x4606, 0x7696,
- 0x6a4e, 0x162a, 0x2e72, 0x5206, 0x8296,
- 0x764e, 0x222a, 0x3a72, 0x5e06, 0x0a96,
- 0x824e, 0x2e2a, 0x4672, 0x6a06, 0x1696,
- 0x0a4e, 0x3a2a, 0x5272, 0x7606, 0x2296,
- 0x164e, 0x462a, 0x5e72, 0x8206, 0x2e96,
- 0x2250, 0x522c, 0x6a74, 0x0a08, 0x3a98,
- 0x2e50, 0x5e2c, 0x7674, 0x1608, 0x4698,
- 0x3a50, 0x6a2c, 0x8274, 0x2208, 0x5298,
- 0x4650, 0x762c, 0x0a74, 0x2e08, 0x5e98,
- 0x5250, 0x822c, 0x1674, 0x3a08, 0x6a98,
- 0x5e50, 0x0a2c, 0x2274, 0x4608, 0x7698,
- 0x6a50, 0x162c, 0x2e74, 0x5208, 0x8298,
- 0x7650, 0x222c, 0x3a74, 0x5e08, 0x0a98,
- 0x8250, 0x2e2c, 0x4674, 0x6a08, 0x1698,
- 0x0a50, 0x3a2c, 0x5274, 0x7608, 0x2298,
- 0x1650, 0x462c, 0x5e74, 0x8208, 0x2e98,
- 0x2252, 0x522e, 0x6a76, 0x0a0a, 0x3a9a,
- 0x2e52, 0x5e2e, 0x7676, 0x160a, 0x469a,
- 0x3a52, 0x6a2e, 0x8276, 0x220a, 0x529a,
- 0x4652, 0x762e, 0x0a76, 0x2e0a, 0x5e9a,
- 0x5252, 0x822e, 0x1676, 0x3a0a, 0x6a9a,
- 0x5e52, 0x0a2e, 0x2276, 0x460a, 0x769a,
- 0x6a52, 0x162e, 0x2e76, 0x520a, 0x829a,
- 0x7652, 0x222e, 0x3a76, 0x5e0a, 0x0a9a,
- 0x8252, 0x2e2e, 0x4676, 0x6a0a, 0x169a,
- 0x0a52, 0x3a2e, 0x5276, 0x760a, 0x229a,
- 0x1652, 0x462e, 0x5e76, 0x820a, 0x2e9a,
- 0x2254, 0x5230, 0x6a78, 0x0a0c, 0x3a9c,
- 0x2e54, 0x5e30, 0x7678, 0x160c, 0x469c,
- 0x3a54, 0x6a30, 0x8278, 0x220c, 0x529c,
- 0x4654, 0x7630, 0x0a78, 0x2e0c, 0x5e9c,
- 0x5254, 0x8230, 0x1678, 0x3a0c, 0x6a9c,
- 0x5e54, 0x0a30, 0x2278, 0x460c, 0x769c,
- 0x6a54, 0x1630, 0x2e78, 0x520c, 0x829c,
- 0x7654, 0x2230, 0x3a78, 0x5e0c, 0x0a9c,
- 0x8254, 0x2e30, 0x4678, 0x6a0c, 0x169c,
- 0x0a54, 0x3a30, 0x5278, 0x760c, 0x229c,
- 0x1654, 0x4630, 0x5e78, 0x820c, 0x2e9c,
- 0x2256, 0x5232, 0x6a7a, 0x0a0e, 0x3a9e,
- 0x2e56, 0x5e32, 0x767a, 0x160e, 0x469e,
- 0x3a56, 0x6a32, 0x827a, 0x220e, 0x529e,
- 0x4656, 0x7632, 0x0a7a, 0x2e0e, 0x5e9e,
- 0x5256, 0x8232, 0x167a, 0x3a0e, 0x6a9e,
- 0x5e56, 0x0a32, 0x227a, 0x460e, 0x769e,
- 0x6a56, 0x1632, 0x2e7a, 0x520e, 0x829e,
- 0x7656, 0x2232, 0x3a7a, 0x5e0e, 0x0a9e,
- 0x8256, 0x2e32, 0x467a, 0x6a0e, 0x169e,
- 0x0a56, 0x3a32, 0x527a, 0x760e, 0x229e,
- 0x1656, 0x4632, 0x5e7a, 0x820e, 0x2e9e,
- 0x2258, 0x5234, 0x6a7c, 0x0a10, 0x3aa0,
- 0x2e58, 0x5e34, 0x767c, 0x1610, 0x46a0,
- 0x3a58, 0x6a34, 0x827c, 0x2210, 0x52a0,
- 0x4658, 0x7634, 0x0a7c, 0x2e10, 0x5ea0,
- 0x5258, 0x8234, 0x167c, 0x3a10, 0x6aa0,
- 0x5e58, 0x0a34, 0x227c, 0x4610, 0x76a0,
- 0x6a58, 0x1634, 0x2e7c, 0x5210, 0x82a0,
- 0x7658, 0x2234, 0x3a7c, 0x5e10, 0x0aa0,
- 0x8258, 0x2e34, 0x467c, 0x6a10, 0x16a0,
- 0x0a58, 0x3a34, 0x527c, 0x7610, 0x22a0,
- 0x1658, 0x4634, 0x5e7c, 0x8210, 0x2ea0,
- 0x0000, 0x0036, 0x006c, 0x00a2, 0x8648,
- 0x0002, 0x0038, 0x006e, 0x00a4, 0x864c,
- 0x0004, 0x003a, 0x0070, 0x00a6, 0x8650,
- 0x0006, 0x003c, 0x0072, 0x00a8, 0x8654,
- 0x0008, 0x003e, 0x0074, 0x00aa, 0x8658,
- 0x000a, 0x0040, 0x0076, 0x00ac, 0x865c,
- 0x000c, 0x0042, 0x0078, 0x00ae, 0x8660,
- 0x000e, 0x0044, 0x007a, 0x00b0, 0x8664,
- 0x0010, 0x0046, 0x007c, 0x00b2, 0x8668,
- 0x0012, 0x0048, 0x007e, 0x8600, 0x866c,
- 0x0014, 0x004a, 0x0080, 0x8604, 0x8670,
- 0x0016, 0x004c, 0x0082, 0x8608, 0x8674,
- 0x0018, 0x004e, 0x0084, 0x860c, 0x8678,
- 0x001a, 0x0050, 0x0086, 0x8610, 0x867c,
- 0x001c, 0x0052, 0x0088, 0x8614, 0x8680,
- 0x001e, 0x0054, 0x008a, 0x8618, 0x8684,
- 0x0020, 0x0056, 0x008c, 0x861c, 0x8688,
- 0x0022, 0x0058, 0x008e, 0x8620, 0x868c,
- 0x0024, 0x005a, 0x0090, 0x8624, 0x8690,
- 0x0026, 0x005c, 0x0092, 0x8628, 0x8694,
- 0x0028, 0x005e, 0x0094, 0x862c, 0x8698,
- 0x002a, 0x0060, 0x0096, 0x8630, 0x869c,
- 0x002c, 0x0062, 0x0098, 0x8634, 0x86a0,
- 0x002e, 0x0064, 0x009a, 0x8638, 0x86a4,
- 0x0030, 0x0066, 0x009c, 0x863c, 0x86a8,
- 0x0032, 0x0068, 0x009e, 0x8640, 0x86ac,
- 0x0034, 0x006a, 0x00a0, 0x8644, 0x86b0,
- 0x4a5a, 0x7a36, 0x0e7e, 0x3212, 0x62a2,
- 0x565a, 0x0236, 0x1a7e, 0x3e12, 0x6ea2,
- 0x625a, 0x0e36, 0x267e, 0x4a12, 0x7aa2,
- 0x6e5a, 0x1a36, 0x327e, 0x5612, 0x02a2,
- 0x7a5a, 0x2636, 0x3e7e, 0x6212, 0x0ea2,
- 0x025a, 0x3236, 0x4a7e, 0x6e12, 0x1aa2,
- 0x0e5a, 0x3e36, 0x567e, 0x7a12, 0x26a2,
- 0x1a5a, 0x4a36, 0x627e, 0x0212, 0x32a2,
- 0x265a, 0x5636, 0x6e7e, 0x0e12, 0x3ea2,
- 0x325a, 0x6236, 0x7a7e, 0x1a12, 0x4aa2,
- 0x3e5a, 0x6e36, 0x027e, 0x2612, 0x56a2,
- 0x4a5c, 0x7a38, 0x0e80, 0x3214, 0x62a4,
- 0x565c, 0x0238, 0x1a80, 0x3e14, 0x6ea4,
- 0x625c, 0x0e38, 0x2680, 0x4a14, 0x7aa4,
- 0x6e5c, 0x1a38, 0x3280, 0x5614, 0x02a4,
- 0x7a5c, 0x2638, 0x3e80, 0x6214, 0x0ea4,
- 0x025c, 0x3238, 0x4a80, 0x6e14, 0x1aa4,
- 0x0e5c, 0x3e38, 0x5680, 0x7a14, 0x26a4,
- 0x1a5c, 0x4a38, 0x6280, 0x0214, 0x32a4,
- 0x265c, 0x5638, 0x6e80, 0x0e14, 0x3ea4,
- 0x325c, 0x6238, 0x7a80, 0x1a14, 0x4aa4,
- 0x3e5c, 0x6e38, 0x0280, 0x2614, 0x56a4,
- 0x4a5e, 0x7a3a, 0x0e82, 0x3216, 0x62a6,
- 0x565e, 0x023a, 0x1a82, 0x3e16, 0x6ea6,
- 0x625e, 0x0e3a, 0x2682, 0x4a16, 0x7aa6,
- 0x6e5e, 0x1a3a, 0x3282, 0x5616, 0x02a6,
- 0x7a5e, 0x263a, 0x3e82, 0x6216, 0x0ea6,
- 0x025e, 0x323a, 0x4a82, 0x6e16, 0x1aa6,
- 0x0e5e, 0x3e3a, 0x5682, 0x7a16, 0x26a6,
- 0x1a5e, 0x4a3a, 0x6282, 0x0216, 0x32a6,
- 0x265e, 0x563a, 0x6e82, 0x0e16, 0x3ea6,
- 0x325e, 0x623a, 0x7a82, 0x1a16, 0x4aa6,
- 0x3e5e, 0x6e3a, 0x0282, 0x2616, 0x56a6,
- 0x4a60, 0x7a3c, 0x0e84, 0x3218, 0x62a8,
- 0x5660, 0x023c, 0x1a84, 0x3e18, 0x6ea8,
- 0x6260, 0x0e3c, 0x2684, 0x4a18, 0x7aa8,
- 0x6e60, 0x1a3c, 0x3284, 0x5618, 0x02a8,
- 0x7a60, 0x263c, 0x3e84, 0x6218, 0x0ea8,
- 0x0260, 0x323c, 0x4a84, 0x6e18, 0x1aa8,
- 0x0e60, 0x3e3c, 0x5684, 0x7a18, 0x26a8,
- 0x1a60, 0x4a3c, 0x6284, 0x0218, 0x32a8,
- 0x2660, 0x563c, 0x6e84, 0x0e18, 0x3ea8,
- 0x3260, 0x623c, 0x7a84, 0x1a18, 0x4aa8,
- 0x3e60, 0x6e3c, 0x0284, 0x2618, 0x56a8,
- 0x4a62, 0x7a3e, 0x0e86, 0x321a, 0x62aa,
- 0x5662, 0x023e, 0x1a86, 0x3e1a, 0x6eaa,
- 0x6262, 0x0e3e, 0x2686, 0x4a1a, 0x7aaa,
- 0x6e62, 0x1a3e, 0x3286, 0x561a, 0x02aa,
- 0x7a62, 0x263e, 0x3e86, 0x621a, 0x0eaa,
- 0x0262, 0x323e, 0x4a86, 0x6e1a, 0x1aaa,
- 0x0e62, 0x3e3e, 0x5686, 0x7a1a, 0x26aa,
- 0x1a62, 0x4a3e, 0x6286, 0x021a, 0x32aa,
- 0x2662, 0x563e, 0x6e86, 0x0e1a, 0x3eaa,
- 0x3262, 0x623e, 0x7a86, 0x1a1a, 0x4aaa,
- 0x3e62, 0x6e3e, 0x0286, 0x261a, 0x56aa,
- 0x4a64, 0x7a40, 0x0e88, 0x321c, 0x62ac,
- 0x5664, 0x0240, 0x1a88, 0x3e1c, 0x6eac,
- 0x6264, 0x0e40, 0x2688, 0x4a1c, 0x7aac,
- 0x6e64, 0x1a40, 0x3288, 0x561c, 0x02ac,
- 0x7a64, 0x2640, 0x3e88, 0x621c, 0x0eac,
- 0x0264, 0x3240, 0x4a88, 0x6e1c, 0x1aac,
- 0x0e64, 0x3e40, 0x5688, 0x7a1c, 0x26ac,
- 0x1a64, 0x4a40, 0x6288, 0x021c, 0x32ac,
- 0x2664, 0x5640, 0x6e88, 0x0e1c, 0x3eac,
- 0x3264, 0x6240, 0x7a88, 0x1a1c, 0x4aac,
- 0x3e64, 0x6e40, 0x0288, 0x261c, 0x56ac,
- 0x4a66, 0x7a42, 0x0e8a, 0x321e, 0x62ae,
- 0x5666, 0x0242, 0x1a8a, 0x3e1e, 0x6eae,
- 0x6266, 0x0e42, 0x268a, 0x4a1e, 0x7aae,
- 0x6e66, 0x1a42, 0x328a, 0x561e, 0x02ae,
- 0x7a66, 0x2642, 0x3e8a, 0x621e, 0x0eae,
- 0x0266, 0x3242, 0x4a8a, 0x6e1e, 0x1aae,
- 0x0e66, 0x3e42, 0x568a, 0x7a1e, 0x26ae,
- 0x1a66, 0x4a42, 0x628a, 0x021e, 0x32ae,
- 0x2666, 0x5642, 0x6e8a, 0x0e1e, 0x3eae,
- 0x3266, 0x6242, 0x7a8a, 0x1a1e, 0x4aae,
- 0x3e66, 0x6e42, 0x028a, 0x261e, 0x56ae,
- 0x4a68, 0x7a44, 0x0e8c, 0x3220, 0x62b0,
- 0x5668, 0x0244, 0x1a8c, 0x3e20, 0x6eb0,
- 0x6268, 0x0e44, 0x268c, 0x4a20, 0x7ab0,
- 0x6e68, 0x1a44, 0x328c, 0x5620, 0x02b0,
- 0x7a68, 0x2644, 0x3e8c, 0x6220, 0x0eb0,
- 0x0268, 0x3244, 0x4a8c, 0x6e20, 0x1ab0,
- 0x0e68, 0x3e44, 0x568c, 0x7a20, 0x26b0,
- 0x1a68, 0x4a44, 0x628c, 0x0220, 0x32b0,
- 0x2668, 0x5644, 0x6e8c, 0x0e20, 0x3eb0,
- 0x3268, 0x6244, 0x7a8c, 0x1a20, 0x4ab0,
- 0x3e68, 0x6e44, 0x028c, 0x2620, 0x56b0,
- 0x4a6a, 0x7a46, 0x0e8e, 0x3222, 0x62b2,
- 0x566a, 0x0246, 0x1a8e, 0x3e22, 0x6eb2,
- 0x626a, 0x0e46, 0x268e, 0x4a22, 0x7ab2,
- 0x6e6a, 0x1a46, 0x328e, 0x5622, 0x02b2,
- 0x7a6a, 0x2646, 0x3e8e, 0x6222, 0x0eb2,
- 0x026a, 0x3246, 0x4a8e, 0x6e22, 0x1ab2,
- 0x0e6a, 0x3e46, 0x568e, 0x7a22, 0x26b2,
- 0x1a6a, 0x4a46, 0x628e, 0x0222, 0x32b2,
- 0x266a, 0x5646, 0x6e8e, 0x0e22, 0x3eb2,
- 0x326a, 0x6246, 0x7a8e, 0x1a22, 0x4ab2,
- 0x3e6a, 0x6e46, 0x028e, 0x2622, 0x56b2,
- 0x4e5a, 0x7e36, 0x127e, 0x3612, 0x66a2,
- 0x5a5a, 0x0636, 0x1e7e, 0x4212, 0x72a2,
- 0x665a, 0x1236, 0x2a7e, 0x4e12, 0x7ea2,
- 0x725a, 0x1e36, 0x367e, 0x5a12, 0x06a2,
- 0x7e5a, 0x2a36, 0x427e, 0x6612, 0x12a2,
- 0x065a, 0x3636, 0x4e7e, 0x7212, 0x1ea2,
- 0x125a, 0x4236, 0x5a7e, 0x7e12, 0x2aa2,
- 0x1e5a, 0x4e36, 0x667e, 0x0612, 0x36a2,
- 0x2a5a, 0x5a36, 0x727e, 0x1212, 0x42a2,
- 0x365a, 0x6636, 0x7e7e, 0x1e12, 0x4ea2,
- 0x425a, 0x7236, 0x067e, 0x2a12, 0x5aa2,
- 0x4e5c, 0x7e38, 0x1280, 0x3614, 0x66a4,
- 0x5a5c, 0x0638, 0x1e80, 0x4214, 0x72a4,
- 0x665c, 0x1238, 0x2a80, 0x4e14, 0x7ea4,
- 0x725c, 0x1e38, 0x3680, 0x5a14, 0x06a4,
- 0x7e5c, 0x2a38, 0x4280, 0x6614, 0x12a4,
- 0x065c, 0x3638, 0x4e80, 0x7214, 0x1ea4,
- 0x125c, 0x4238, 0x5a80, 0x7e14, 0x2aa4,
- 0x1e5c, 0x4e38, 0x6680, 0x0614, 0x36a4,
- 0x2a5c, 0x5a38, 0x7280, 0x1214, 0x42a4,
- 0x365c, 0x6638, 0x7e80, 0x1e14, 0x4ea4,
- 0x425c, 0x7238, 0x0680, 0x2a14, 0x5aa4,
- 0x4e5e, 0x7e3a, 0x1282, 0x3616, 0x66a6,
- 0x5a5e, 0x063a, 0x1e82, 0x4216, 0x72a6,
- 0x665e, 0x123a, 0x2a82, 0x4e16, 0x7ea6,
- 0x725e, 0x1e3a, 0x3682, 0x5a16, 0x06a6,
- 0x7e5e, 0x2a3a, 0x4282, 0x6616, 0x12a6,
- 0x065e, 0x363a, 0x4e82, 0x7216, 0x1ea6,
- 0x125e, 0x423a, 0x5a82, 0x7e16, 0x2aa6,
- 0x1e5e, 0x4e3a, 0x6682, 0x0616, 0x36a6,
- 0x2a5e, 0x5a3a, 0x7282, 0x1216, 0x42a6,
- 0x365e, 0x663a, 0x7e82, 0x1e16, 0x4ea6,
- 0x425e, 0x723a, 0x0682, 0x2a16, 0x5aa6,
- 0x4e60, 0x7e3c, 0x1284, 0x3618, 0x66a8,
- 0x5a60, 0x063c, 0x1e84, 0x4218, 0x72a8,
- 0x6660, 0x123c, 0x2a84, 0x4e18, 0x7ea8,
- 0x7260, 0x1e3c, 0x3684, 0x5a18, 0x06a8,
- 0x7e60, 0x2a3c, 0x4284, 0x6618, 0x12a8,
- 0x0660, 0x363c, 0x4e84, 0x7218, 0x1ea8,
- 0x1260, 0x423c, 0x5a84, 0x7e18, 0x2aa8,
- 0x1e60, 0x4e3c, 0x6684, 0x0618, 0x36a8,
- 0x2a60, 0x5a3c, 0x7284, 0x1218, 0x42a8,
- 0x3660, 0x663c, 0x7e84, 0x1e18, 0x4ea8,
- 0x4260, 0x723c, 0x0684, 0x2a18, 0x5aa8,
- 0x4e62, 0x7e3e, 0x1286, 0x361a, 0x66aa,
- 0x5a62, 0x063e, 0x1e86, 0x421a, 0x72aa,
- 0x6662, 0x123e, 0x2a86, 0x4e1a, 0x7eaa,
- 0x7262, 0x1e3e, 0x3686, 0x5a1a, 0x06aa,
- 0x7e62, 0x2a3e, 0x4286, 0x661a, 0x12aa,
- 0x0662, 0x363e, 0x4e86, 0x721a, 0x1eaa,
- 0x1262, 0x423e, 0x5a86, 0x7e1a, 0x2aaa,
- 0x1e62, 0x4e3e, 0x6686, 0x061a, 0x36aa,
- 0x2a62, 0x5a3e, 0x7286, 0x121a, 0x42aa,
- 0x3662, 0x663e, 0x7e86, 0x1e1a, 0x4eaa,
- 0x4262, 0x723e, 0x0686, 0x2a1a, 0x5aaa,
- 0x4e64, 0x7e40, 0x1288, 0x361c, 0x66ac,
- 0x5a64, 0x0640, 0x1e88, 0x421c, 0x72ac,
- 0x6664, 0x1240, 0x2a88, 0x4e1c, 0x7eac,
- 0x7264, 0x1e40, 0x3688, 0x5a1c, 0x06ac,
- 0x7e64, 0x2a40, 0x4288, 0x661c, 0x12ac,
- 0x0664, 0x3640, 0x4e88, 0x721c, 0x1eac,
- 0x1264, 0x4240, 0x5a88, 0x7e1c, 0x2aac,
- 0x1e64, 0x4e40, 0x6688, 0x061c, 0x36ac,
- 0x2a64, 0x5a40, 0x7288, 0x121c, 0x42ac,
- 0x3664, 0x6640, 0x7e88, 0x1e1c, 0x4eac,
- 0x4264, 0x7240, 0x0688, 0x2a1c, 0x5aac,
- 0x4e66, 0x7e42, 0x128a, 0x361e, 0x66ae,
- 0x5a66, 0x0642, 0x1e8a, 0x421e, 0x72ae,
- 0x6666, 0x1242, 0x2a8a, 0x4e1e, 0x7eae,
- 0x7266, 0x1e42, 0x368a, 0x5a1e, 0x06ae,
- 0x7e66, 0x2a42, 0x428a, 0x661e, 0x12ae,
- 0x0666, 0x3642, 0x4e8a, 0x721e, 0x1eae,
- 0x1266, 0x4242, 0x5a8a, 0x7e1e, 0x2aae,
- 0x1e66, 0x4e42, 0x668a, 0x061e, 0x36ae,
- 0x2a66, 0x5a42, 0x728a, 0x121e, 0x42ae,
- 0x3666, 0x6642, 0x7e8a, 0x1e1e, 0x4eae,
- 0x4266, 0x7242, 0x068a, 0x2a1e, 0x5aae,
- 0x4e68, 0x7e44, 0x128c, 0x3620, 0x66b0,
- 0x5a68, 0x0644, 0x1e8c, 0x4220, 0x72b0,
- 0x6668, 0x1244, 0x2a8c, 0x4e20, 0x7eb0,
- 0x7268, 0x1e44, 0x368c, 0x5a20, 0x06b0,
- 0x7e68, 0x2a44, 0x428c, 0x6620, 0x12b0,
- 0x0668, 0x3644, 0x4e8c, 0x7220, 0x1eb0,
- 0x1268, 0x4244, 0x5a8c, 0x7e20, 0x2ab0,
- 0x1e68, 0x4e44, 0x668c, 0x0620, 0x36b0,
- 0x2a68, 0x5a44, 0x728c, 0x1220, 0x42b0,
- 0x3668, 0x6644, 0x7e8c, 0x1e20, 0x4eb0,
- 0x4268, 0x7244, 0x068c, 0x2a20, 0x5ab0,
- 0x4e6a, 0x7e46, 0x128e, 0x3622, 0x66b2,
- 0x5a6a, 0x0646, 0x1e8e, 0x4222, 0x72b2,
- 0x666a, 0x1246, 0x2a8e, 0x4e22, 0x7eb2,
- 0x726a, 0x1e46, 0x368e, 0x5a22, 0x06b2,
- 0x7e6a, 0x2a46, 0x428e, 0x6622, 0x12b2,
- 0x066a, 0x3646, 0x4e8e, 0x7222, 0x1eb2,
- 0x126a, 0x4246, 0x5a8e, 0x7e22, 0x2ab2,
- 0x1e6a, 0x4e46, 0x668e, 0x0622, 0x36b2,
- 0x2a6a, 0x5a46, 0x728e, 0x1222, 0x42b2,
- 0x366a, 0x6646, 0x7e8e, 0x1e22, 0x4eb2,
- 0x426a, 0x7246, 0x068e, 0x2a22, 0x5ab2,
- 0x525a, 0x8236, 0x167e, 0x3a12, 0x6aa2,
- 0x5e5a, 0x0a36, 0x227e, 0x4612, 0x76a2,
- 0x6a5a, 0x1636, 0x2e7e, 0x5212, 0x82a2,
- 0x765a, 0x2236, 0x3a7e, 0x5e12, 0x0aa2,
- 0x825a, 0x2e36, 0x467e, 0x6a12, 0x16a2,
- 0x0a5a, 0x3a36, 0x527e, 0x7612, 0x22a2,
- 0x165a, 0x4636, 0x5e7e, 0x8212, 0x2ea2,
- 0x225a, 0x5236, 0x6a7e, 0x0a12, 0x3aa2,
- 0x2e5a, 0x5e36, 0x767e, 0x1612, 0x46a2,
- 0x3a5a, 0x6a36, 0x827e, 0x2212, 0x52a2,
- 0x465a, 0x7636, 0x0a7e, 0x2e12, 0x5ea2,
- 0x525c, 0x8238, 0x1680, 0x3a14, 0x6aa4,
- 0x5e5c, 0x0a38, 0x2280, 0x4614, 0x76a4,
- 0x6a5c, 0x1638, 0x2e80, 0x5214, 0x82a4,
- 0x765c, 0x2238, 0x3a80, 0x5e14, 0x0aa4,
- 0x825c, 0x2e38, 0x4680, 0x6a14, 0x16a4,
- 0x0a5c, 0x3a38, 0x5280, 0x7614, 0x22a4,
- 0x165c, 0x4638, 0x5e80, 0x8214, 0x2ea4,
- 0x225c, 0x5238, 0x6a80, 0x0a14, 0x3aa4,
- 0x2e5c, 0x5e38, 0x7680, 0x1614, 0x46a4,
- 0x3a5c, 0x6a38, 0x8280, 0x2214, 0x52a4,
- 0x465c, 0x7638, 0x0a80, 0x2e14, 0x5ea4,
- 0x525e, 0x823a, 0x1682, 0x3a16, 0x6aa6,
- 0x5e5e, 0x0a3a, 0x2282, 0x4616, 0x76a6,
- 0x6a5e, 0x163a, 0x2e82, 0x5216, 0x82a6,
- 0x765e, 0x223a, 0x3a82, 0x5e16, 0x0aa6,
- 0x825e, 0x2e3a, 0x4682, 0x6a16, 0x16a6,
- 0x0a5e, 0x3a3a, 0x5282, 0x7616, 0x22a6,
- 0x165e, 0x463a, 0x5e82, 0x8216, 0x2ea6,
- 0x225e, 0x523a, 0x6a82, 0x0a16, 0x3aa6,
- 0x2e5e, 0x5e3a, 0x7682, 0x1616, 0x46a6,
- 0x3a5e, 0x6a3a, 0x8282, 0x2216, 0x52a6,
- 0x465e, 0x763a, 0x0a82, 0x2e16, 0x5ea6,
- 0x5260, 0x823c, 0x1684, 0x3a18, 0x6aa8,
- 0x5e60, 0x0a3c, 0x2284, 0x4618, 0x76a8,
- 0x6a60, 0x163c, 0x2e84, 0x5218, 0x82a8,
- 0x7660, 0x223c, 0x3a84, 0x5e18, 0x0aa8,
- 0x8260, 0x2e3c, 0x4684, 0x6a18, 0x16a8,
- 0x0a60, 0x3a3c, 0x5284, 0x7618, 0x22a8,
- 0x1660, 0x463c, 0x5e84, 0x8218, 0x2ea8,
- 0x2260, 0x523c, 0x6a84, 0x0a18, 0x3aa8,
- 0x2e60, 0x5e3c, 0x7684, 0x1618, 0x46a8,
- 0x3a60, 0x6a3c, 0x8284, 0x2218, 0x52a8,
- 0x4660, 0x763c, 0x0a84, 0x2e18, 0x5ea8,
- 0x5262, 0x823e, 0x1686, 0x3a1a, 0x6aaa,
- 0x5e62, 0x0a3e, 0x2286, 0x461a, 0x76aa,
- 0x6a62, 0x163e, 0x2e86, 0x521a, 0x82aa,
- 0x7662, 0x223e, 0x3a86, 0x5e1a, 0x0aaa,
- 0x8262, 0x2e3e, 0x4686, 0x6a1a, 0x16aa,
- 0x0a62, 0x3a3e, 0x5286, 0x761a, 0x22aa,
- 0x1662, 0x463e, 0x5e86, 0x821a, 0x2eaa,
- 0x2262, 0x523e, 0x6a86, 0x0a1a, 0x3aaa,
- 0x2e62, 0x5e3e, 0x7686, 0x161a, 0x46aa,
- 0x3a62, 0x6a3e, 0x8286, 0x221a, 0x52aa,
- 0x4662, 0x763e, 0x0a86, 0x2e1a, 0x5eaa,
- 0x5264, 0x8240, 0x1688, 0x3a1c, 0x6aac,
- 0x5e64, 0x0a40, 0x2288, 0x461c, 0x76ac,
- 0x6a64, 0x1640, 0x2e88, 0x521c, 0x82ac,
- 0x7664, 0x2240, 0x3a88, 0x5e1c, 0x0aac,
- 0x8264, 0x2e40, 0x4688, 0x6a1c, 0x16ac,
- 0x0a64, 0x3a40, 0x5288, 0x761c, 0x22ac,
- 0x1664, 0x4640, 0x5e88, 0x821c, 0x2eac,
- 0x2264, 0x5240, 0x6a88, 0x0a1c, 0x3aac,
- 0x2e64, 0x5e40, 0x7688, 0x161c, 0x46ac,
- 0x3a64, 0x6a40, 0x8288, 0x221c, 0x52ac,
- 0x4664, 0x7640, 0x0a88, 0x2e1c, 0x5eac,
- 0x5266, 0x8242, 0x168a, 0x3a1e, 0x6aae,
- 0x5e66, 0x0a42, 0x228a, 0x461e, 0x76ae,
- 0x6a66, 0x1642, 0x2e8a, 0x521e, 0x82ae,
- 0x7666, 0x2242, 0x3a8a, 0x5e1e, 0x0aae,
- 0x8266, 0x2e42, 0x468a, 0x6a1e, 0x16ae,
- 0x0a66, 0x3a42, 0x528a, 0x761e, 0x22ae,
- 0x1666, 0x4642, 0x5e8a, 0x821e, 0x2eae,
- 0x2266, 0x5242, 0x6a8a, 0x0a1e, 0x3aae,
- 0x2e66, 0x5e42, 0x768a, 0x161e, 0x46ae,
- 0x3a66, 0x6a42, 0x828a, 0x221e, 0x52ae,
- 0x4666, 0x7642, 0x0a8a, 0x2e1e, 0x5eae,
- 0x5268, 0x8244, 0x168c, 0x3a20, 0x6ab0,
- 0x5e68, 0x0a44, 0x228c, 0x4620, 0x76b0,
- 0x6a68, 0x1644, 0x2e8c, 0x5220, 0x82b0,
- 0x7668, 0x2244, 0x3a8c, 0x5e20, 0x0ab0,
- 0x8268, 0x2e44, 0x468c, 0x6a20, 0x16b0,
- 0x0a68, 0x3a44, 0x528c, 0x7620, 0x22b0,
- 0x1668, 0x4644, 0x5e8c, 0x8220, 0x2eb0,
- 0x2268, 0x5244, 0x6a8c, 0x0a20, 0x3ab0,
- 0x2e68, 0x5e44, 0x768c, 0x1620, 0x46b0,
- 0x3a68, 0x6a44, 0x828c, 0x2220, 0x52b0,
- 0x4668, 0x7644, 0x0a8c, 0x2e20, 0x5eb0,
- 0x526a, 0x8246, 0x168e, 0x3a22, 0x6ab2,
- 0x5e6a, 0x0a46, 0x228e, 0x4622, 0x76b2,
- 0x6a6a, 0x1646, 0x2e8e, 0x5222, 0x82b2,
- 0x766a, 0x2246, 0x3a8e, 0x5e22, 0x0ab2,
- 0x826a, 0x2e46, 0x468e, 0x6a22, 0x16b2,
- 0x0a6a, 0x3a46, 0x528e, 0x7622, 0x22b2,
- 0x166a, 0x4646, 0x5e8e, 0x8222, 0x2eb2,
- 0x226a, 0x5246, 0x6a8e, 0x0a22, 0x3ab2,
- 0x2e6a, 0x5e46, 0x768e, 0x1622, 0x46b2,
- 0x3a6a, 0x6a46, 0x828e, 0x2222, 0x52b2,
- 0x466a, 0x7646, 0x0a8e, 0x2e22, 0x5eb2,
- 0x4a5a, 0x7a36, 0x0e7e, 0x3212, 0x62a2,
- 0x565a, 0x0236, 0x1a7e, 0x3e12, 0x6ea2,
- 0x625a, 0x0e36, 0x267e, 0x4a12, 0x7aa2,
- 0x6e5a, 0x1a36, 0x327e, 0x5612, 0x02a2,
- 0x7a5a, 0x2636, 0x3e7e, 0x6212, 0x0ea2,
- 0x025a, 0x3236, 0x4a7e, 0x6e12, 0x1aa2,
- 0x0e5a, 0x3e36, 0x567e, 0x7a12, 0x26a2,
- 0x1a5a, 0x4a36, 0x627e, 0x0212, 0x32a2,
- 0x265a, 0x5636, 0x6e7e, 0x0e12, 0x3ea2,
- 0x325a, 0x6236, 0x7a7e, 0x1a12, 0x4aa2,
- 0x3e5a, 0x6e36, 0x027e, 0x2612, 0x56a2,
- 0x4a5c, 0x7a38, 0x0e80, 0x3214, 0x62a4,
- 0x565c, 0x0238, 0x1a80, 0x3e14, 0x6ea4,
- 0x625c, 0x0e38, 0x2680, 0x4a14, 0x7aa4,
- 0x6e5c, 0x1a38, 0x3280, 0x5614, 0x02a4,
- 0x7a5c, 0x2638, 0x3e80, 0x6214, 0x0ea4,
- 0x025c, 0x3238, 0x4a80, 0x6e14, 0x1aa4,
- 0x0e5c, 0x3e38, 0x5680, 0x7a14, 0x26a4,
- 0x1a5c, 0x4a38, 0x6280, 0x0214, 0x32a4,
- 0x265c, 0x5638, 0x6e80, 0x0e14, 0x3ea4,
- 0x325c, 0x6238, 0x7a80, 0x1a14, 0x4aa4,
- 0x3e5c, 0x6e38, 0x0280, 0x2614, 0x56a4,
- 0x4a5e, 0x7a3a, 0x0e82, 0x3216, 0x62a6,
- 0x565e, 0x023a, 0x1a82, 0x3e16, 0x6ea6,
- 0x625e, 0x0e3a, 0x2682, 0x4a16, 0x7aa6,
- 0x6e5e, 0x1a3a, 0x3282, 0x5616, 0x02a6,
- 0x7a5e, 0x263a, 0x3e82, 0x6216, 0x0ea6,
- 0x7c48, 0x2824, 0x406c, 0x6400, 0x1090,
- 0x0448, 0x3424, 0x4c6c, 0x7000, 0x1c90,
- 0x1048, 0x4024, 0x586c, 0x7c00, 0x2890,
- 0x1c48, 0x4c24, 0x646c, 0x0400, 0x3490,
- 0x2848, 0x5824, 0x706c, 0x1000, 0x4090,
- 0x3448, 0x6424, 0x7c6c, 0x1c00, 0x4c90,
- 0x4048, 0x7024, 0x046c, 0x2800, 0x5890,
- 0x4c48, 0x7c24, 0x106c, 0x3400, 0x6490,
- 0x5848, 0x0424, 0x1c6c, 0x4000, 0x7090,
- 0x6448, 0x1024, 0x286c, 0x4c00, 0x7c90,
- 0x7048, 0x1c24, 0x346c, 0x5800, 0x0490,
- 0x7c4a, 0x2826, 0x406e, 0x6402, 0x1092,
- 0x044a, 0x3426, 0x4c6e, 0x7002, 0x1c92,
- 0x104a, 0x4026, 0x586e, 0x7c02, 0x2892,
- 0x1c4a, 0x4c26, 0x646e, 0x0402, 0x3492,
- 0x284a, 0x5826, 0x706e, 0x1002, 0x4092,
- 0x344a, 0x6426, 0x7c6e, 0x1c02, 0x4c92,
- 0x404a, 0x7026, 0x046e, 0x2802, 0x5892,
- 0x4c4a, 0x7c26, 0x106e, 0x3402, 0x6492,
- 0x584a, 0x0426, 0x1c6e, 0x4002, 0x7092,
- 0x644a, 0x1026, 0x286e, 0x4c02, 0x7c92,
- 0x704a, 0x1c26, 0x346e, 0x5802, 0x0492,
- 0x7c4c, 0x2828, 0x4070, 0x6404, 0x1094,
- 0x044c, 0x3428, 0x4c70, 0x7004, 0x1c94,
- 0x104c, 0x4028, 0x5870, 0x7c04, 0x2894,
- 0x1c4c, 0x4c28, 0x6470, 0x0404, 0x3494,
- 0x284c, 0x5828, 0x7070, 0x1004, 0x4094,
- 0x344c, 0x6428, 0x7c70, 0x1c04, 0x4c94,
- 0x404c, 0x7028, 0x0470, 0x2804, 0x5894,
- 0x4c4c, 0x7c28, 0x1070, 0x3404, 0x6494,
- 0x584c, 0x0428, 0x1c70, 0x4004, 0x7094,
- 0x644c, 0x1028, 0x2870, 0x4c04, 0x7c94,
- 0x704c, 0x1c28, 0x3470, 0x5804, 0x0494,
- 0x7c4e, 0x282a, 0x4072, 0x6406, 0x1096,
- 0x044e, 0x342a, 0x4c72, 0x7006, 0x1c96,
- 0x104e, 0x402a, 0x5872, 0x7c06, 0x2896,
- 0x1c4e, 0x4c2a, 0x6472, 0x0406, 0x3496,
- 0x284e, 0x582a, 0x7072, 0x1006, 0x4096,
- 0x344e, 0x642a, 0x7c72, 0x1c06, 0x4c96,
- 0x404e, 0x702a, 0x0472, 0x2806, 0x5896,
- 0x4c4e, 0x7c2a, 0x1072, 0x3406, 0x6496,
- 0x584e, 0x042a, 0x1c72, 0x4006, 0x7096,
- 0x644e, 0x102a, 0x2872, 0x4c06, 0x7c96,
- 0x704e, 0x1c2a, 0x3472, 0x5806, 0x0496,
- 0x7c50, 0x282c, 0x4074, 0x6408, 0x1098,
- 0x0450, 0x342c, 0x4c74, 0x7008, 0x1c98,
- 0x1050, 0x402c, 0x5874, 0x7c08, 0x2898,
- 0x1c50, 0x4c2c, 0x6474, 0x0408, 0x3498,
- 0x2850, 0x582c, 0x7074, 0x1008, 0x4098,
- 0x3450, 0x642c, 0x7c74, 0x1c08, 0x4c98,
- 0x4050, 0x702c, 0x0474, 0x2808, 0x5898,
- 0x4c50, 0x7c2c, 0x1074, 0x3408, 0x6498,
- 0x5850, 0x042c, 0x1c74, 0x4008, 0x7098,
- 0x6450, 0x102c, 0x2874, 0x4c08, 0x7c98,
- 0x7050, 0x1c2c, 0x3474, 0x5808, 0x0498,
- 0x7c52, 0x282e, 0x4076, 0x640a, 0x109a,
- 0x0452, 0x342e, 0x4c76, 0x700a, 0x1c9a,
- 0x1052, 0x402e, 0x5876, 0x7c0a, 0x289a,
- 0x1c52, 0x4c2e, 0x6476, 0x040a, 0x349a,
- 0x2852, 0x582e, 0x7076, 0x100a, 0x409a,
- 0x3452, 0x642e, 0x7c76, 0x1c0a, 0x4c9a,
- 0x4052, 0x702e, 0x0476, 0x280a, 0x589a,
- 0x4c52, 0x7c2e, 0x1076, 0x340a, 0x649a,
- 0x5852, 0x042e, 0x1c76, 0x400a, 0x709a,
- 0x6452, 0x102e, 0x2876, 0x4c0a, 0x7c9a,
- 0x7052, 0x1c2e, 0x3476, 0x580a, 0x049a,
- 0x7c54, 0x2830, 0x4078, 0x640c, 0x109c,
- 0x0454, 0x3430, 0x4c78, 0x700c, 0x1c9c,
- 0x1054, 0x4030, 0x5878, 0x7c0c, 0x289c,
- 0x1c54, 0x4c30, 0x6478, 0x040c, 0x349c,
- 0x2854, 0x5830, 0x7078, 0x100c, 0x409c,
- 0x3454, 0x6430, 0x7c78, 0x1c0c, 0x4c9c,
- 0x4054, 0x7030, 0x0478, 0x280c, 0x589c,
- 0x4c54, 0x7c30, 0x1078, 0x340c, 0x649c,
- 0x5854, 0x0430, 0x1c78, 0x400c, 0x709c,
- 0x6454, 0x1030, 0x2878, 0x4c0c, 0x7c9c,
- 0x7054, 0x1c30, 0x3478, 0x580c, 0x049c,
- 0x7c56, 0x2832, 0x407a, 0x640e, 0x109e,
- 0x0456, 0x3432, 0x4c7a, 0x700e, 0x1c9e,
- 0x1056, 0x4032, 0x587a, 0x7c0e, 0x289e,
- 0x1c56, 0x4c32, 0x647a, 0x040e, 0x349e,
- 0x2856, 0x5832, 0x707a, 0x100e, 0x409e,
- 0x3456, 0x6432, 0x7c7a, 0x1c0e, 0x4c9e,
- 0x4056, 0x7032, 0x047a, 0x280e, 0x589e,
- 0x4c56, 0x7c32, 0x107a, 0x340e, 0x649e,
- 0x5856, 0x0432, 0x1c7a, 0x400e, 0x709e,
- 0x6456, 0x1032, 0x287a, 0x4c0e, 0x7c9e,
- 0x7056, 0x1c32, 0x347a, 0x580e, 0x049e,
- 0x7c58, 0x2834, 0x407c, 0x6410, 0x10a0,
- 0x0458, 0x3434, 0x4c7c, 0x7010, 0x1ca0,
- 0x1058, 0x4034, 0x587c, 0x7c10, 0x28a0,
- 0x1c58, 0x4c34, 0x647c, 0x0410, 0x34a0,
- 0x2858, 0x5834, 0x707c, 0x1010, 0x40a0,
- 0x3458, 0x6434, 0x7c7c, 0x1c10, 0x4ca0,
- 0x4058, 0x7034, 0x047c, 0x2810, 0x58a0,
- 0x4c58, 0x7c34, 0x107c, 0x3410, 0x64a0,
- 0x5858, 0x0434, 0x1c7c, 0x4010, 0x70a0,
- 0x6458, 0x1034, 0x287c, 0x4c10, 0x7ca0,
- 0x7058, 0x1c34, 0x347c, 0x5810, 0x04a0,
- 0x8048, 0x2c24, 0x446c, 0x6800, 0x1490,
- 0x0848, 0x3824, 0x506c, 0x7400, 0x2090,
- 0x1448, 0x4424, 0x5c6c, 0x8000, 0x2c90,
- 0x2048, 0x5024, 0x686c, 0x0800, 0x3890,
- 0x2c48, 0x5c24, 0x746c, 0x1400, 0x4490,
- 0x3848, 0x6824, 0x806c, 0x2000, 0x5090,
- 0x4448, 0x7424, 0x086c, 0x2c00, 0x5c90,
- 0x5048, 0x8024, 0x146c, 0x3800, 0x6890,
- 0x5c48, 0x0824, 0x206c, 0x4400, 0x7490,
- 0x6848, 0x1424, 0x2c6c, 0x5000, 0x8090,
- 0x7448, 0x2024, 0x386c, 0x5c00, 0x0890,
- 0x804a, 0x2c26, 0x446e, 0x6802, 0x1492,
- 0x084a, 0x3826, 0x506e, 0x7402, 0x2092,
- 0x144a, 0x4426, 0x5c6e, 0x8002, 0x2c92,
- 0x204a, 0x5026, 0x686e, 0x0802, 0x3892,
- 0x2c4a, 0x5c26, 0x746e, 0x1402, 0x4492,
- 0x384a, 0x6826, 0x806e, 0x2002, 0x5092,
- 0x444a, 0x7426, 0x086e, 0x2c02, 0x5c92,
- 0x504a, 0x8026, 0x146e, 0x3802, 0x6892,
- 0x5c4a, 0x0826, 0x206e, 0x4402, 0x7492,
- 0x684a, 0x1426, 0x2c6e, 0x5002, 0x8092,
- 0x744a, 0x2026, 0x386e, 0x5c02, 0x0892,
- 0x804c, 0x2c28, 0x4470, 0x6804, 0x1494,
- 0x084c, 0x3828, 0x5070, 0x7404, 0x2094,
- 0x144c, 0x4428, 0x5c70, 0x8004, 0x2c94,
- 0x204c, 0x5028, 0x6870, 0x0804, 0x3894,
- 0x2c4c, 0x5c28, 0x7470, 0x1404, 0x4494,
- 0x384c, 0x6828, 0x8070, 0x2004, 0x5094,
- 0x444c, 0x7428, 0x0870, 0x2c04, 0x5c94,
- 0x504c, 0x8028, 0x1470, 0x3804, 0x6894,
- 0x5c4c, 0x0828, 0x2070, 0x4404, 0x7494,
- 0x684c, 0x1428, 0x2c70, 0x5004, 0x8094,
- 0x744c, 0x2028, 0x3870, 0x5c04, 0x0894,
- 0x804e, 0x2c2a, 0x4472, 0x6806, 0x1496,
- 0x084e, 0x382a, 0x5072, 0x7406, 0x2096,
- 0x144e, 0x442a, 0x5c72, 0x8006, 0x2c96,
- 0x204e, 0x502a, 0x6872, 0x0806, 0x3896,
- 0x2c4e, 0x5c2a, 0x7472, 0x1406, 0x4496,
- 0x384e, 0x682a, 0x8072, 0x2006, 0x5096,
- 0x444e, 0x742a, 0x0872, 0x2c06, 0x5c96,
- 0x504e, 0x802a, 0x1472, 0x3806, 0x6896,
- 0x5c4e, 0x082a, 0x2072, 0x4406, 0x7496,
- 0x684e, 0x142a, 0x2c72, 0x5006, 0x8096,
- 0x744e, 0x202a, 0x3872, 0x5c06, 0x0896,
- 0x8050, 0x2c2c, 0x4474, 0x6808, 0x1498,
- 0x0850, 0x382c, 0x5074, 0x7408, 0x2098,
- 0x1450, 0x442c, 0x5c74, 0x8008, 0x2c98,
- 0x2050, 0x502c, 0x6874, 0x0808, 0x3898,
- 0x2c50, 0x5c2c, 0x7474, 0x1408, 0x4498,
- 0x3850, 0x682c, 0x8074, 0x2008, 0x5098,
- 0x4450, 0x742c, 0x0874, 0x2c08, 0x5c98,
- 0x5050, 0x802c, 0x1474, 0x3808, 0x6898,
- 0x5c50, 0x082c, 0x2074, 0x4408, 0x7498,
- 0x6850, 0x142c, 0x2c74, 0x5008, 0x8098,
- 0x7450, 0x202c, 0x3874, 0x5c08, 0x0898,
- 0x8052, 0x2c2e, 0x4476, 0x680a, 0x149a,
- 0x0852, 0x382e, 0x5076, 0x740a, 0x209a,
- 0x1452, 0x442e, 0x5c76, 0x800a, 0x2c9a,
- 0x2052, 0x502e, 0x6876, 0x080a, 0x389a,
- 0x2c52, 0x5c2e, 0x7476, 0x140a, 0x449a,
- 0x3852, 0x682e, 0x8076, 0x200a, 0x509a,
- 0x4452, 0x742e, 0x0876, 0x2c0a, 0x5c9a,
- 0x5052, 0x802e, 0x1476, 0x380a, 0x689a,
- 0x5c52, 0x082e, 0x2076, 0x440a, 0x749a,
- 0x6852, 0x142e, 0x2c76, 0x500a, 0x809a,
- 0x7452, 0x202e, 0x3876, 0x5c0a, 0x089a,
- 0x8054, 0x2c30, 0x4478, 0x680c, 0x149c,
- 0x0854, 0x3830, 0x5078, 0x740c, 0x209c,
- 0x1454, 0x4430, 0x5c78, 0x800c, 0x2c9c,
- 0x2054, 0x5030, 0x6878, 0x080c, 0x389c,
- 0x2c54, 0x5c30, 0x7478, 0x140c, 0x449c,
- 0x3854, 0x6830, 0x8078, 0x200c, 0x509c,
- 0x4454, 0x7430, 0x0878, 0x2c0c, 0x5c9c,
- 0x5054, 0x8030, 0x1478, 0x380c, 0x689c,
- 0x5c54, 0x0830, 0x2078, 0x440c, 0x749c,
- 0x6854, 0x1430, 0x2c78, 0x500c, 0x809c,
- 0x7454, 0x2030, 0x3878, 0x5c0c, 0x089c,
- 0x8056, 0x2c32, 0x447a, 0x680e, 0x149e,
- 0x0856, 0x3832, 0x507a, 0x740e, 0x209e,
- 0x1456, 0x4432, 0x5c7a, 0x800e, 0x2c9e,
- 0x2056, 0x5032, 0x687a, 0x080e, 0x389e,
- 0x2c56, 0x5c32, 0x747a, 0x140e, 0x449e,
- 0x3856, 0x6832, 0x807a, 0x200e, 0x509e,
- 0x4456, 0x7432, 0x087a, 0x2c0e, 0x5c9e,
- 0x5056, 0x8032, 0x147a, 0x380e, 0x689e,
- 0x5c56, 0x0832, 0x207a, 0x440e, 0x749e,
- 0x6856, 0x1432, 0x2c7a, 0x500e, 0x809e,
- 0x7456, 0x2032, 0x387a, 0x5c0e, 0x089e,
- 0x8058, 0x2c34, 0x447c, 0x6810, 0x14a0,
- 0x0858, 0x3834, 0x507c, 0x7410, 0x20a0,
- 0x1458, 0x4434, 0x5c7c, 0x8010, 0x2ca0,
- 0x2058, 0x5034, 0x687c, 0x0810, 0x38a0,
- 0x2c58, 0x5c34, 0x747c, 0x1410, 0x44a0,
- 0x3858, 0x6834, 0x807c, 0x2010, 0x50a0,
- 0x4458, 0x7434, 0x087c, 0x2c10, 0x5ca0,
- 0x5058, 0x8034, 0x147c, 0x3810, 0x68a0,
- 0x5c58, 0x0834, 0x207c, 0x4410, 0x74a0,
- 0x6858, 0x1434, 0x2c7c, 0x5010, 0x80a0,
- 0x7458, 0x2034, 0x387c, 0x5c10, 0x08a0,
- 0x8448, 0x3024, 0x486c, 0x6c00, 0x1890,
- 0x0c48, 0x3c24, 0x546c, 0x7800, 0x2490,
- 0x1848, 0x4824, 0x606c, 0x8400, 0x3090,
- 0x2448, 0x5424, 0x6c6c, 0x0c00, 0x3c90,
- 0x3048, 0x6024, 0x786c, 0x1800, 0x4890,
- 0x3c48, 0x6c24, 0x846c, 0x2400, 0x5490,
- 0x4848, 0x7824, 0x0c6c, 0x3000, 0x6090,
- 0x5448, 0x8424, 0x186c, 0x3c00, 0x6c90,
- 0x6048, 0x0c24, 0x246c, 0x4800, 0x7890,
- 0x6c48, 0x1824, 0x306c, 0x5400, 0x8490,
- 0x7848, 0x2424, 0x3c6c, 0x6000, 0x0c90,
- 0x844a, 0x3026, 0x486e, 0x6c02, 0x1892,
- 0x0c4a, 0x3c26, 0x546e, 0x7802, 0x2492,
- 0x184a, 0x4826, 0x606e, 0x8402, 0x3092,
- 0x244a, 0x5426, 0x6c6e, 0x0c02, 0x3c92,
- 0x304a, 0x6026, 0x786e, 0x1802, 0x4892,
- 0x3c4a, 0x6c26, 0x846e, 0x2402, 0x5492,
- 0x484a, 0x7826, 0x0c6e, 0x3002, 0x6092,
- 0x544a, 0x8426, 0x186e, 0x3c02, 0x6c92,
- 0x604a, 0x0c26, 0x246e, 0x4802, 0x7892,
- 0x6c4a, 0x1826, 0x306e, 0x5402, 0x8492,
- 0x784a, 0x2426, 0x3c6e, 0x6002, 0x0c92,
- 0x844c, 0x3028, 0x4870, 0x6c04, 0x1894,
- 0x0c4c, 0x3c28, 0x5470, 0x7804, 0x2494,
- 0x184c, 0x4828, 0x6070, 0x8404, 0x3094,
- 0x244c, 0x5428, 0x6c70, 0x0c04, 0x3c94,
- 0x304c, 0x6028, 0x7870, 0x1804, 0x4894,
- 0x3c4c, 0x6c28, 0x8470, 0x2404, 0x5494,
- 0x484c, 0x7828, 0x0c70, 0x3004, 0x6094,
- 0x544c, 0x8428, 0x1870, 0x3c04, 0x6c94,
- 0x604c, 0x0c28, 0x2470, 0x4804, 0x7894,
- 0x6c4c, 0x1828, 0x3070, 0x5404, 0x8494,
- 0x784c, 0x2428, 0x3c70, 0x6004, 0x0c94,
- 0x844e, 0x302a, 0x4872, 0x6c06, 0x1896,
- 0x0c4e, 0x3c2a, 0x5472, 0x7806, 0x2496,
- 0x184e, 0x482a, 0x6072, 0x8406, 0x3096,
- 0x244e, 0x542a, 0x6c72, 0x0c06, 0x3c96,
- 0x304e, 0x602a, 0x7872, 0x1806, 0x4896,
- 0x3c4e, 0x6c2a, 0x8472, 0x2406, 0x5496,
- 0x484e, 0x782a, 0x0c72, 0x3006, 0x6096,
- 0x544e, 0x842a, 0x1872, 0x3c06, 0x6c96,
- 0x604e, 0x0c2a, 0x2472, 0x4806, 0x7896,
- 0x6c4e, 0x182a, 0x3072, 0x5406, 0x8496,
- 0x784e, 0x242a, 0x3c72, 0x6006, 0x0c96,
- 0x8450, 0x302c, 0x4874, 0x6c08, 0x1898,
- 0x0c50, 0x3c2c, 0x5474, 0x7808, 0x2498,
- 0x1850, 0x482c, 0x6074, 0x8408, 0x3098,
- 0x2450, 0x542c, 0x6c74, 0x0c08, 0x3c98,
- 0x3050, 0x602c, 0x7874, 0x1808, 0x4898,
- 0x3c50, 0x6c2c, 0x8474, 0x2408, 0x5498,
- 0x4850, 0x782c, 0x0c74, 0x3008, 0x6098,
- 0x5450, 0x842c, 0x1874, 0x3c08, 0x6c98,
- 0x6050, 0x0c2c, 0x2474, 0x4808, 0x7898,
- 0x6c50, 0x182c, 0x3074, 0x5408, 0x8498,
- 0x7850, 0x242c, 0x3c74, 0x6008, 0x0c98,
- 0x8452, 0x302e, 0x4876, 0x6c0a, 0x189a,
- 0x0c52, 0x3c2e, 0x5476, 0x780a, 0x249a,
- 0x1852, 0x482e, 0x6076, 0x840a, 0x309a,
- 0x2452, 0x542e, 0x6c76, 0x0c0a, 0x3c9a,
- 0x3052, 0x602e, 0x7876, 0x180a, 0x489a,
- 0x3c52, 0x6c2e, 0x8476, 0x240a, 0x549a,
- 0x4852, 0x782e, 0x0c76, 0x300a, 0x609a,
- 0x5452, 0x842e, 0x1876, 0x3c0a, 0x6c9a,
- 0x6052, 0x0c2e, 0x2476, 0x480a, 0x789a,
- 0x6c52, 0x182e, 0x3076, 0x540a, 0x849a,
- 0x7852, 0x242e, 0x3c76, 0x600a, 0x0c9a,
- 0x8454, 0x3030, 0x4878, 0x6c0c, 0x189c,
- 0x0c54, 0x3c30, 0x5478, 0x780c, 0x249c,
- 0x1854, 0x4830, 0x6078, 0x840c, 0x309c,
- 0x2454, 0x5430, 0x6c78, 0x0c0c, 0x3c9c,
- 0x3054, 0x6030, 0x7878, 0x180c, 0x489c,
- 0x3c54, 0x6c30, 0x8478, 0x240c, 0x549c,
- 0x4854, 0x7830, 0x0c78, 0x300c, 0x609c,
- 0x5454, 0x8430, 0x1878, 0x3c0c, 0x6c9c,
- 0x6054, 0x0c30, 0x2478, 0x480c, 0x789c,
- 0x6c54, 0x1830, 0x3078, 0x540c, 0x849c,
- 0x7854, 0x2430, 0x3c78, 0x600c, 0x0c9c,
- 0x8456, 0x3032, 0x487a, 0x6c0e, 0x189e,
- 0x0c56, 0x3c32, 0x547a, 0x780e, 0x249e,
- 0x1856, 0x4832, 0x607a, 0x840e, 0x309e,
- 0x2456, 0x5432, 0x6c7a, 0x0c0e, 0x3c9e,
- 0x3056, 0x6032, 0x787a, 0x180e, 0x489e,
- 0x3c56, 0x6c32, 0x847a, 0x240e, 0x549e,
- 0x4856, 0x7832, 0x0c7a, 0x300e, 0x609e,
- 0x5456, 0x8432, 0x187a, 0x3c0e, 0x6c9e,
- 0x6056, 0x0c32, 0x247a, 0x480e, 0x789e,
- 0x6c56, 0x1832, 0x307a, 0x540e, 0x849e,
- 0x7856, 0x2432, 0x3c7a, 0x600e, 0x0c9e,
- 0x8458, 0x3034, 0x487c, 0x6c10, 0x18a0,
- 0x0c58, 0x3c34, 0x547c, 0x7810, 0x24a0,
- 0x1858, 0x4834, 0x607c, 0x8410, 0x30a0,
- 0x2458, 0x5434, 0x6c7c, 0x0c10, 0x3ca0,
- 0x3058, 0x6034, 0x787c, 0x1810, 0x48a0,
- 0x3c58, 0x6c34, 0x847c, 0x2410, 0x54a0,
- 0x4858, 0x7834, 0x0c7c, 0x3010, 0x60a0,
- 0x5458, 0x8434, 0x187c, 0x3c10, 0x6ca0,
- 0x6058, 0x0c34, 0x247c, 0x4810, 0x78a0,
- 0x6c58, 0x1834, 0x307c, 0x5410, 0x84a0,
- 0x7858, 0x2434, 0x3c7c, 0x6010, 0x0ca0,
- 0x7c48, 0x2824, 0x406c, 0x6400, 0x1090,
- 0x0448, 0x3424, 0x4c6c, 0x7000, 0x1c90,
- 0x1048, 0x4024, 0x586c, 0x7c00, 0x2890,
- 0x1c48, 0x4c24, 0x646c, 0x0400, 0x3490,
- 0x2848, 0x5824, 0x706c, 0x1000, 0x4090,
- 0x3448, 0x6424, 0x7c6c, 0x1c00, 0x4c90,
- 0x4048, 0x7024, 0x046c, 0x2800, 0x5890,
- 0x4c48, 0x7c24, 0x106c, 0x3400, 0x6490,
- 0x5848, 0x0424, 0x1c6c, 0x4000, 0x7090,
- 0x6448, 0x1024, 0x286c, 0x4c00, 0x7c90,
- 0x7048, 0x1c24, 0x346c, 0x5800, 0x0490,
- 0x7c4a, 0x2826, 0x406e, 0x6402, 0x1092,
- 0x044a, 0x3426, 0x4c6e, 0x7002, 0x1c92,
- 0x104a, 0x4026, 0x586e, 0x7c02, 0x2892,
- 0x1c4a, 0x4c26, 0x646e, 0x0402, 0x3492,
- 0x284a, 0x5826, 0x706e, 0x1002, 0x4092,
- 0x344a, 0x6426, 0x7c6e, 0x1c02, 0x4c92,
- 0x404a, 0x7026, 0x046e, 0x2802, 0x5892,
- 0x4c4a, 0x7c26, 0x106e, 0x3402, 0x6492,
- 0x584a, 0x0426, 0x1c6e, 0x4002, 0x7092,
- 0x644a, 0x1026, 0x286e, 0x4c02, 0x7c92,
- 0x704a, 0x1c26, 0x346e, 0x5802, 0x0492,
- 0x7c4c, 0x2828, 0x4070, 0x6404, 0x1094,
- 0x044c, 0x3428, 0x4c70, 0x7004, 0x1c94,
- 0x104c, 0x4028, 0x5870, 0x7c04, 0x2894,
- 0x1c4c, 0x4c28, 0x6470, 0x0404, 0x3494,
- 0x284c, 0x5828, 0x7070, 0x1004, 0x4094,
- 0x285a, 0x5836, 0x707e, 0x1012, 0x40a2,
- 0x345a, 0x6436, 0x7c7e, 0x1c12, 0x4ca2,
- 0x405a, 0x7036, 0x047e, 0x2812, 0x58a2,
- 0x4c5a, 0x7c36, 0x107e, 0x3412, 0x64a2,
- 0x585a, 0x0436, 0x1c7e, 0x4012, 0x70a2,
- 0x645a, 0x1036, 0x287e, 0x4c12, 0x7ca2,
- 0x705a, 0x1c36, 0x347e, 0x5812, 0x04a2,
- 0x7c5a, 0x2836, 0x407e, 0x6412, 0x10a2,
- 0x045a, 0x3436, 0x4c7e, 0x7012, 0x1ca2,
- 0x105a, 0x4036, 0x587e, 0x7c12, 0x28a2,
- 0x1c5a, 0x4c36, 0x647e, 0x0412, 0x34a2,
- 0x285c, 0x5838, 0x7080, 0x1014, 0x40a4,
- 0x345c, 0x6438, 0x7c80, 0x1c14, 0x4ca4,
- 0x405c, 0x7038, 0x0480, 0x2814, 0x58a4,
- 0x4c5c, 0x7c38, 0x1080, 0x3414, 0x64a4,
- 0x585c, 0x0438, 0x1c80, 0x4014, 0x70a4,
- 0x645c, 0x1038, 0x2880, 0x4c14, 0x7ca4,
- 0x705c, 0x1c38, 0x3480, 0x5814, 0x04a4,
- 0x7c5c, 0x2838, 0x4080, 0x6414, 0x10a4,
- 0x045c, 0x3438, 0x4c80, 0x7014, 0x1ca4,
- 0x105c, 0x4038, 0x5880, 0x7c14, 0x28a4,
- 0x1c5c, 0x4c38, 0x6480, 0x0414, 0x34a4,
- 0x285e, 0x583a, 0x7082, 0x1016, 0x40a6,
- 0x345e, 0x643a, 0x7c82, 0x1c16, 0x4ca6,
- 0x405e, 0x703a, 0x0482, 0x2816, 0x58a6,
- 0x4c5e, 0x7c3a, 0x1082, 0x3416, 0x64a6,
- 0x585e, 0x043a, 0x1c82, 0x4016, 0x70a6,
- 0x645e, 0x103a, 0x2882, 0x4c16, 0x7ca6,
- 0x705e, 0x1c3a, 0x3482, 0x5816, 0x04a6,
- 0x7c5e, 0x283a, 0x4082, 0x6416, 0x10a6,
- 0x045e, 0x343a, 0x4c82, 0x7016, 0x1ca6,
- 0x105e, 0x403a, 0x5882, 0x7c16, 0x28a6,
- 0x1c5e, 0x4c3a, 0x6482, 0x0416, 0x34a6,
- 0x2860, 0x583c, 0x7084, 0x1018, 0x40a8,
- 0x3460, 0x643c, 0x7c84, 0x1c18, 0x4ca8,
- 0x4060, 0x703c, 0x0484, 0x2818, 0x58a8,
- 0x4c60, 0x7c3c, 0x1084, 0x3418, 0x64a8,
- 0x5860, 0x043c, 0x1c84, 0x4018, 0x70a8,
- 0x6460, 0x103c, 0x2884, 0x4c18, 0x7ca8,
- 0x7060, 0x1c3c, 0x3484, 0x5818, 0x04a8,
- 0x7c60, 0x283c, 0x4084, 0x6418, 0x10a8,
- 0x0460, 0x343c, 0x4c84, 0x7018, 0x1ca8,
- 0x1060, 0x403c, 0x5884, 0x7c18, 0x28a8,
- 0x1c60, 0x4c3c, 0x6484, 0x0418, 0x34a8,
- 0x2862, 0x583e, 0x7086, 0x101a, 0x40aa,
- 0x3462, 0x643e, 0x7c86, 0x1c1a, 0x4caa,
- 0x4062, 0x703e, 0x0486, 0x281a, 0x58aa,
- 0x4c62, 0x7c3e, 0x1086, 0x341a, 0x64aa,
- 0x5862, 0x043e, 0x1c86, 0x401a, 0x70aa,
- 0x6462, 0x103e, 0x2886, 0x4c1a, 0x7caa,
- 0x7062, 0x1c3e, 0x3486, 0x581a, 0x04aa,
- 0x7c62, 0x283e, 0x4086, 0x641a, 0x10aa,
- 0x0462, 0x343e, 0x4c86, 0x701a, 0x1caa,
- 0x1062, 0x403e, 0x5886, 0x7c1a, 0x28aa,
- 0x1c62, 0x4c3e, 0x6486, 0x041a, 0x34aa,
- 0x2864, 0x5840, 0x7088, 0x101c, 0x40ac,
- 0x3464, 0x6440, 0x7c88, 0x1c1c, 0x4cac,
- 0x4064, 0x7040, 0x0488, 0x281c, 0x58ac,
- 0x4c64, 0x7c40, 0x1088, 0x341c, 0x64ac,
- 0x5864, 0x0440, 0x1c88, 0x401c, 0x70ac,
- 0x6464, 0x1040, 0x2888, 0x4c1c, 0x7cac,
- 0x7064, 0x1c40, 0x3488, 0x581c, 0x04ac,
- 0x7c64, 0x2840, 0x4088, 0x641c, 0x10ac,
- 0x0464, 0x3440, 0x4c88, 0x701c, 0x1cac,
- 0x1064, 0x4040, 0x5888, 0x7c1c, 0x28ac,
- 0x1c64, 0x4c40, 0x6488, 0x041c, 0x34ac,
- 0x2866, 0x5842, 0x708a, 0x101e, 0x40ae,
- 0x3466, 0x6442, 0x7c8a, 0x1c1e, 0x4cae,
- 0x4066, 0x7042, 0x048a, 0x281e, 0x58ae,
- 0x4c66, 0x7c42, 0x108a, 0x341e, 0x64ae,
- 0x5866, 0x0442, 0x1c8a, 0x401e, 0x70ae,
- 0x6466, 0x1042, 0x288a, 0x4c1e, 0x7cae,
- 0x7066, 0x1c42, 0x348a, 0x581e, 0x04ae,
- 0x7c66, 0x2842, 0x408a, 0x641e, 0x10ae,
- 0x0466, 0x3442, 0x4c8a, 0x701e, 0x1cae,
- 0x1066, 0x4042, 0x588a, 0x7c1e, 0x28ae,
- 0x1c66, 0x4c42, 0x648a, 0x041e, 0x34ae,
- 0x2868, 0x5844, 0x708c, 0x1020, 0x40b0,
- 0x3468, 0x6444, 0x7c8c, 0x1c20, 0x4cb0,
- 0x4068, 0x7044, 0x048c, 0x2820, 0x58b0,
- 0x4c68, 0x7c44, 0x108c, 0x3420, 0x64b0,
- 0x5868, 0x0444, 0x1c8c, 0x4020, 0x70b0,
- 0x6468, 0x1044, 0x288c, 0x4c20, 0x7cb0,
- 0x7068, 0x1c44, 0x348c, 0x5820, 0x04b0,
- 0x7c68, 0x2844, 0x408c, 0x6420, 0x10b0,
- 0x0468, 0x3444, 0x4c8c, 0x7020, 0x1cb0,
- 0x1068, 0x4044, 0x588c, 0x7c20, 0x28b0,
- 0x1c68, 0x4c44, 0x648c, 0x0420, 0x34b0,
- 0x286a, 0x5846, 0x708e, 0x1022, 0x40b2,
- 0x346a, 0x6446, 0x7c8e, 0x1c22, 0x4cb2,
- 0x406a, 0x7046, 0x048e, 0x2822, 0x58b2,
- 0x4c6a, 0x7c46, 0x108e, 0x3422, 0x64b2,
- 0x586a, 0x0446, 0x1c8e, 0x4022, 0x70b2,
- 0x646a, 0x1046, 0x288e, 0x4c22, 0x7cb2,
- 0x706a, 0x1c46, 0x348e, 0x5822, 0x04b2,
- 0x7c6a, 0x2846, 0x408e, 0x6422, 0x10b2,
- 0x046a, 0x3446, 0x4c8e, 0x7022, 0x1cb2,
- 0x106a, 0x4046, 0x588e, 0x7c22, 0x28b2,
- 0x1c6a, 0x4c46, 0x648e, 0x0422, 0x34b2,
- 0x2c5a, 0x5c36, 0x747e, 0x1412, 0x44a2,
- 0x385a, 0x6836, 0x807e, 0x2012, 0x50a2,
- 0x445a, 0x7436, 0x087e, 0x2c12, 0x5ca2,
- 0x505a, 0x8036, 0x147e, 0x3812, 0x68a2,
- 0x5c5a, 0x0836, 0x207e, 0x4412, 0x74a2,
- 0x685a, 0x1436, 0x2c7e, 0x5012, 0x80a2,
- 0x745a, 0x2036, 0x387e, 0x5c12, 0x08a2,
- 0x805a, 0x2c36, 0x447e, 0x6812, 0x14a2,
- 0x085a, 0x3836, 0x507e, 0x7412, 0x20a2,
- 0x145a, 0x4436, 0x5c7e, 0x8012, 0x2ca2,
- 0x205a, 0x5036, 0x687e, 0x0812, 0x38a2,
- 0x2c5c, 0x5c38, 0x7480, 0x1414, 0x44a4,
- 0x385c, 0x6838, 0x8080, 0x2014, 0x50a4,
- 0x445c, 0x7438, 0x0880, 0x2c14, 0x5ca4,
- 0x505c, 0x8038, 0x1480, 0x3814, 0x68a4,
- 0x5c5c, 0x0838, 0x2080, 0x4414, 0x74a4,
- 0x685c, 0x1438, 0x2c80, 0x5014, 0x80a4,
- 0x745c, 0x2038, 0x3880, 0x5c14, 0x08a4,
- 0x805c, 0x2c38, 0x4480, 0x6814, 0x14a4,
- 0x085c, 0x3838, 0x5080, 0x7414, 0x20a4,
- 0x145c, 0x4438, 0x5c80, 0x8014, 0x2ca4,
- 0x205c, 0x5038, 0x6880, 0x0814, 0x38a4,
- 0x2c5e, 0x5c3a, 0x7482, 0x1416, 0x44a6,
- 0x385e, 0x683a, 0x8082, 0x2016, 0x50a6,
- 0x445e, 0x743a, 0x0882, 0x2c16, 0x5ca6,
- 0x505e, 0x803a, 0x1482, 0x3816, 0x68a6,
- 0x5c5e, 0x083a, 0x2082, 0x4416, 0x74a6,
- 0x685e, 0x143a, 0x2c82, 0x5016, 0x80a6,
- 0x745e, 0x203a, 0x3882, 0x5c16, 0x08a6,
- 0x805e, 0x2c3a, 0x4482, 0x6816, 0x14a6,
- 0x085e, 0x383a, 0x5082, 0x7416, 0x20a6,
- 0x145e, 0x443a, 0x5c82, 0x8016, 0x2ca6,
- 0x205e, 0x503a, 0x6882, 0x0816, 0x38a6,
- 0x2c60, 0x5c3c, 0x7484, 0x1418, 0x44a8,
- 0x3860, 0x683c, 0x8084, 0x2018, 0x50a8,
- 0x4460, 0x743c, 0x0884, 0x2c18, 0x5ca8,
- 0x5060, 0x803c, 0x1484, 0x3818, 0x68a8,
- 0x5c60, 0x083c, 0x2084, 0x4418, 0x74a8,
- 0x6860, 0x143c, 0x2c84, 0x5018, 0x80a8,
- 0x7460, 0x203c, 0x3884, 0x5c18, 0x08a8,
- 0x8060, 0x2c3c, 0x4484, 0x6818, 0x14a8,
- 0x0860, 0x383c, 0x5084, 0x7418, 0x20a8,
- 0x1460, 0x443c, 0x5c84, 0x8018, 0x2ca8,
- 0x2060, 0x503c, 0x6884, 0x0818, 0x38a8,
- 0x2c62, 0x5c3e, 0x7486, 0x141a, 0x44aa,
- 0x3862, 0x683e, 0x8086, 0x201a, 0x50aa,
- 0x4462, 0x743e, 0x0886, 0x2c1a, 0x5caa,
- 0x5062, 0x803e, 0x1486, 0x381a, 0x68aa,
- 0x5c62, 0x083e, 0x2086, 0x441a, 0x74aa,
- 0x6862, 0x143e, 0x2c86, 0x501a, 0x80aa,
- 0x7462, 0x203e, 0x3886, 0x5c1a, 0x08aa,
- 0x8062, 0x2c3e, 0x4486, 0x681a, 0x14aa,
- 0x0862, 0x383e, 0x5086, 0x741a, 0x20aa,
- 0x1462, 0x443e, 0x5c86, 0x801a, 0x2caa,
- 0x2062, 0x503e, 0x6886, 0x081a, 0x38aa,
- 0x2c64, 0x5c40, 0x7488, 0x141c, 0x44ac,
- 0x3864, 0x6840, 0x8088, 0x201c, 0x50ac,
- 0x4464, 0x7440, 0x0888, 0x2c1c, 0x5cac,
- 0x5064, 0x8040, 0x1488, 0x381c, 0x68ac,
- 0x5c64, 0x0840, 0x2088, 0x441c, 0x74ac,
- 0x6864, 0x1440, 0x2c88, 0x501c, 0x80ac,
- 0x7464, 0x2040, 0x3888, 0x5c1c, 0x08ac,
- 0x8064, 0x2c40, 0x4488, 0x681c, 0x14ac,
- 0x0864, 0x3840, 0x5088, 0x741c, 0x20ac,
- 0x1464, 0x4440, 0x5c88, 0x801c, 0x2cac,
- 0x2064, 0x5040, 0x6888, 0x081c, 0x38ac,
- 0x2c66, 0x5c42, 0x748a, 0x141e, 0x44ae,
- 0x3866, 0x6842, 0x808a, 0x201e, 0x50ae,
- 0x4466, 0x7442, 0x088a, 0x2c1e, 0x5cae,
- 0x5066, 0x8042, 0x148a, 0x381e, 0x68ae,
- 0x5c66, 0x0842, 0x208a, 0x441e, 0x74ae,
- 0x6866, 0x1442, 0x2c8a, 0x501e, 0x80ae,
- 0x7466, 0x2042, 0x388a, 0x5c1e, 0x08ae,
- 0x8066, 0x2c42, 0x448a, 0x681e, 0x14ae,
- 0x0866, 0x3842, 0x508a, 0x741e, 0x20ae,
- 0x1466, 0x4442, 0x5c8a, 0x801e, 0x2cae,
- 0x2066, 0x5042, 0x688a, 0x081e, 0x38ae,
- 0x2c68, 0x5c44, 0x748c, 0x1420, 0x44b0,
- 0x3868, 0x6844, 0x808c, 0x2020, 0x50b0,
- 0x4468, 0x7444, 0x088c, 0x2c20, 0x5cb0,
- 0x5068, 0x8044, 0x148c, 0x3820, 0x68b0,
- 0x5c68, 0x0844, 0x208c, 0x4420, 0x74b0,
- 0x6868, 0x1444, 0x2c8c, 0x5020, 0x80b0,
- 0x7468, 0x2044, 0x388c, 0x5c20, 0x08b0,
- 0x8068, 0x2c44, 0x448c, 0x6820, 0x14b0,
- 0x0868, 0x3844, 0x508c, 0x7420, 0x20b0,
- 0x1468, 0x4444, 0x5c8c, 0x8020, 0x2cb0,
- 0x2068, 0x5044, 0x688c, 0x0820, 0x38b0,
- 0x2c6a, 0x5c46, 0x748e, 0x1422, 0x44b2,
- 0x386a, 0x6846, 0x808e, 0x2022, 0x50b2,
- 0x446a, 0x7446, 0x088e, 0x2c22, 0x5cb2,
- 0x506a, 0x8046, 0x148e, 0x3822, 0x68b2,
- 0x5c6a, 0x0846, 0x208e, 0x4422, 0x74b2,
- 0x686a, 0x1446, 0x2c8e, 0x5022, 0x80b2,
- 0x746a, 0x2046, 0x388e, 0x5c22, 0x08b2,
- 0x806a, 0x2c46, 0x448e, 0x6822, 0x14b2,
- 0x086a, 0x3846, 0x508e, 0x7422, 0x20b2,
- 0x146a, 0x4446, 0x5c8e, 0x8022, 0x2cb2,
- 0x206a, 0x5046, 0x688e, 0x0822, 0x38b2,
- 0x305a, 0x6036, 0x787e, 0x1812, 0x48a2,
- 0x3c5a, 0x6c36, 0x847e, 0x2412, 0x54a2,
- 0x485a, 0x7836, 0x0c7e, 0x3012, 0x60a2,
- 0x545a, 0x8436, 0x187e, 0x3c12, 0x6ca2,
- 0x605a, 0x0c36, 0x247e, 0x4812, 0x78a2,
- 0x6c5a, 0x1836, 0x307e, 0x5412, 0x84a2,
- 0x785a, 0x2436, 0x3c7e, 0x6012, 0x0ca2,
- 0x845a, 0x3036, 0x487e, 0x6c12, 0x18a2,
- 0x0c5a, 0x3c36, 0x547e, 0x7812, 0x24a2,
- 0x185a, 0x4836, 0x607e, 0x8412, 0x30a2,
- 0x245a, 0x5436, 0x6c7e, 0x0c12, 0x3ca2,
- 0x305c, 0x6038, 0x7880, 0x1814, 0x48a4,
- 0x3c5c, 0x6c38, 0x8480, 0x2414, 0x54a4,
- 0x485c, 0x7838, 0x0c80, 0x3014, 0x60a4,
- 0x545c, 0x8438, 0x1880, 0x3c14, 0x6ca4,
- 0x605c, 0x0c38, 0x2480, 0x4814, 0x78a4,
- 0x6c5c, 0x1838, 0x3080, 0x5414, 0x84a4,
- 0x785c, 0x2438, 0x3c80, 0x6014, 0x0ca4,
- 0x845c, 0x3038, 0x4880, 0x6c14, 0x18a4,
- 0x0c5c, 0x3c38, 0x5480, 0x7814, 0x24a4,
- 0x185c, 0x4838, 0x6080, 0x8414, 0x30a4,
- 0x245c, 0x5438, 0x6c80, 0x0c14, 0x3ca4,
- 0x305e, 0x603a, 0x7882, 0x1816, 0x48a6,
- 0x3c5e, 0x6c3a, 0x8482, 0x2416, 0x54a6,
- 0x485e, 0x783a, 0x0c82, 0x3016, 0x60a6,
- 0x545e, 0x843a, 0x1882, 0x3c16, 0x6ca6,
- 0x605e, 0x0c3a, 0x2482, 0x4816, 0x78a6,
- 0x6c5e, 0x183a, 0x3082, 0x5416, 0x84a6,
- 0x785e, 0x243a, 0x3c82, 0x6016, 0x0ca6,
- 0x845e, 0x303a, 0x4882, 0x6c16, 0x18a6,
- 0x0c5e, 0x3c3a, 0x5482, 0x7816, 0x24a6,
- 0x185e, 0x483a, 0x6082, 0x8416, 0x30a6,
- 0x245e, 0x543a, 0x6c82, 0x0c16, 0x3ca6,
- 0x3060, 0x603c, 0x7884, 0x1818, 0x48a8,
- 0x3c60, 0x6c3c, 0x8484, 0x2418, 0x54a8,
- 0x4860, 0x783c, 0x0c84, 0x3018, 0x60a8,
- 0x5460, 0x843c, 0x1884, 0x3c18, 0x6ca8,
- 0x6060, 0x0c3c, 0x2484, 0x4818, 0x78a8,
- 0x6c60, 0x183c, 0x3084, 0x5418, 0x84a8,
- 0x7860, 0x243c, 0x3c84, 0x6018, 0x0ca8,
- 0x8460, 0x303c, 0x4884, 0x6c18, 0x18a8,
- 0x0c60, 0x3c3c, 0x5484, 0x7818, 0x24a8,
- 0x1860, 0x483c, 0x6084, 0x8418, 0x30a8,
- 0x2460, 0x543c, 0x6c84, 0x0c18, 0x3ca8,
- 0x3062, 0x603e, 0x7886, 0x181a, 0x48aa,
- 0x3c62, 0x6c3e, 0x8486, 0x241a, 0x54aa,
- 0x4862, 0x783e, 0x0c86, 0x301a, 0x60aa,
- 0x5462, 0x843e, 0x1886, 0x3c1a, 0x6caa,
- 0x6062, 0x0c3e, 0x2486, 0x481a, 0x78aa,
- 0x6c62, 0x183e, 0x3086, 0x541a, 0x84aa,
- 0x7862, 0x243e, 0x3c86, 0x601a, 0x0caa,
- 0x8462, 0x303e, 0x4886, 0x6c1a, 0x18aa,
- 0x0c62, 0x3c3e, 0x5486, 0x781a, 0x24aa,
- 0x1862, 0x483e, 0x6086, 0x841a, 0x30aa,
- 0x2462, 0x543e, 0x6c86, 0x0c1a, 0x3caa,
- 0x3064, 0x6040, 0x7888, 0x181c, 0x48ac,
- 0x3c64, 0x6c40, 0x8488, 0x241c, 0x54ac,
- 0x4864, 0x7840, 0x0c88, 0x301c, 0x60ac,
- 0x5464, 0x8440, 0x1888, 0x3c1c, 0x6cac,
- 0x6064, 0x0c40, 0x2488, 0x481c, 0x78ac,
- 0x6c64, 0x1840, 0x3088, 0x541c, 0x84ac,
- 0x7864, 0x2440, 0x3c88, 0x601c, 0x0cac,
- 0x8464, 0x3040, 0x4888, 0x6c1c, 0x18ac,
- 0x0c64, 0x3c40, 0x5488, 0x781c, 0x24ac,
- 0x1864, 0x4840, 0x6088, 0x841c, 0x30ac,
- 0x2464, 0x5440, 0x6c88, 0x0c1c, 0x3cac,
- 0x3066, 0x6042, 0x788a, 0x181e, 0x48ae,
- 0x3c66, 0x6c42, 0x848a, 0x241e, 0x54ae,
- 0x4866, 0x7842, 0x0c8a, 0x301e, 0x60ae,
- 0x5466, 0x8442, 0x188a, 0x3c1e, 0x6cae,
- 0x6066, 0x0c42, 0x248a, 0x481e, 0x78ae,
- 0x6c66, 0x1842, 0x308a, 0x541e, 0x84ae,
- 0x7866, 0x2442, 0x3c8a, 0x601e, 0x0cae,
- 0x8466, 0x3042, 0x488a, 0x6c1e, 0x18ae,
- 0x0c66, 0x3c42, 0x548a, 0x781e, 0x24ae,
- 0x1866, 0x4842, 0x608a, 0x841e, 0x30ae,
- 0x2466, 0x5442, 0x6c8a, 0x0c1e, 0x3cae,
- 0x3068, 0x6044, 0x788c, 0x1820, 0x48b0,
- 0x3c68, 0x6c44, 0x848c, 0x2420, 0x54b0,
- 0x4868, 0x7844, 0x0c8c, 0x3020, 0x60b0,
- 0x5468, 0x8444, 0x188c, 0x3c20, 0x6cb0,
- 0x6068, 0x0c44, 0x248c, 0x4820, 0x78b0,
- 0x6c68, 0x1844, 0x308c, 0x5420, 0x84b0,
- 0x7868, 0x2444, 0x3c8c, 0x6020, 0x0cb0,
- 0x8468, 0x3044, 0x488c, 0x6c20, 0x18b0,
- 0x0c68, 0x3c44, 0x548c, 0x7820, 0x24b0,
- 0x1868, 0x4844, 0x608c, 0x8420, 0x30b0,
- 0x2468, 0x5444, 0x6c8c, 0x0c20, 0x3cb0,
- 0x306a, 0x6046, 0x788e, 0x1822, 0x48b2,
- 0x3c6a, 0x6c46, 0x848e, 0x2422, 0x54b2,
- 0x486a, 0x7846, 0x0c8e, 0x3022, 0x60b2,
- 0x546a, 0x8446, 0x188e, 0x3c22, 0x6cb2,
- 0x606a, 0x0c46, 0x248e, 0x4822, 0x78b2,
- 0x6c6a, 0x1846, 0x308e, 0x5422, 0x84b2,
- 0x786a, 0x2446, 0x3c8e, 0x6022, 0x0cb2,
- 0x846a, 0x3046, 0x488e, 0x6c22, 0x18b2,
- 0x0c6a, 0x3c46, 0x548e, 0x7822, 0x24b2,
- 0x186a, 0x4846, 0x608e, 0x8422, 0x30b2,
- 0x246a, 0x5446, 0x6c8e, 0x0c22, 0x3cb2,
- 0x285a, 0x5836, 0x707e, 0x1012, 0x40a2,
- 0x345a, 0x6436, 0x7c7e, 0x1c12, 0x4ca2,
- 0x405a, 0x7036, 0x047e, 0x2812, 0x58a2,
- 0x4c5a, 0x7c36, 0x107e, 0x3412, 0x64a2,
- 0x585a, 0x0436, 0x1c7e, 0x4012, 0x70a2,
- 0x645a, 0x1036, 0x287e, 0x4c12, 0x7ca2,
- 0x705a, 0x1c36, 0x347e, 0x5812, 0x04a2,
- 0x7c5a, 0x2836, 0x407e, 0x6412, 0x10a2,
- 0x045a, 0x3436, 0x4c7e, 0x7012, 0x1ca2,
- 0x105a, 0x4036, 0x587e, 0x7c12, 0x28a2,
- 0x1c5a, 0x4c36, 0x647e, 0x0412, 0x34a2,
- 0x285c, 0x5838, 0x7080, 0x1014, 0x40a4,
- 0x345c, 0x6438, 0x7c80, 0x1c14, 0x4ca4,
- 0x405c, 0x7038, 0x0480, 0x2814, 0x58a4,
- 0x4c5c, 0x7c38, 0x1080, 0x3414, 0x64a4,
- 0x585c, 0x0438, 0x1c80, 0x4014, 0x70a4,
- 0x645c, 0x1038, 0x2880, 0x4c14, 0x7ca4,
- 0x705c, 0x1c38, 0x3480, 0x5814, 0x04a4,
- 0x7c5c, 0x2838, 0x4080, 0x6414, 0x10a4,
- 0x045c, 0x3438, 0x4c80, 0x7014, 0x1ca4,
- 0x105c, 0x4038, 0x5880, 0x7c14, 0x28a4,
- 0x1c5c, 0x4c38, 0x6480, 0x0414, 0x34a4,
- 0x285e, 0x583a, 0x7082, 0x1016, 0x40a6,
- 0x345e, 0x643a, 0x7c82, 0x1c16, 0x4ca6,
- 0x405e, 0x703a, 0x0482, 0x2816, 0x58a6,
- 0x4c5e, 0x7c3a, 0x1082, 0x3416, 0x64a6,
- 0x585e, 0x043a, 0x1c82, 0x4016, 0x70a6,
-};
-
-static const uint16_t dv_place_720p60[2*10*27*5] = {
- 0x1230, 0x3618, 0x4848, 0x0000, 0x2460,
- 0x2430, 0x4818, 0x0048, 0x1200, 0x3660,
- 0x3630, 0x0018, 0x1248, 0x2400, 0x4860,
- 0x4830, 0x1218, 0x2448, 0x3600, 0x0060,
- 0x0030, 0x2418, 0x3648, 0x4800, 0x1260,
- 0x1232, 0x361a, 0x484a, 0x0002, 0x2462,
- 0x2432, 0x481a, 0x004a, 0x1202, 0x3662,
- 0x3632, 0x001a, 0x124a, 0x2402, 0x4862,
- 0x4832, 0x121a, 0x244a, 0x3602, 0x0062,
- 0x0032, 0x241a, 0x364a, 0x4802, 0x1262,
- 0x1234, 0x361c, 0x484c, 0x0004, 0x2464,
- 0x2434, 0x481c, 0x004c, 0x1204, 0x3664,
- 0x3634, 0x001c, 0x124c, 0x2404, 0x4864,
- 0x4834, 0x121c, 0x244c, 0x3604, 0x0064,
- 0x0034, 0x241c, 0x364c, 0x4804, 0x1264,
- 0x1236, 0x361e, 0x484e, 0x0006, 0x2466,
- 0x2436, 0x481e, 0x004e, 0x1206, 0x3666,
- 0x3636, 0x001e, 0x124e, 0x2406, 0x4866,
- 0x4836, 0x121e, 0x244e, 0x3606, 0x0066,
- 0x0036, 0x241e, 0x364e, 0x4806, 0x1266,
- 0x1238, 0x3620, 0x4850, 0x0008, 0x2468,
- 0x2438, 0x4820, 0x0050, 0x1208, 0x3668,
- 0x3638, 0x0020, 0x1250, 0x2408, 0x4868,
- 0x4838, 0x1220, 0x2450, 0x3608, 0x0068,
- 0x0038, 0x2420, 0x3650, 0x4808, 0x1268,
- 0x123a, 0x3622, 0x4852, 0x000a, 0x246a,
- 0x243a, 0x4822, 0x0052, 0x120a, 0x366a,
- 0x363a, 0x0022, 0x1252, 0x240a, 0x486a,
- 0x483a, 0x1222, 0x2452, 0x360a, 0x006a,
- 0x003a, 0x2422, 0x3652, 0x480a, 0x126a,
- 0x1430, 0x3818, 0x4a48, 0x0200, 0x2660,
- 0x2630, 0x4a18, 0x0248, 0x1400, 0x3860,
- 0x3830, 0x0218, 0x1448, 0x2600, 0x4a60,
- 0x4a30, 0x1418, 0x2648, 0x3800, 0x0260,
- 0x0230, 0x2618, 0x3848, 0x4a00, 0x1460,
- 0x1432, 0x381a, 0x4a4a, 0x0202, 0x2662,
- 0x2632, 0x4a1a, 0x024a, 0x1402, 0x3862,
- 0x3832, 0x021a, 0x144a, 0x2602, 0x4a62,
- 0x4a32, 0x141a, 0x264a, 0x3802, 0x0262,
- 0x0232, 0x261a, 0x384a, 0x4a02, 0x1462,
- 0x1434, 0x381c, 0x4a4c, 0x0204, 0x2664,
- 0x2634, 0x4a1c, 0x024c, 0x1404, 0x3864,
- 0x3834, 0x021c, 0x144c, 0x2604, 0x4a64,
- 0x4a34, 0x141c, 0x264c, 0x3804, 0x0264,
- 0x0234, 0x261c, 0x384c, 0x4a04, 0x1464,
- 0x1436, 0x381e, 0x4a4e, 0x0206, 0x2666,
- 0x2636, 0x4a1e, 0x024e, 0x1406, 0x3866,
- 0x3836, 0x021e, 0x144e, 0x2606, 0x4a66,
- 0x4a36, 0x141e, 0x264e, 0x3806, 0x0266,
- 0x0236, 0x261e, 0x384e, 0x4a06, 0x1466,
- 0x1438, 0x3820, 0x4a50, 0x0208, 0x2668,
- 0x2638, 0x4a20, 0x0250, 0x1408, 0x3868,
- 0x3838, 0x0220, 0x1450, 0x2608, 0x4a68,
- 0x4a38, 0x1420, 0x2650, 0x3808, 0x0268,
- 0x0238, 0x2620, 0x3850, 0x4a08, 0x1468,
- 0x143a, 0x3822, 0x4a52, 0x020a, 0x266a,
- 0x263a, 0x4a22, 0x0252, 0x140a, 0x386a,
- 0x383a, 0x0222, 0x1452, 0x260a, 0x4a6a,
- 0x4a3a, 0x1422, 0x2652, 0x380a, 0x026a,
- 0x023a, 0x2622, 0x3852, 0x4a0a, 0x146a,
- 0x1630, 0x3a18, 0x4c48, 0x0400, 0x2860,
- 0x2830, 0x4c18, 0x0448, 0x1600, 0x3a60,
- 0x3a30, 0x0418, 0x1648, 0x2800, 0x4c60,
- 0x4c30, 0x1618, 0x2848, 0x3a00, 0x0460,
- 0x0430, 0x2818, 0x3a48, 0x4c00, 0x1660,
- 0x1632, 0x3a1a, 0x4c4a, 0x0402, 0x2862,
- 0x2832, 0x4c1a, 0x044a, 0x1602, 0x3a62,
- 0x3a32, 0x041a, 0x164a, 0x2802, 0x4c62,
- 0x4c32, 0x161a, 0x284a, 0x3a02, 0x0462,
- 0x0432, 0x281a, 0x3a4a, 0x4c02, 0x1662,
- 0x1634, 0x3a1c, 0x4c4c, 0x0404, 0x2864,
- 0x2834, 0x4c1c, 0x044c, 0x1604, 0x3a64,
- 0x3a34, 0x041c, 0x164c, 0x2804, 0x4c64,
- 0x4c34, 0x161c, 0x284c, 0x3a04, 0x0464,
- 0x0434, 0x281c, 0x3a4c, 0x4c04, 0x1664,
- 0x1636, 0x3a1e, 0x4c4e, 0x0406, 0x2866,
- 0x2836, 0x4c1e, 0x044e, 0x1606, 0x3a66,
- 0x3a36, 0x041e, 0x164e, 0x2806, 0x4c66,
- 0x4c36, 0x161e, 0x284e, 0x3a06, 0x0466,
- 0x0436, 0x281e, 0x3a4e, 0x4c06, 0x1666,
- 0x1638, 0x3a20, 0x4c50, 0x0408, 0x2868,
- 0x2838, 0x4c20, 0x0450, 0x1608, 0x3a68,
- 0x3a38, 0x0420, 0x1650, 0x2808, 0x4c68,
- 0x4c38, 0x1620, 0x2850, 0x3a08, 0x0468,
- 0x0438, 0x2820, 0x3a50, 0x4c08, 0x1668,
- 0x163a, 0x3a22, 0x4c52, 0x040a, 0x286a,
- 0x283a, 0x4c22, 0x0452, 0x160a, 0x3a6a,
- 0x3a3a, 0x0422, 0x1652, 0x280a, 0x4c6a,
- 0x4c3a, 0x1622, 0x2852, 0x3a0a, 0x046a,
- 0x043a, 0x2822, 0x3a52, 0x4c0a, 0x166a,
- 0x1830, 0x3c18, 0x4e48, 0x0600, 0x2a60,
- 0x2a30, 0x4e18, 0x0648, 0x1800, 0x3c60,
- 0x3c30, 0x0618, 0x1848, 0x2a00, 0x4e60,
- 0x4e30, 0x1818, 0x2a48, 0x3c00, 0x0660,
- 0x0630, 0x2a18, 0x3c48, 0x4e00, 0x1860,
- 0x1832, 0x3c1a, 0x4e4a, 0x0602, 0x2a62,
- 0x2a32, 0x4e1a, 0x064a, 0x1802, 0x3c62,
- 0x3c32, 0x061a, 0x184a, 0x2a02, 0x4e62,
- 0x4e32, 0x181a, 0x2a4a, 0x3c02, 0x0662,
- 0x0632, 0x2a1a, 0x3c4a, 0x4e02, 0x1862,
- 0x1834, 0x3c1c, 0x4e4c, 0x0604, 0x2a64,
- 0x2a34, 0x4e1c, 0x064c, 0x1804, 0x3c64,
- 0x3c34, 0x061c, 0x184c, 0x2a04, 0x4e64,
- 0x4e34, 0x181c, 0x2a4c, 0x3c04, 0x0664,
- 0x0634, 0x2a1c, 0x3c4c, 0x4e04, 0x1864,
- 0x1836, 0x3c1e, 0x4e4e, 0x0606, 0x2a66,
- 0x2a36, 0x4e1e, 0x064e, 0x1806, 0x3c66,
- 0x3c36, 0x061e, 0x184e, 0x2a06, 0x4e66,
- 0x4e36, 0x181e, 0x2a4e, 0x3c06, 0x0666,
- 0x0636, 0x2a1e, 0x3c4e, 0x4e06, 0x1866,
- 0x1838, 0x3c20, 0x4e50, 0x0608, 0x2a68,
- 0x2a38, 0x4e20, 0x0650, 0x1808, 0x3c68,
- 0x3c38, 0x0620, 0x1850, 0x2a08, 0x4e68,
- 0x4e38, 0x1820, 0x2a50, 0x3c08, 0x0668,
- 0x0638, 0x2a20, 0x3c50, 0x4e08, 0x1868,
- 0x183a, 0x3c22, 0x4e52, 0x060a, 0x2a6a,
- 0x2a3a, 0x4e22, 0x0652, 0x180a, 0x3c6a,
- 0x3c3a, 0x0622, 0x1852, 0x2a0a, 0x4e6a,
- 0x4e3a, 0x1822, 0x2a52, 0x3c0a, 0x066a,
- 0x063a, 0x2a22, 0x3c52, 0x4e0a, 0x186a,
- 0x1a30, 0x3e18, 0x5048, 0x0800, 0x2c60,
- 0x2c30, 0x5018, 0x0848, 0x1a00, 0x3e60,
- 0x3e30, 0x0818, 0x1a48, 0x2c00, 0x5060,
- 0x5030, 0x1a18, 0x2c48, 0x3e00, 0x0860,
- 0x0830, 0x2c18, 0x3e48, 0x5000, 0x1a60,
- 0x1a32, 0x3e1a, 0x504a, 0x0802, 0x2c62,
- 0x2c32, 0x501a, 0x084a, 0x1a02, 0x3e62,
- 0x3e32, 0x081a, 0x1a4a, 0x2c02, 0x5062,
- 0x5032, 0x1a1a, 0x2c4a, 0x3e02, 0x0862,
- 0x0832, 0x2c1a, 0x3e4a, 0x5002, 0x1a62,
- 0x1a34, 0x3e1c, 0x504c, 0x0804, 0x2c64,
- 0x2c34, 0x501c, 0x084c, 0x1a04, 0x3e64,
- 0x3e34, 0x081c, 0x1a4c, 0x2c04, 0x5064,
- 0x5034, 0x1a1c, 0x2c4c, 0x3e04, 0x0864,
- 0x0834, 0x2c1c, 0x3e4c, 0x5004, 0x1a64,
- 0x1a36, 0x3e1e, 0x504e, 0x0806, 0x2c66,
- 0x2c36, 0x501e, 0x084e, 0x1a06, 0x3e66,
- 0x3e36, 0x081e, 0x1a4e, 0x2c06, 0x5066,
- 0x5036, 0x1a1e, 0x2c4e, 0x3e06, 0x0866,
- 0x0836, 0x2c1e, 0x3e4e, 0x5006, 0x1a66,
- 0x1a38, 0x3e20, 0x5050, 0x0808, 0x2c68,
- 0x2c38, 0x5020, 0x0850, 0x1a08, 0x3e68,
- 0x3e38, 0x0820, 0x1a50, 0x2c08, 0x5068,
- 0x5038, 0x1a20, 0x2c50, 0x3e08, 0x0868,
- 0x0838, 0x2c20, 0x3e50, 0x5008, 0x1a68,
- 0x1a3a, 0x3e22, 0x5052, 0x080a, 0x2c6a,
- 0x2c3a, 0x5022, 0x0852, 0x1a0a, 0x3e6a,
- 0x3e3a, 0x0822, 0x1a52, 0x2c0a, 0x506a,
- 0x503a, 0x1a22, 0x2c52, 0x3e0a, 0x086a,
- 0x083a, 0x2c22, 0x3e52, 0x500a, 0x1a6a,
- 0x1c30, 0x4018, 0x5248, 0x0a00, 0x2e60,
- 0x2e30, 0x5218, 0x0a48, 0x1c00, 0x4060,
- 0x4030, 0x0a18, 0x1c48, 0x2e00, 0x5260,
- 0x5230, 0x1c18, 0x2e48, 0x4000, 0x0a60,
- 0x0a30, 0x2e18, 0x4048, 0x5200, 0x1c60,
- 0x1c32, 0x401a, 0x524a, 0x0a02, 0x2e62,
- 0x2e32, 0x521a, 0x0a4a, 0x1c02, 0x4062,
- 0x4032, 0x0a1a, 0x1c4a, 0x2e02, 0x5262,
- 0x5232, 0x1c1a, 0x2e4a, 0x4002, 0x0a62,
- 0x0a32, 0x2e1a, 0x404a, 0x5202, 0x1c62,
- 0x1c34, 0x401c, 0x524c, 0x0a04, 0x2e64,
- 0x2e34, 0x521c, 0x0a4c, 0x1c04, 0x4064,
- 0x4034, 0x0a1c, 0x1c4c, 0x2e04, 0x5264,
- 0x5234, 0x1c1c, 0x2e4c, 0x4004, 0x0a64,
- 0x0a34, 0x2e1c, 0x404c, 0x5204, 0x1c64,
- 0x1c36, 0x401e, 0x524e, 0x0a06, 0x2e66,
- 0x2e36, 0x521e, 0x0a4e, 0x1c06, 0x4066,
- 0x4036, 0x0a1e, 0x1c4e, 0x2e06, 0x5266,
- 0x5236, 0x1c1e, 0x2e4e, 0x4006, 0x0a66,
- 0x0a36, 0x2e1e, 0x404e, 0x5206, 0x1c66,
- 0x1c38, 0x4020, 0x5250, 0x0a08, 0x2e68,
- 0x2e38, 0x5220, 0x0a50, 0x1c08, 0x4068,
- 0x4038, 0x0a20, 0x1c50, 0x2e08, 0x5268,
- 0x5238, 0x1c20, 0x2e50, 0x4008, 0x0a68,
- 0x0a38, 0x2e20, 0x4050, 0x5208, 0x1c68,
- 0x1c3a, 0x4022, 0x5252, 0x0a0a, 0x2e6a,
- 0x2e3a, 0x5222, 0x0a52, 0x1c0a, 0x406a,
- 0x403a, 0x0a22, 0x1c52, 0x2e0a, 0x526a,
- 0x523a, 0x1c22, 0x2e52, 0x400a, 0x0a6a,
- 0x0a3a, 0x2e22, 0x4052, 0x520a, 0x1c6a,
- 0x1e30, 0x4218, 0x5448, 0x0c00, 0x3060,
- 0x3030, 0x5418, 0x0c48, 0x1e00, 0x4260,
- 0x4230, 0x0c18, 0x1e48, 0x3000, 0x5460,
- 0x5430, 0x1e18, 0x3048, 0x4200, 0x0c60,
- 0x0c30, 0x3018, 0x4248, 0x5400, 0x1e60,
- 0x1e32, 0x421a, 0x544a, 0x0c02, 0x3062,
- 0x3032, 0x541a, 0x0c4a, 0x1e02, 0x4262,
- 0x4232, 0x0c1a, 0x1e4a, 0x3002, 0x5462,
- 0x5432, 0x1e1a, 0x304a, 0x4202, 0x0c62,
- 0x0c32, 0x301a, 0x424a, 0x5402, 0x1e62,
- 0x1e34, 0x421c, 0x544c, 0x0c04, 0x3064,
- 0x3034, 0x541c, 0x0c4c, 0x1e04, 0x4264,
- 0x4234, 0x0c1c, 0x1e4c, 0x3004, 0x5464,
- 0x5434, 0x1e1c, 0x304c, 0x4204, 0x0c64,
- 0x0c34, 0x301c, 0x424c, 0x5404, 0x1e64,
- 0x1e36, 0x421e, 0x544e, 0x0c06, 0x3066,
- 0x3036, 0x541e, 0x0c4e, 0x1e06, 0x4266,
- 0x4236, 0x0c1e, 0x1e4e, 0x3006, 0x5466,
- 0x5436, 0x1e1e, 0x304e, 0x4206, 0x0c66,
- 0x0c36, 0x301e, 0x424e, 0x5406, 0x1e66,
- 0x1e38, 0x4220, 0x5450, 0x0c08, 0x3068,
- 0x3038, 0x5420, 0x0c50, 0x1e08, 0x4268,
- 0x4238, 0x0c20, 0x1e50, 0x3008, 0x5468,
- 0x5438, 0x1e20, 0x3050, 0x4208, 0x0c68,
- 0x0c38, 0x3020, 0x4250, 0x5408, 0x1e68,
- 0x1e3a, 0x4222, 0x5452, 0x0c0a, 0x306a,
- 0x303a, 0x5422, 0x0c52, 0x1e0a, 0x426a,
- 0x423a, 0x0c22, 0x1e52, 0x300a, 0x546a,
- 0x543a, 0x1e22, 0x3052, 0x420a, 0x0c6a,
- 0x0c3a, 0x3022, 0x4252, 0x540a, 0x1e6a,
- 0x2030, 0x4418, 0x5648, 0x0e00, 0x3260,
- 0x3230, 0x5618, 0x0e48, 0x2000, 0x4460,
- 0x4430, 0x0e18, 0x2048, 0x3200, 0x5660,
- 0x5630, 0x2018, 0x3248, 0x4400, 0x0e60,
- 0x0e30, 0x3218, 0x4448, 0x5600, 0x2060,
- 0x2032, 0x441a, 0x564a, 0x0e02, 0x3262,
- 0x3232, 0x561a, 0x0e4a, 0x2002, 0x4462,
- 0x4432, 0x0e1a, 0x204a, 0x3202, 0x5662,
- 0x5632, 0x201a, 0x324a, 0x4402, 0x0e62,
- 0x0e32, 0x321a, 0x444a, 0x5602, 0x2062,
- 0x2034, 0x441c, 0x564c, 0x0e04, 0x3264,
- 0x3234, 0x561c, 0x0e4c, 0x2004, 0x4464,
- 0x4434, 0x0e1c, 0x204c, 0x3204, 0x5664,
- 0x5634, 0x201c, 0x324c, 0x4404, 0x0e64,
- 0x0e34, 0x321c, 0x444c, 0x5604, 0x2064,
- 0x2036, 0x441e, 0x564e, 0x0e06, 0x3266,
- 0x3236, 0x561e, 0x0e4e, 0x2006, 0x4466,
- 0x4436, 0x0e1e, 0x204e, 0x3206, 0x5666,
- 0x5636, 0x201e, 0x324e, 0x4406, 0x0e66,
- 0x0e36, 0x321e, 0x444e, 0x5606, 0x2066,
- 0x2038, 0x4420, 0x5650, 0x0e08, 0x3268,
- 0x3238, 0x5620, 0x0e50, 0x2008, 0x4468,
- 0x4438, 0x0e20, 0x2050, 0x3208, 0x5668,
- 0x5638, 0x2020, 0x3250, 0x4408, 0x0e68,
- 0x0e38, 0x3220, 0x4450, 0x5608, 0x2068,
- 0x203a, 0x4422, 0x5652, 0x0e0a, 0x326a,
- 0x323a, 0x5622, 0x0e52, 0x200a, 0x446a,
- 0x443a, 0x0e22, 0x2052, 0x320a, 0x566a,
- 0x563a, 0x2022, 0x3252, 0x440a, 0x0e6a,
- 0x0e3a, 0x3222, 0x4452, 0x560a, 0x206a,
- 0x2230, 0x4618, 0x5848, 0x1000, 0x3460,
- 0x3430, 0x5818, 0x1048, 0x2200, 0x4660,
- 0x4630, 0x1018, 0x2248, 0x3400, 0x5860,
- 0x5830, 0x2218, 0x3448, 0x4600, 0x1060,
- 0x1030, 0x3418, 0x4648, 0x5800, 0x2260,
- 0x2232, 0x461a, 0x584a, 0x1002, 0x3462,
- 0x3432, 0x581a, 0x104a, 0x2202, 0x4662,
- 0x4632, 0x101a, 0x224a, 0x3402, 0x5862,
- 0x5832, 0x221a, 0x344a, 0x4602, 0x1062,
- 0x1032, 0x341a, 0x464a, 0x5802, 0x2262,
- 0x2234, 0x461c, 0x584c, 0x1004, 0x3464,
- 0x3434, 0x581c, 0x104c, 0x2204, 0x4664,
- 0x4634, 0x101c, 0x224c, 0x3404, 0x5864,
- 0x5834, 0x221c, 0x344c, 0x4604, 0x1064,
- 0x1034, 0x341c, 0x464c, 0x5804, 0x2264,
- 0x2236, 0x461e, 0x584e, 0x1006, 0x3466,
- 0x3436, 0x581e, 0x104e, 0x2206, 0x4666,
- 0x4636, 0x101e, 0x224e, 0x3406, 0x5866,
- 0x5836, 0x221e, 0x344e, 0x4606, 0x1066,
- 0x1036, 0x341e, 0x464e, 0x5806, 0x2266,
- 0x2238, 0x4620, 0x5850, 0x1008, 0x3468,
- 0x3438, 0x5820, 0x1050, 0x2208, 0x4668,
- 0x4638, 0x1020, 0x2250, 0x3408, 0x5868,
- 0x5838, 0x2220, 0x3450, 0x4608, 0x1068,
- 0x1038, 0x3420, 0x4650, 0x5808, 0x2268,
- 0x223a, 0x4622, 0x5852, 0x100a, 0x346a,
- 0x343a, 0x5822, 0x1052, 0x220a, 0x466a,
- 0x463a, 0x1022, 0x2252, 0x340a, 0x586a,
- 0x583a, 0x2222, 0x3452, 0x460a, 0x106a,
- 0x103a, 0x3422, 0x4652, 0x580a, 0x226a,
- 0x363c, 0x0024, 0x1254, 0x240c, 0x486c,
- 0x483c, 0x1224, 0x2454, 0x360c, 0x006c,
- 0x003c, 0x2424, 0x3654, 0x480c, 0x126c,
- 0x123c, 0x3624, 0x4854, 0x000c, 0x246c,
- 0x243c, 0x4824, 0x0054, 0x120c, 0x366c,
- 0x363e, 0x0026, 0x1256, 0x240e, 0x486e,
- 0x483e, 0x1226, 0x2456, 0x360e, 0x006e,
- 0x003e, 0x2426, 0x3656, 0x480e, 0x126e,
- 0x123e, 0x3626, 0x4856, 0x000e, 0x246e,
- 0x243e, 0x4826, 0x0056, 0x120e, 0x366e,
- 0x3640, 0x0028, 0x1258, 0x2410, 0x4870,
- 0x4840, 0x1228, 0x2458, 0x3610, 0x0070,
- 0x0040, 0x2428, 0x3658, 0x4810, 0x1270,
- 0x1240, 0x3628, 0x4858, 0x0010, 0x2470,
- 0x2440, 0x4828, 0x0058, 0x1210, 0x3670,
- 0x3642, 0x002a, 0x125a, 0x2412, 0x4872,
- 0x4842, 0x122a, 0x245a, 0x3612, 0x0072,
- 0x0042, 0x242a, 0x365a, 0x4812, 0x1272,
- 0x1242, 0x362a, 0x485a, 0x0012, 0x2472,
- 0x2442, 0x482a, 0x005a, 0x1212, 0x3672,
- 0x3644, 0x002c, 0x125c, 0x2414, 0x4874,
- 0x4844, 0x122c, 0x245c, 0x3614, 0x0074,
- 0x0044, 0x242c, 0x365c, 0x4814, 0x1274,
- 0x1244, 0x362c, 0x485c, 0x0014, 0x2474,
- 0x2444, 0x482c, 0x005c, 0x1214, 0x3674,
- 0x3646, 0x002e, 0x125e, 0x2416, 0x4876,
- 0x4846, 0x122e, 0x245e, 0x3616, 0x0076,
- 0x0046, 0x242e, 0x365e, 0x4816, 0x1276,
- 0x1246, 0x362e, 0x485e, 0x0016, 0x2476,
- 0x2446, 0x482e, 0x005e, 0x1216, 0x3676,
- 0x383c, 0x0224, 0x1454, 0x260c, 0x4a6c,
- 0x4a3c, 0x1424, 0x2654, 0x380c, 0x026c,
- 0x023c, 0x2624, 0x3854, 0x4a0c, 0x146c,
- 0x143c, 0x3824, 0x4a54, 0x020c, 0x266c,
- 0x263c, 0x4a24, 0x0254, 0x140c, 0x386c,
- 0x383e, 0x0226, 0x1456, 0x260e, 0x4a6e,
- 0x4a3e, 0x1426, 0x2656, 0x380e, 0x026e,
- 0x023e, 0x2626, 0x3856, 0x4a0e, 0x146e,
- 0x143e, 0x3826, 0x4a56, 0x020e, 0x266e,
- 0x263e, 0x4a26, 0x0256, 0x140e, 0x386e,
- 0x3840, 0x0228, 0x1458, 0x2610, 0x4a70,
- 0x4a40, 0x1428, 0x2658, 0x3810, 0x0270,
- 0x0240, 0x2628, 0x3858, 0x4a10, 0x1470,
- 0x1440, 0x3828, 0x4a58, 0x0210, 0x2670,
- 0x2640, 0x4a28, 0x0258, 0x1410, 0x3870,
- 0x3842, 0x022a, 0x145a, 0x2612, 0x4a72,
- 0x4a42, 0x142a, 0x265a, 0x3812, 0x0272,
- 0x0242, 0x262a, 0x385a, 0x4a12, 0x1472,
- 0x1442, 0x382a, 0x4a5a, 0x0212, 0x2672,
- 0x2642, 0x4a2a, 0x025a, 0x1412, 0x3872,
- 0x3844, 0x022c, 0x145c, 0x2614, 0x4a74,
- 0x4a44, 0x142c, 0x265c, 0x3814, 0x0274,
- 0x0244, 0x262c, 0x385c, 0x4a14, 0x1474,
- 0x1444, 0x382c, 0x4a5c, 0x0214, 0x2674,
- 0x2644, 0x4a2c, 0x025c, 0x1414, 0x3874,
- 0x3846, 0x022e, 0x145e, 0x2616, 0x4a76,
- 0x4a46, 0x142e, 0x265e, 0x3816, 0x0276,
- 0x0246, 0x262e, 0x385e, 0x4a16, 0x1476,
- 0x1446, 0x382e, 0x4a5e, 0x0216, 0x2676,
- 0x2646, 0x4a2e, 0x025e, 0x1416, 0x3876,
- 0x3a3c, 0x0424, 0x1654, 0x280c, 0x4c6c,
- 0x4c3c, 0x1624, 0x2854, 0x3a0c, 0x046c,
- 0x043c, 0x2824, 0x3a54, 0x4c0c, 0x166c,
- 0x163c, 0x3a24, 0x4c54, 0x040c, 0x286c,
- 0x283c, 0x4c24, 0x0454, 0x160c, 0x3a6c,
- 0x3a3e, 0x0426, 0x1656, 0x280e, 0x4c6e,
- 0x4c3e, 0x1626, 0x2856, 0x3a0e, 0x046e,
- 0x043e, 0x2826, 0x3a56, 0x4c0e, 0x166e,
- 0x163e, 0x3a26, 0x4c56, 0x040e, 0x286e,
- 0x283e, 0x4c26, 0x0456, 0x160e, 0x3a6e,
- 0x3a40, 0x0428, 0x1658, 0x2810, 0x4c70,
- 0x4c40, 0x1628, 0x2858, 0x3a10, 0x0470,
- 0x0440, 0x2828, 0x3a58, 0x4c10, 0x1670,
- 0x1640, 0x3a28, 0x4c58, 0x0410, 0x2870,
- 0x2840, 0x4c28, 0x0458, 0x1610, 0x3a70,
- 0x3a42, 0x042a, 0x165a, 0x2812, 0x4c72,
- 0x4c42, 0x162a, 0x285a, 0x3a12, 0x0472,
- 0x0442, 0x282a, 0x3a5a, 0x4c12, 0x1672,
- 0x1642, 0x3a2a, 0x4c5a, 0x0412, 0x2872,
- 0x2842, 0x4c2a, 0x045a, 0x1612, 0x3a72,
- 0x3a44, 0x042c, 0x165c, 0x2814, 0x4c74,
- 0x4c44, 0x162c, 0x285c, 0x3a14, 0x0474,
- 0x0444, 0x282c, 0x3a5c, 0x4c14, 0x1674,
- 0x1644, 0x3a2c, 0x4c5c, 0x0414, 0x2874,
- 0x2844, 0x4c2c, 0x045c, 0x1614, 0x3a74,
- 0x3a46, 0x042e, 0x165e, 0x2816, 0x4c76,
- 0x4c46, 0x162e, 0x285e, 0x3a16, 0x0476,
- 0x0446, 0x282e, 0x3a5e, 0x4c16, 0x1676,
- 0x1646, 0x3a2e, 0x4c5e, 0x0416, 0x2876,
- 0x2846, 0x4c2e, 0x045e, 0x1616, 0x3a76,
- 0x3c3c, 0x0624, 0x1854, 0x2a0c, 0x4e6c,
- 0x4e3c, 0x1824, 0x2a54, 0x3c0c, 0x066c,
- 0x063c, 0x2a24, 0x3c54, 0x4e0c, 0x186c,
- 0x183c, 0x3c24, 0x4e54, 0x060c, 0x2a6c,
- 0x2a3c, 0x4e24, 0x0654, 0x180c, 0x3c6c,
- 0x3c3e, 0x0626, 0x1856, 0x2a0e, 0x4e6e,
- 0x4e3e, 0x1826, 0x2a56, 0x3c0e, 0x066e,
- 0x063e, 0x2a26, 0x3c56, 0x4e0e, 0x186e,
- 0x183e, 0x3c26, 0x4e56, 0x060e, 0x2a6e,
- 0x2a3e, 0x4e26, 0x0656, 0x180e, 0x3c6e,
- 0x3c40, 0x0628, 0x1858, 0x2a10, 0x4e70,
- 0x4e40, 0x1828, 0x2a58, 0x3c10, 0x0670,
- 0x0640, 0x2a28, 0x3c58, 0x4e10, 0x1870,
- 0x1840, 0x3c28, 0x4e58, 0x0610, 0x2a70,
- 0x2a40, 0x4e28, 0x0658, 0x1810, 0x3c70,
- 0x3c42, 0x062a, 0x185a, 0x2a12, 0x4e72,
- 0x4e42, 0x182a, 0x2a5a, 0x3c12, 0x0672,
- 0x0642, 0x2a2a, 0x3c5a, 0x4e12, 0x1872,
- 0x1842, 0x3c2a, 0x4e5a, 0x0612, 0x2a72,
- 0x2a42, 0x4e2a, 0x065a, 0x1812, 0x3c72,
- 0x3c44, 0x062c, 0x185c, 0x2a14, 0x4e74,
- 0x4e44, 0x182c, 0x2a5c, 0x3c14, 0x0674,
- 0x0644, 0x2a2c, 0x3c5c, 0x4e14, 0x1874,
- 0x1844, 0x3c2c, 0x4e5c, 0x0614, 0x2a74,
- 0x2a44, 0x4e2c, 0x065c, 0x1814, 0x3c74,
- 0x3c46, 0x062e, 0x185e, 0x2a16, 0x4e76,
- 0x4e46, 0x182e, 0x2a5e, 0x3c16, 0x0676,
- 0x0646, 0x2a2e, 0x3c5e, 0x4e16, 0x1876,
- 0x1846, 0x3c2e, 0x4e5e, 0x0616, 0x2a76,
- 0x2a46, 0x4e2e, 0x065e, 0x1816, 0x3c76,
- 0x3e3c, 0x0824, 0x1a54, 0x2c0c, 0x506c,
- 0x503c, 0x1a24, 0x2c54, 0x3e0c, 0x086c,
- 0x083c, 0x2c24, 0x3e54, 0x500c, 0x1a6c,
- 0x1a3c, 0x3e24, 0x5054, 0x080c, 0x2c6c,
- 0x2c3c, 0x5024, 0x0854, 0x1a0c, 0x3e6c,
- 0x3e3e, 0x0826, 0x1a56, 0x2c0e, 0x506e,
- 0x503e, 0x1a26, 0x2c56, 0x3e0e, 0x086e,
- 0x083e, 0x2c26, 0x3e56, 0x500e, 0x1a6e,
- 0x1a3e, 0x3e26, 0x5056, 0x080e, 0x2c6e,
- 0x2c3e, 0x5026, 0x0856, 0x1a0e, 0x3e6e,
- 0x3e40, 0x0828, 0x1a58, 0x2c10, 0x5070,
- 0x5040, 0x1a28, 0x2c58, 0x3e10, 0x0870,
- 0x0840, 0x2c28, 0x3e58, 0x5010, 0x1a70,
- 0x1a40, 0x3e28, 0x5058, 0x0810, 0x2c70,
- 0x2c40, 0x5028, 0x0858, 0x1a10, 0x3e70,
- 0x3e42, 0x082a, 0x1a5a, 0x2c12, 0x5072,
- 0x5042, 0x1a2a, 0x2c5a, 0x3e12, 0x0872,
- 0x0842, 0x2c2a, 0x3e5a, 0x5012, 0x1a72,
- 0x1a42, 0x3e2a, 0x505a, 0x0812, 0x2c72,
- 0x2c42, 0x502a, 0x085a, 0x1a12, 0x3e72,
- 0x3e44, 0x082c, 0x1a5c, 0x2c14, 0x5074,
- 0x5044, 0x1a2c, 0x2c5c, 0x3e14, 0x0874,
- 0x0844, 0x2c2c, 0x3e5c, 0x5014, 0x1a74,
- 0x1a44, 0x3e2c, 0x505c, 0x0814, 0x2c74,
- 0x2c44, 0x502c, 0x085c, 0x1a14, 0x3e74,
- 0x3e46, 0x082e, 0x1a5e, 0x2c16, 0x5076,
- 0x5046, 0x1a2e, 0x2c5e, 0x3e16, 0x0876,
- 0x0846, 0x2c2e, 0x3e5e, 0x5016, 0x1a76,
- 0x1a46, 0x3e2e, 0x505e, 0x0816, 0x2c76,
- 0x2c46, 0x502e, 0x085e, 0x1a16, 0x3e76,
- 0x403c, 0x0a24, 0x1c54, 0x2e0c, 0x526c,
- 0x523c, 0x1c24, 0x2e54, 0x400c, 0x0a6c,
- 0x0a3c, 0x2e24, 0x4054, 0x520c, 0x1c6c,
- 0x1c3c, 0x4024, 0x5254, 0x0a0c, 0x2e6c,
- 0x2e3c, 0x5224, 0x0a54, 0x1c0c, 0x406c,
- 0x403e, 0x0a26, 0x1c56, 0x2e0e, 0x526e,
- 0x523e, 0x1c26, 0x2e56, 0x400e, 0x0a6e,
- 0x0a3e, 0x2e26, 0x4056, 0x520e, 0x1c6e,
- 0x1c3e, 0x4026, 0x5256, 0x0a0e, 0x2e6e,
- 0x2e3e, 0x5226, 0x0a56, 0x1c0e, 0x406e,
- 0x4040, 0x0a28, 0x1c58, 0x2e10, 0x5270,
- 0x5240, 0x1c28, 0x2e58, 0x4010, 0x0a70,
- 0x0a40, 0x2e28, 0x4058, 0x5210, 0x1c70,
- 0x1c40, 0x4028, 0x5258, 0x0a10, 0x2e70,
- 0x2e40, 0x5228, 0x0a58, 0x1c10, 0x4070,
- 0x4042, 0x0a2a, 0x1c5a, 0x2e12, 0x5272,
- 0x5242, 0x1c2a, 0x2e5a, 0x4012, 0x0a72,
- 0x0a42, 0x2e2a, 0x405a, 0x5212, 0x1c72,
- 0x1c42, 0x402a, 0x525a, 0x0a12, 0x2e72,
- 0x2e42, 0x522a, 0x0a5a, 0x1c12, 0x4072,
- 0x4044, 0x0a2c, 0x1c5c, 0x2e14, 0x5274,
- 0x5244, 0x1c2c, 0x2e5c, 0x4014, 0x0a74,
- 0x0a44, 0x2e2c, 0x405c, 0x5214, 0x1c74,
- 0x1c44, 0x402c, 0x525c, 0x0a14, 0x2e74,
- 0x2e44, 0x522c, 0x0a5c, 0x1c14, 0x4074,
- 0x4046, 0x0a2e, 0x1c5e, 0x2e16, 0x5276,
- 0x5246, 0x1c2e, 0x2e5e, 0x4016, 0x0a76,
- 0x0a46, 0x2e2e, 0x405e, 0x5216, 0x1c76,
- 0x1c46, 0x402e, 0x525e, 0x0a16, 0x2e76,
- 0x2e46, 0x522e, 0x0a5e, 0x1c16, 0x4076,
- 0x423c, 0x0c24, 0x1e54, 0x300c, 0x546c,
- 0x543c, 0x1e24, 0x3054, 0x420c, 0x0c6c,
- 0x0c3c, 0x3024, 0x4254, 0x540c, 0x1e6c,
- 0x1e3c, 0x4224, 0x5454, 0x0c0c, 0x306c,
- 0x303c, 0x5424, 0x0c54, 0x1e0c, 0x426c,
- 0x423e, 0x0c26, 0x1e56, 0x300e, 0x546e,
- 0x543e, 0x1e26, 0x3056, 0x420e, 0x0c6e,
- 0x0c3e, 0x3026, 0x4256, 0x540e, 0x1e6e,
- 0x1e3e, 0x4226, 0x5456, 0x0c0e, 0x306e,
- 0x303e, 0x5426, 0x0c56, 0x1e0e, 0x426e,
- 0x4240, 0x0c28, 0x1e58, 0x3010, 0x5470,
- 0x5440, 0x1e28, 0x3058, 0x4210, 0x0c70,
- 0x0c40, 0x3028, 0x4258, 0x5410, 0x1e70,
- 0x1e40, 0x4228, 0x5458, 0x0c10, 0x3070,
- 0x3040, 0x5428, 0x0c58, 0x1e10, 0x4270,
- 0x4242, 0x0c2a, 0x1e5a, 0x3012, 0x5472,
- 0x5442, 0x1e2a, 0x305a, 0x4212, 0x0c72,
- 0x0c42, 0x302a, 0x425a, 0x5412, 0x1e72,
- 0x1e42, 0x422a, 0x545a, 0x0c12, 0x3072,
- 0x3042, 0x542a, 0x0c5a, 0x1e12, 0x4272,
- 0x4244, 0x0c2c, 0x1e5c, 0x3014, 0x5474,
- 0x5444, 0x1e2c, 0x305c, 0x4214, 0x0c74,
- 0x0c44, 0x302c, 0x425c, 0x5414, 0x1e74,
- 0x1e44, 0x422c, 0x545c, 0x0c14, 0x3074,
- 0x3044, 0x542c, 0x0c5c, 0x1e14, 0x4274,
- 0x4246, 0x0c2e, 0x1e5e, 0x3016, 0x5476,
- 0x5446, 0x1e2e, 0x305e, 0x4216, 0x0c76,
- 0x0c46, 0x302e, 0x425e, 0x5416, 0x1e76,
- 0x1e46, 0x422e, 0x545e, 0x0c16, 0x3076,
- 0x3046, 0x542e, 0x0c5e, 0x1e16, 0x4276,
- 0x443c, 0x0e24, 0x2054, 0x320c, 0x566c,
- 0x563c, 0x2024, 0x3254, 0x440c, 0x0e6c,
- 0x0e3c, 0x3224, 0x4454, 0x560c, 0x206c,
- 0x203c, 0x4424, 0x5654, 0x0e0c, 0x326c,
- 0x323c, 0x5624, 0x0e54, 0x200c, 0x446c,
- 0x443e, 0x0e26, 0x2056, 0x320e, 0x566e,
- 0x563e, 0x2026, 0x3256, 0x440e, 0x0e6e,
- 0x0e3e, 0x3226, 0x4456, 0x560e, 0x206e,
- 0x203e, 0x4426, 0x5656, 0x0e0e, 0x326e,
- 0x323e, 0x5626, 0x0e56, 0x200e, 0x446e,
- 0x4440, 0x0e28, 0x2058, 0x3210, 0x5670,
- 0x5640, 0x2028, 0x3258, 0x4410, 0x0e70,
- 0x0e40, 0x3228, 0x4458, 0x5610, 0x2070,
- 0x2040, 0x4428, 0x5658, 0x0e10, 0x3270,
- 0x3240, 0x5628, 0x0e58, 0x2010, 0x4470,
- 0x4442, 0x0e2a, 0x205a, 0x3212, 0x5672,
- 0x5642, 0x202a, 0x325a, 0x4412, 0x0e72,
- 0x0e42, 0x322a, 0x445a, 0x5612, 0x2072,
- 0x2042, 0x442a, 0x565a, 0x0e12, 0x3272,
- 0x3242, 0x562a, 0x0e5a, 0x2012, 0x4472,
- 0x4444, 0x0e2c, 0x205c, 0x3214, 0x5674,
- 0x5644, 0x202c, 0x325c, 0x4414, 0x0e74,
- 0x0e44, 0x322c, 0x445c, 0x5614, 0x2074,
- 0x2044, 0x442c, 0x565c, 0x0e14, 0x3274,
- 0x3244, 0x562c, 0x0e5c, 0x2014, 0x4474,
- 0x4446, 0x0e2e, 0x205e, 0x3216, 0x5676,
- 0x5646, 0x202e, 0x325e, 0x4416, 0x0e76,
- 0x0e46, 0x322e, 0x445e, 0x5616, 0x2076,
- 0x2046, 0x442e, 0x565e, 0x0e16, 0x3276,
- 0x3246, 0x562e, 0x0e5e, 0x2016, 0x4476,
- 0x463c, 0x1024, 0x2254, 0x340c, 0x586c,
- 0x583c, 0x2224, 0x3454, 0x460c, 0x106c,
- 0x103c, 0x3424, 0x4654, 0x580c, 0x226c,
- 0x223c, 0x4624, 0x5854, 0x100c, 0x346c,
- 0x343c, 0x5824, 0x1054, 0x220c, 0x466c,
- 0x463e, 0x1026, 0x2256, 0x340e, 0x586e,
- 0x583e, 0x2226, 0x3456, 0x460e, 0x106e,
- 0x103e, 0x3426, 0x4656, 0x580e, 0x226e,
- 0x223e, 0x4626, 0x5856, 0x100e, 0x346e,
- 0x343e, 0x5826, 0x1056, 0x220e, 0x466e,
- 0x4640, 0x1028, 0x2258, 0x3410, 0x5870,
- 0x5840, 0x2228, 0x3458, 0x4610, 0x1070,
- 0x1040, 0x3428, 0x4658, 0x5810, 0x2270,
- 0x2240, 0x4628, 0x5858, 0x1010, 0x3470,
- 0x3440, 0x5828, 0x1058, 0x2210, 0x4670,
- 0x4642, 0x102a, 0x225a, 0x3412, 0x5872,
- 0x5842, 0x222a, 0x345a, 0x4612, 0x1072,
- 0x1042, 0x342a, 0x465a, 0x5812, 0x2272,
- 0x2242, 0x462a, 0x585a, 0x1012, 0x3472,
- 0x3442, 0x582a, 0x105a, 0x2212, 0x4672,
- 0x4644, 0x102c, 0x225c, 0x3414, 0x5874,
- 0x5844, 0x222c, 0x345c, 0x4614, 0x1074,
- 0x1044, 0x342c, 0x465c, 0x5814, 0x2274,
- 0x2244, 0x462c, 0x585c, 0x1014, 0x3474,
- 0x3444, 0x582c, 0x105c, 0x2214, 0x4674,
- 0x4646, 0x102e, 0x225e, 0x3416, 0x5876,
- 0x5846, 0x222e, 0x345e, 0x4616, 0x1076,
- 0x1046, 0x342e, 0x465e, 0x5816, 0x2276,
- 0x2246, 0x462e, 0x585e, 0x1016, 0x3476,
- 0x3446, 0x582e, 0x105e, 0x2216, 0x4676,
-};
-
-static const uint16_t dv_place_720p50[2*12*27*5] = {
- 0x1230, 0x3618, 0x4848, 0x0000, 0x2460,
- 0x2430, 0x4818, 0x0048, 0x1200, 0x3660,
- 0x3630, 0x0018, 0x1248, 0x2400, 0x4860,
- 0x4830, 0x1218, 0x2448, 0x3600, 0x0060,
- 0x0030, 0x2418, 0x3648, 0x4800, 0x1260,
- 0x1232, 0x361a, 0x484a, 0x0002, 0x2462,
- 0x2432, 0x481a, 0x004a, 0x1202, 0x3662,
- 0x3632, 0x001a, 0x124a, 0x2402, 0x4862,
- 0x4832, 0x121a, 0x244a, 0x3602, 0x0062,
- 0x0032, 0x241a, 0x364a, 0x4802, 0x1262,
- 0x1234, 0x361c, 0x484c, 0x0004, 0x2464,
- 0x2434, 0x481c, 0x004c, 0x1204, 0x3664,
- 0x3634, 0x001c, 0x124c, 0x2404, 0x4864,
- 0x4834, 0x121c, 0x244c, 0x3604, 0x0064,
- 0x0034, 0x241c, 0x364c, 0x4804, 0x1264,
- 0x1236, 0x361e, 0x484e, 0x0006, 0x2466,
- 0x2436, 0x481e, 0x004e, 0x1206, 0x3666,
- 0x3636, 0x001e, 0x124e, 0x2406, 0x4866,
- 0x4836, 0x121e, 0x244e, 0x3606, 0x0066,
- 0x0036, 0x241e, 0x364e, 0x4806, 0x1266,
- 0x1238, 0x3620, 0x4850, 0x0008, 0x2468,
- 0x2438, 0x4820, 0x0050, 0x1208, 0x3668,
- 0x3638, 0x0020, 0x1250, 0x2408, 0x4868,
- 0x4838, 0x1220, 0x2450, 0x3608, 0x0068,
- 0x0038, 0x2420, 0x3650, 0x4808, 0x1268,
- 0x123a, 0x3622, 0x4852, 0x000a, 0x246a,
- 0x243a, 0x4822, 0x0052, 0x120a, 0x366a,
- 0x363a, 0x0022, 0x1252, 0x240a, 0x486a,
- 0x483a, 0x1222, 0x2452, 0x360a, 0x006a,
- 0x003a, 0x2422, 0x3652, 0x480a, 0x126a,
- 0x1430, 0x3818, 0x4a48, 0x0200, 0x2660,
- 0x2630, 0x4a18, 0x0248, 0x1400, 0x3860,
- 0x3830, 0x0218, 0x1448, 0x2600, 0x4a60,
- 0x4a30, 0x1418, 0x2648, 0x3800, 0x0260,
- 0x0230, 0x2618, 0x3848, 0x4a00, 0x1460,
- 0x1432, 0x381a, 0x4a4a, 0x0202, 0x2662,
- 0x2632, 0x4a1a, 0x024a, 0x1402, 0x3862,
- 0x3832, 0x021a, 0x144a, 0x2602, 0x4a62,
- 0x4a32, 0x141a, 0x264a, 0x3802, 0x0262,
- 0x0232, 0x261a, 0x384a, 0x4a02, 0x1462,
- 0x1434, 0x381c, 0x4a4c, 0x0204, 0x2664,
- 0x2634, 0x4a1c, 0x024c, 0x1404, 0x3864,
- 0x3834, 0x021c, 0x144c, 0x2604, 0x4a64,
- 0x4a34, 0x141c, 0x264c, 0x3804, 0x0264,
- 0x0234, 0x261c, 0x384c, 0x4a04, 0x1464,
- 0x1436, 0x381e, 0x4a4e, 0x0206, 0x2666,
- 0x2636, 0x4a1e, 0x024e, 0x1406, 0x3866,
- 0x3836, 0x021e, 0x144e, 0x2606, 0x4a66,
- 0x4a36, 0x141e, 0x264e, 0x3806, 0x0266,
- 0x0236, 0x261e, 0x384e, 0x4a06, 0x1466,
- 0x1438, 0x3820, 0x4a50, 0x0208, 0x2668,
- 0x2638, 0x4a20, 0x0250, 0x1408, 0x3868,
- 0x3838, 0x0220, 0x1450, 0x2608, 0x4a68,
- 0x4a38, 0x1420, 0x2650, 0x3808, 0x0268,
- 0x0238, 0x2620, 0x3850, 0x4a08, 0x1468,
- 0x143a, 0x3822, 0x4a52, 0x020a, 0x266a,
- 0x263a, 0x4a22, 0x0252, 0x140a, 0x386a,
- 0x383a, 0x0222, 0x1452, 0x260a, 0x4a6a,
- 0x4a3a, 0x1422, 0x2652, 0x380a, 0x026a,
- 0x023a, 0x2622, 0x3852, 0x4a0a, 0x146a,
- 0x1630, 0x3a18, 0x4c48, 0x0400, 0x2860,
- 0x2830, 0x4c18, 0x0448, 0x1600, 0x3a60,
- 0x3a30, 0x0418, 0x1648, 0x2800, 0x4c60,
- 0x4c30, 0x1618, 0x2848, 0x3a00, 0x0460,
- 0x0430, 0x2818, 0x3a48, 0x4c00, 0x1660,
- 0x1632, 0x3a1a, 0x4c4a, 0x0402, 0x2862,
- 0x2832, 0x4c1a, 0x044a, 0x1602, 0x3a62,
- 0x3a32, 0x041a, 0x164a, 0x2802, 0x4c62,
- 0x4c32, 0x161a, 0x284a, 0x3a02, 0x0462,
- 0x0432, 0x281a, 0x3a4a, 0x4c02, 0x1662,
- 0x1634, 0x3a1c, 0x4c4c, 0x0404, 0x2864,
- 0x2834, 0x4c1c, 0x044c, 0x1604, 0x3a64,
- 0x3a34, 0x041c, 0x164c, 0x2804, 0x4c64,
- 0x4c34, 0x161c, 0x284c, 0x3a04, 0x0464,
- 0x0434, 0x281c, 0x3a4c, 0x4c04, 0x1664,
- 0x1636, 0x3a1e, 0x4c4e, 0x0406, 0x2866,
- 0x2836, 0x4c1e, 0x044e, 0x1606, 0x3a66,
- 0x3a36, 0x041e, 0x164e, 0x2806, 0x4c66,
- 0x4c36, 0x161e, 0x284e, 0x3a06, 0x0466,
- 0x0436, 0x281e, 0x3a4e, 0x4c06, 0x1666,
- 0x1638, 0x3a20, 0x4c50, 0x0408, 0x2868,
- 0x2838, 0x4c20, 0x0450, 0x1608, 0x3a68,
- 0x3a38, 0x0420, 0x1650, 0x2808, 0x4c68,
- 0x4c38, 0x1620, 0x2850, 0x3a08, 0x0468,
- 0x0438, 0x2820, 0x3a50, 0x4c08, 0x1668,
- 0x163a, 0x3a22, 0x4c52, 0x040a, 0x286a,
- 0x283a, 0x4c22, 0x0452, 0x160a, 0x3a6a,
- 0x3a3a, 0x0422, 0x1652, 0x280a, 0x4c6a,
- 0x4c3a, 0x1622, 0x2852, 0x3a0a, 0x046a,
- 0x043a, 0x2822, 0x3a52, 0x4c0a, 0x166a,
- 0x1830, 0x3c18, 0x4e48, 0x0600, 0x2a60,
- 0x2a30, 0x4e18, 0x0648, 0x1800, 0x3c60,
- 0x3c30, 0x0618, 0x1848, 0x2a00, 0x4e60,
- 0x4e30, 0x1818, 0x2a48, 0x3c00, 0x0660,
- 0x0630, 0x2a18, 0x3c48, 0x4e00, 0x1860,
- 0x1832, 0x3c1a, 0x4e4a, 0x0602, 0x2a62,
- 0x2a32, 0x4e1a, 0x064a, 0x1802, 0x3c62,
- 0x3c32, 0x061a, 0x184a, 0x2a02, 0x4e62,
- 0x4e32, 0x181a, 0x2a4a, 0x3c02, 0x0662,
- 0x0632, 0x2a1a, 0x3c4a, 0x4e02, 0x1862,
- 0x1834, 0x3c1c, 0x4e4c, 0x0604, 0x2a64,
- 0x2a34, 0x4e1c, 0x064c, 0x1804, 0x3c64,
- 0x3c34, 0x061c, 0x184c, 0x2a04, 0x4e64,
- 0x4e34, 0x181c, 0x2a4c, 0x3c04, 0x0664,
- 0x0634, 0x2a1c, 0x3c4c, 0x4e04, 0x1864,
- 0x1836, 0x3c1e, 0x4e4e, 0x0606, 0x2a66,
- 0x2a36, 0x4e1e, 0x064e, 0x1806, 0x3c66,
- 0x3c36, 0x061e, 0x184e, 0x2a06, 0x4e66,
- 0x4e36, 0x181e, 0x2a4e, 0x3c06, 0x0666,
- 0x0636, 0x2a1e, 0x3c4e, 0x4e06, 0x1866,
- 0x1838, 0x3c20, 0x4e50, 0x0608, 0x2a68,
- 0x2a38, 0x4e20, 0x0650, 0x1808, 0x3c68,
- 0x3c38, 0x0620, 0x1850, 0x2a08, 0x4e68,
- 0x4e38, 0x1820, 0x2a50, 0x3c08, 0x0668,
- 0x0638, 0x2a20, 0x3c50, 0x4e08, 0x1868,
- 0x183a, 0x3c22, 0x4e52, 0x060a, 0x2a6a,
- 0x2a3a, 0x4e22, 0x0652, 0x180a, 0x3c6a,
- 0x3c3a, 0x0622, 0x1852, 0x2a0a, 0x4e6a,
- 0x4e3a, 0x1822, 0x2a52, 0x3c0a, 0x066a,
- 0x063a, 0x2a22, 0x3c52, 0x4e0a, 0x186a,
- 0x1a30, 0x3e18, 0x5048, 0x0800, 0x2c60,
- 0x2c30, 0x5018, 0x0848, 0x1a00, 0x3e60,
- 0x3e30, 0x0818, 0x1a48, 0x2c00, 0x5060,
- 0x5030, 0x1a18, 0x2c48, 0x3e00, 0x0860,
- 0x0830, 0x2c18, 0x3e48, 0x5000, 0x1a60,
- 0x1a32, 0x3e1a, 0x504a, 0x0802, 0x2c62,
- 0x2c32, 0x501a, 0x084a, 0x1a02, 0x3e62,
- 0x3e32, 0x081a, 0x1a4a, 0x2c02, 0x5062,
- 0x5032, 0x1a1a, 0x2c4a, 0x3e02, 0x0862,
- 0x0832, 0x2c1a, 0x3e4a, 0x5002, 0x1a62,
- 0x1a34, 0x3e1c, 0x504c, 0x0804, 0x2c64,
- 0x2c34, 0x501c, 0x084c, 0x1a04, 0x3e64,
- 0x3e34, 0x081c, 0x1a4c, 0x2c04, 0x5064,
- 0x5034, 0x1a1c, 0x2c4c, 0x3e04, 0x0864,
- 0x0834, 0x2c1c, 0x3e4c, 0x5004, 0x1a64,
- 0x1a36, 0x3e1e, 0x504e, 0x0806, 0x2c66,
- 0x2c36, 0x501e, 0x084e, 0x1a06, 0x3e66,
- 0x3e36, 0x081e, 0x1a4e, 0x2c06, 0x5066,
- 0x5036, 0x1a1e, 0x2c4e, 0x3e06, 0x0866,
- 0x0836, 0x2c1e, 0x3e4e, 0x5006, 0x1a66,
- 0x1a38, 0x3e20, 0x5050, 0x0808, 0x2c68,
- 0x2c38, 0x5020, 0x0850, 0x1a08, 0x3e68,
- 0x3e38, 0x0820, 0x1a50, 0x2c08, 0x5068,
- 0x5038, 0x1a20, 0x2c50, 0x3e08, 0x0868,
- 0x0838, 0x2c20, 0x3e50, 0x5008, 0x1a68,
- 0x1a3a, 0x3e22, 0x5052, 0x080a, 0x2c6a,
- 0x2c3a, 0x5022, 0x0852, 0x1a0a, 0x3e6a,
- 0x3e3a, 0x0822, 0x1a52, 0x2c0a, 0x506a,
- 0x503a, 0x1a22, 0x2c52, 0x3e0a, 0x086a,
- 0x083a, 0x2c22, 0x3e52, 0x500a, 0x1a6a,
- 0x1c30, 0x4018, 0x5248, 0x0a00, 0x2e60,
- 0x2e30, 0x5218, 0x0a48, 0x1c00, 0x4060,
- 0x4030, 0x0a18, 0x1c48, 0x2e00, 0x5260,
- 0x5230, 0x1c18, 0x2e48, 0x4000, 0x0a60,
- 0x0a30, 0x2e18, 0x4048, 0x5200, 0x1c60,
- 0x1c32, 0x401a, 0x524a, 0x0a02, 0x2e62,
- 0x2e32, 0x521a, 0x0a4a, 0x1c02, 0x4062,
- 0x4032, 0x0a1a, 0x1c4a, 0x2e02, 0x5262,
- 0x5232, 0x1c1a, 0x2e4a, 0x4002, 0x0a62,
- 0x0a32, 0x2e1a, 0x404a, 0x5202, 0x1c62,
- 0x1c34, 0x401c, 0x524c, 0x0a04, 0x2e64,
- 0x2e34, 0x521c, 0x0a4c, 0x1c04, 0x4064,
- 0x4034, 0x0a1c, 0x1c4c, 0x2e04, 0x5264,
- 0x5234, 0x1c1c, 0x2e4c, 0x4004, 0x0a64,
- 0x0a34, 0x2e1c, 0x404c, 0x5204, 0x1c64,
- 0x1c36, 0x401e, 0x524e, 0x0a06, 0x2e66,
- 0x2e36, 0x521e, 0x0a4e, 0x1c06, 0x4066,
- 0x4036, 0x0a1e, 0x1c4e, 0x2e06, 0x5266,
- 0x5236, 0x1c1e, 0x2e4e, 0x4006, 0x0a66,
- 0x0a36, 0x2e1e, 0x404e, 0x5206, 0x1c66,
- 0x1c38, 0x4020, 0x5250, 0x0a08, 0x2e68,
- 0x2e38, 0x5220, 0x0a50, 0x1c08, 0x4068,
- 0x4038, 0x0a20, 0x1c50, 0x2e08, 0x5268,
- 0x5238, 0x1c20, 0x2e50, 0x4008, 0x0a68,
- 0x0a38, 0x2e20, 0x4050, 0x5208, 0x1c68,
- 0x1c3a, 0x4022, 0x5252, 0x0a0a, 0x2e6a,
- 0x2e3a, 0x5222, 0x0a52, 0x1c0a, 0x406a,
- 0x403a, 0x0a22, 0x1c52, 0x2e0a, 0x526a,
- 0x523a, 0x1c22, 0x2e52, 0x400a, 0x0a6a,
- 0x0a3a, 0x2e22, 0x4052, 0x520a, 0x1c6a,
- 0x1e30, 0x4218, 0x5448, 0x0c00, 0x3060,
- 0x3030, 0x5418, 0x0c48, 0x1e00, 0x4260,
- 0x4230, 0x0c18, 0x1e48, 0x3000, 0x5460,
- 0x5430, 0x1e18, 0x3048, 0x4200, 0x0c60,
- 0x0c30, 0x3018, 0x4248, 0x5400, 0x1e60,
- 0x1e32, 0x421a, 0x544a, 0x0c02, 0x3062,
- 0x3032, 0x541a, 0x0c4a, 0x1e02, 0x4262,
- 0x4232, 0x0c1a, 0x1e4a, 0x3002, 0x5462,
- 0x5432, 0x1e1a, 0x304a, 0x4202, 0x0c62,
- 0x0c32, 0x301a, 0x424a, 0x5402, 0x1e62,
- 0x1e34, 0x421c, 0x544c, 0x0c04, 0x3064,
- 0x3034, 0x541c, 0x0c4c, 0x1e04, 0x4264,
- 0x4234, 0x0c1c, 0x1e4c, 0x3004, 0x5464,
- 0x5434, 0x1e1c, 0x304c, 0x4204, 0x0c64,
- 0x0c34, 0x301c, 0x424c, 0x5404, 0x1e64,
- 0x1e36, 0x421e, 0x544e, 0x0c06, 0x3066,
- 0x3036, 0x541e, 0x0c4e, 0x1e06, 0x4266,
- 0x4236, 0x0c1e, 0x1e4e, 0x3006, 0x5466,
- 0x5436, 0x1e1e, 0x304e, 0x4206, 0x0c66,
- 0x0c36, 0x301e, 0x424e, 0x5406, 0x1e66,
- 0x1e38, 0x4220, 0x5450, 0x0c08, 0x3068,
- 0x3038, 0x5420, 0x0c50, 0x1e08, 0x4268,
- 0x4238, 0x0c20, 0x1e50, 0x3008, 0x5468,
- 0x5438, 0x1e20, 0x3050, 0x4208, 0x0c68,
- 0x0c38, 0x3020, 0x4250, 0x5408, 0x1e68,
- 0x1e3a, 0x4222, 0x5452, 0x0c0a, 0x306a,
- 0x303a, 0x5422, 0x0c52, 0x1e0a, 0x426a,
- 0x423a, 0x0c22, 0x1e52, 0x300a, 0x546a,
- 0x543a, 0x1e22, 0x3052, 0x420a, 0x0c6a,
- 0x0c3a, 0x3022, 0x4252, 0x540a, 0x1e6a,
- 0x2030, 0x4418, 0x5648, 0x0e00, 0x3260,
- 0x3230, 0x5618, 0x0e48, 0x2000, 0x4460,
- 0x4430, 0x0e18, 0x2048, 0x3200, 0x5660,
- 0x5630, 0x2018, 0x3248, 0x4400, 0x0e60,
- 0x0e30, 0x3218, 0x4448, 0x5600, 0x2060,
- 0x2032, 0x441a, 0x564a, 0x0e02, 0x3262,
- 0x3232, 0x561a, 0x0e4a, 0x2002, 0x4462,
- 0x4432, 0x0e1a, 0x204a, 0x3202, 0x5662,
- 0x5632, 0x201a, 0x324a, 0x4402, 0x0e62,
- 0x0e32, 0x321a, 0x444a, 0x5602, 0x2062,
- 0x2034, 0x441c, 0x564c, 0x0e04, 0x3264,
- 0x3234, 0x561c, 0x0e4c, 0x2004, 0x4464,
- 0x4434, 0x0e1c, 0x204c, 0x3204, 0x5664,
- 0x5634, 0x201c, 0x324c, 0x4404, 0x0e64,
- 0x0e34, 0x321c, 0x444c, 0x5604, 0x2064,
- 0x2036, 0x441e, 0x564e, 0x0e06, 0x3266,
- 0x3236, 0x561e, 0x0e4e, 0x2006, 0x4466,
- 0x4436, 0x0e1e, 0x204e, 0x3206, 0x5666,
- 0x5636, 0x201e, 0x324e, 0x4406, 0x0e66,
- 0x0e36, 0x321e, 0x444e, 0x5606, 0x2066,
- 0x2038, 0x4420, 0x5650, 0x0e08, 0x3268,
- 0x3238, 0x5620, 0x0e50, 0x2008, 0x4468,
- 0x4438, 0x0e20, 0x2050, 0x3208, 0x5668,
- 0x5638, 0x2020, 0x3250, 0x4408, 0x0e68,
- 0x0e38, 0x3220, 0x4450, 0x5608, 0x2068,
- 0x203a, 0x4422, 0x5652, 0x0e0a, 0x326a,
- 0x323a, 0x5622, 0x0e52, 0x200a, 0x446a,
- 0x443a, 0x0e22, 0x2052, 0x320a, 0x566a,
- 0x563a, 0x2022, 0x3252, 0x440a, 0x0e6a,
- 0x0e3a, 0x3222, 0x4452, 0x560a, 0x206a,
- 0x2230, 0x4618, 0x5848, 0x1000, 0x3460,
- 0x3430, 0x5818, 0x1048, 0x2200, 0x4660,
- 0x4630, 0x1018, 0x2248, 0x3400, 0x5860,
- 0x5830, 0x2218, 0x3448, 0x4600, 0x1060,
- 0x1030, 0x3418, 0x4648, 0x5800, 0x2260,
- 0x2232, 0x461a, 0x584a, 0x1002, 0x3462,
- 0x3432, 0x581a, 0x104a, 0x2202, 0x4662,
- 0x4632, 0x101a, 0x224a, 0x3402, 0x5862,
- 0x5832, 0x221a, 0x344a, 0x4602, 0x1062,
- 0x1032, 0x341a, 0x464a, 0x5802, 0x2262,
- 0x2234, 0x461c, 0x584c, 0x1004, 0x3464,
- 0x3434, 0x581c, 0x104c, 0x2204, 0x4664,
- 0x4634, 0x101c, 0x224c, 0x3404, 0x5864,
- 0x5834, 0x221c, 0x344c, 0x4604, 0x1064,
- 0x1034, 0x341c, 0x464c, 0x5804, 0x2264,
- 0x2236, 0x461e, 0x584e, 0x1006, 0x3466,
- 0x3436, 0x581e, 0x104e, 0x2206, 0x4666,
- 0x4636, 0x101e, 0x224e, 0x3406, 0x5866,
- 0x5836, 0x221e, 0x344e, 0x4606, 0x1066,
- 0x1036, 0x341e, 0x464e, 0x5806, 0x2266,
- 0x2238, 0x4620, 0x5850, 0x1008, 0x3468,
- 0x3438, 0x5820, 0x1050, 0x2208, 0x4668,
- 0x4638, 0x1020, 0x2250, 0x3408, 0x5868,
- 0x5838, 0x2220, 0x3450, 0x4608, 0x1068,
- 0x1038, 0x3420, 0x4650, 0x5808, 0x2268,
- 0x223a, 0x4622, 0x5852, 0x100a, 0x346a,
- 0x343a, 0x5822, 0x1052, 0x220a, 0x466a,
- 0x463a, 0x1022, 0x2252, 0x340a, 0x586a,
- 0x583a, 0x2222, 0x3452, 0x460a, 0x106a,
- 0x103a, 0x3422, 0x4652, 0x580a, 0x226a,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x363c, 0x0024, 0x1254, 0x240c, 0x486c,
- 0x483c, 0x1224, 0x2454, 0x360c, 0x006c,
- 0x003c, 0x2424, 0x3654, 0x480c, 0x126c,
- 0x123c, 0x3624, 0x4854, 0x000c, 0x246c,
- 0x243c, 0x4824, 0x0054, 0x120c, 0x366c,
- 0x363e, 0x0026, 0x1256, 0x240e, 0x486e,
- 0x483e, 0x1226, 0x2456, 0x360e, 0x006e,
- 0x003e, 0x2426, 0x3656, 0x480e, 0x126e,
- 0x123e, 0x3626, 0x4856, 0x000e, 0x246e,
- 0x243e, 0x4826, 0x0056, 0x120e, 0x366e,
- 0x3640, 0x0028, 0x1258, 0x2410, 0x4870,
- 0x4840, 0x1228, 0x2458, 0x3610, 0x0070,
- 0x0040, 0x2428, 0x3658, 0x4810, 0x1270,
- 0x1240, 0x3628, 0x4858, 0x0010, 0x2470,
- 0x2440, 0x4828, 0x0058, 0x1210, 0x3670,
- 0x3642, 0x002a, 0x125a, 0x2412, 0x4872,
- 0x4842, 0x122a, 0x245a, 0x3612, 0x0072,
- 0x0042, 0x242a, 0x365a, 0x4812, 0x1272,
- 0x1242, 0x362a, 0x485a, 0x0012, 0x2472,
- 0x2442, 0x482a, 0x005a, 0x1212, 0x3672,
- 0x3644, 0x002c, 0x125c, 0x2414, 0x4874,
- 0x4844, 0x122c, 0x245c, 0x3614, 0x0074,
- 0x0044, 0x242c, 0x365c, 0x4814, 0x1274,
- 0x1244, 0x362c, 0x485c, 0x0014, 0x2474,
- 0x2444, 0x482c, 0x005c, 0x1214, 0x3674,
- 0x3646, 0x002e, 0x125e, 0x2416, 0x4876,
- 0x4846, 0x122e, 0x245e, 0x3616, 0x0076,
- 0x0046, 0x242e, 0x365e, 0x4816, 0x1276,
- 0x1246, 0x362e, 0x485e, 0x0016, 0x2476,
- 0x2446, 0x482e, 0x005e, 0x1216, 0x3676,
- 0x383c, 0x0224, 0x1454, 0x260c, 0x4a6c,
- 0x4a3c, 0x1424, 0x2654, 0x380c, 0x026c,
- 0x023c, 0x2624, 0x3854, 0x4a0c, 0x146c,
- 0x143c, 0x3824, 0x4a54, 0x020c, 0x266c,
- 0x263c, 0x4a24, 0x0254, 0x140c, 0x386c,
- 0x383e, 0x0226, 0x1456, 0x260e, 0x4a6e,
- 0x4a3e, 0x1426, 0x2656, 0x380e, 0x026e,
- 0x023e, 0x2626, 0x3856, 0x4a0e, 0x146e,
- 0x143e, 0x3826, 0x4a56, 0x020e, 0x266e,
- 0x263e, 0x4a26, 0x0256, 0x140e, 0x386e,
- 0x3840, 0x0228, 0x1458, 0x2610, 0x4a70,
- 0x4a40, 0x1428, 0x2658, 0x3810, 0x0270,
- 0x0240, 0x2628, 0x3858, 0x4a10, 0x1470,
- 0x1440, 0x3828, 0x4a58, 0x0210, 0x2670,
- 0x2640, 0x4a28, 0x0258, 0x1410, 0x3870,
- 0x3842, 0x022a, 0x145a, 0x2612, 0x4a72,
- 0x4a42, 0x142a, 0x265a, 0x3812, 0x0272,
- 0x0242, 0x262a, 0x385a, 0x4a12, 0x1472,
- 0x1442, 0x382a, 0x4a5a, 0x0212, 0x2672,
- 0x2642, 0x4a2a, 0x025a, 0x1412, 0x3872,
- 0x3844, 0x022c, 0x145c, 0x2614, 0x4a74,
- 0x4a44, 0x142c, 0x265c, 0x3814, 0x0274,
- 0x0244, 0x262c, 0x385c, 0x4a14, 0x1474,
- 0x1444, 0x382c, 0x4a5c, 0x0214, 0x2674,
- 0x2644, 0x4a2c, 0x025c, 0x1414, 0x3874,
- 0x3846, 0x022e, 0x145e, 0x2616, 0x4a76,
- 0x4a46, 0x142e, 0x265e, 0x3816, 0x0276,
- 0x0246, 0x262e, 0x385e, 0x4a16, 0x1476,
- 0x1446, 0x382e, 0x4a5e, 0x0216, 0x2676,
- 0x2646, 0x4a2e, 0x025e, 0x1416, 0x3876,
- 0x3a3c, 0x0424, 0x1654, 0x280c, 0x4c6c,
- 0x4c3c, 0x1624, 0x2854, 0x3a0c, 0x046c,
- 0x043c, 0x2824, 0x3a54, 0x4c0c, 0x166c,
- 0x163c, 0x3a24, 0x4c54, 0x040c, 0x286c,
- 0x283c, 0x4c24, 0x0454, 0x160c, 0x3a6c,
- 0x3a3e, 0x0426, 0x1656, 0x280e, 0x4c6e,
- 0x4c3e, 0x1626, 0x2856, 0x3a0e, 0x046e,
- 0x043e, 0x2826, 0x3a56, 0x4c0e, 0x166e,
- 0x163e, 0x3a26, 0x4c56, 0x040e, 0x286e,
- 0x283e, 0x4c26, 0x0456, 0x160e, 0x3a6e,
- 0x3a40, 0x0428, 0x1658, 0x2810, 0x4c70,
- 0x4c40, 0x1628, 0x2858, 0x3a10, 0x0470,
- 0x0440, 0x2828, 0x3a58, 0x4c10, 0x1670,
- 0x1640, 0x3a28, 0x4c58, 0x0410, 0x2870,
- 0x2840, 0x4c28, 0x0458, 0x1610, 0x3a70,
- 0x3a42, 0x042a, 0x165a, 0x2812, 0x4c72,
- 0x4c42, 0x162a, 0x285a, 0x3a12, 0x0472,
- 0x0442, 0x282a, 0x3a5a, 0x4c12, 0x1672,
- 0x1642, 0x3a2a, 0x4c5a, 0x0412, 0x2872,
- 0x2842, 0x4c2a, 0x045a, 0x1612, 0x3a72,
- 0x3a44, 0x042c, 0x165c, 0x2814, 0x4c74,
- 0x4c44, 0x162c, 0x285c, 0x3a14, 0x0474,
- 0x0444, 0x282c, 0x3a5c, 0x4c14, 0x1674,
- 0x1644, 0x3a2c, 0x4c5c, 0x0414, 0x2874,
- 0x2844, 0x4c2c, 0x045c, 0x1614, 0x3a74,
- 0x3a46, 0x042e, 0x165e, 0x2816, 0x4c76,
- 0x4c46, 0x162e, 0x285e, 0x3a16, 0x0476,
- 0x0446, 0x282e, 0x3a5e, 0x4c16, 0x1676,
- 0x1646, 0x3a2e, 0x4c5e, 0x0416, 0x2876,
- 0x2846, 0x4c2e, 0x045e, 0x1616, 0x3a76,
- 0x3c3c, 0x0624, 0x1854, 0x2a0c, 0x4e6c,
- 0x4e3c, 0x1824, 0x2a54, 0x3c0c, 0x066c,
- 0x063c, 0x2a24, 0x3c54, 0x4e0c, 0x186c,
- 0x183c, 0x3c24, 0x4e54, 0x060c, 0x2a6c,
- 0x2a3c, 0x4e24, 0x0654, 0x180c, 0x3c6c,
- 0x3c3e, 0x0626, 0x1856, 0x2a0e, 0x4e6e,
- 0x4e3e, 0x1826, 0x2a56, 0x3c0e, 0x066e,
- 0x063e, 0x2a26, 0x3c56, 0x4e0e, 0x186e,
- 0x183e, 0x3c26, 0x4e56, 0x060e, 0x2a6e,
- 0x2a3e, 0x4e26, 0x0656, 0x180e, 0x3c6e,
- 0x3c40, 0x0628, 0x1858, 0x2a10, 0x4e70,
- 0x4e40, 0x1828, 0x2a58, 0x3c10, 0x0670,
- 0x0640, 0x2a28, 0x3c58, 0x4e10, 0x1870,
- 0x1840, 0x3c28, 0x4e58, 0x0610, 0x2a70,
- 0x2a40, 0x4e28, 0x0658, 0x1810, 0x3c70,
- 0x3c42, 0x062a, 0x185a, 0x2a12, 0x4e72,
- 0x4e42, 0x182a, 0x2a5a, 0x3c12, 0x0672,
- 0x0642, 0x2a2a, 0x3c5a, 0x4e12, 0x1872,
- 0x1842, 0x3c2a, 0x4e5a, 0x0612, 0x2a72,
- 0x2a42, 0x4e2a, 0x065a, 0x1812, 0x3c72,
- 0x3c44, 0x062c, 0x185c, 0x2a14, 0x4e74,
- 0x4e44, 0x182c, 0x2a5c, 0x3c14, 0x0674,
- 0x0644, 0x2a2c, 0x3c5c, 0x4e14, 0x1874,
- 0x1844, 0x3c2c, 0x4e5c, 0x0614, 0x2a74,
- 0x2a44, 0x4e2c, 0x065c, 0x1814, 0x3c74,
- 0x3c46, 0x062e, 0x185e, 0x2a16, 0x4e76,
- 0x4e46, 0x182e, 0x2a5e, 0x3c16, 0x0676,
- 0x0646, 0x2a2e, 0x3c5e, 0x4e16, 0x1876,
- 0x1846, 0x3c2e, 0x4e5e, 0x0616, 0x2a76,
- 0x2a46, 0x4e2e, 0x065e, 0x1816, 0x3c76,
- 0x3e3c, 0x0824, 0x1a54, 0x2c0c, 0x506c,
- 0x503c, 0x1a24, 0x2c54, 0x3e0c, 0x086c,
- 0x083c, 0x2c24, 0x3e54, 0x500c, 0x1a6c,
- 0x1a3c, 0x3e24, 0x5054, 0x080c, 0x2c6c,
- 0x2c3c, 0x5024, 0x0854, 0x1a0c, 0x3e6c,
- 0x3e3e, 0x0826, 0x1a56, 0x2c0e, 0x506e,
- 0x503e, 0x1a26, 0x2c56, 0x3e0e, 0x086e,
- 0x083e, 0x2c26, 0x3e56, 0x500e, 0x1a6e,
- 0x1a3e, 0x3e26, 0x5056, 0x080e, 0x2c6e,
- 0x2c3e, 0x5026, 0x0856, 0x1a0e, 0x3e6e,
- 0x3e40, 0x0828, 0x1a58, 0x2c10, 0x5070,
- 0x5040, 0x1a28, 0x2c58, 0x3e10, 0x0870,
- 0x0840, 0x2c28, 0x3e58, 0x5010, 0x1a70,
- 0x1a40, 0x3e28, 0x5058, 0x0810, 0x2c70,
- 0x2c40, 0x5028, 0x0858, 0x1a10, 0x3e70,
- 0x3e42, 0x082a, 0x1a5a, 0x2c12, 0x5072,
- 0x5042, 0x1a2a, 0x2c5a, 0x3e12, 0x0872,
- 0x0842, 0x2c2a, 0x3e5a, 0x5012, 0x1a72,
- 0x1a42, 0x3e2a, 0x505a, 0x0812, 0x2c72,
- 0x2c42, 0x502a, 0x085a, 0x1a12, 0x3e72,
- 0x3e44, 0x082c, 0x1a5c, 0x2c14, 0x5074,
- 0x5044, 0x1a2c, 0x2c5c, 0x3e14, 0x0874,
- 0x0844, 0x2c2c, 0x3e5c, 0x5014, 0x1a74,
- 0x1a44, 0x3e2c, 0x505c, 0x0814, 0x2c74,
- 0x2c44, 0x502c, 0x085c, 0x1a14, 0x3e74,
- 0x3e46, 0x082e, 0x1a5e, 0x2c16, 0x5076,
- 0x5046, 0x1a2e, 0x2c5e, 0x3e16, 0x0876,
- 0x0846, 0x2c2e, 0x3e5e, 0x5016, 0x1a76,
- 0x1a46, 0x3e2e, 0x505e, 0x0816, 0x2c76,
- 0x2c46, 0x502e, 0x085e, 0x1a16, 0x3e76,
- 0x403c, 0x0a24, 0x1c54, 0x2e0c, 0x526c,
- 0x523c, 0x1c24, 0x2e54, 0x400c, 0x0a6c,
- 0x0a3c, 0x2e24, 0x4054, 0x520c, 0x1c6c,
- 0x1c3c, 0x4024, 0x5254, 0x0a0c, 0x2e6c,
- 0x2e3c, 0x5224, 0x0a54, 0x1c0c, 0x406c,
- 0x403e, 0x0a26, 0x1c56, 0x2e0e, 0x526e,
- 0x523e, 0x1c26, 0x2e56, 0x400e, 0x0a6e,
- 0x0a3e, 0x2e26, 0x4056, 0x520e, 0x1c6e,
- 0x1c3e, 0x4026, 0x5256, 0x0a0e, 0x2e6e,
- 0x2e3e, 0x5226, 0x0a56, 0x1c0e, 0x406e,
- 0x4040, 0x0a28, 0x1c58, 0x2e10, 0x5270,
- 0x5240, 0x1c28, 0x2e58, 0x4010, 0x0a70,
- 0x0a40, 0x2e28, 0x4058, 0x5210, 0x1c70,
- 0x1c40, 0x4028, 0x5258, 0x0a10, 0x2e70,
- 0x2e40, 0x5228, 0x0a58, 0x1c10, 0x4070,
- 0x4042, 0x0a2a, 0x1c5a, 0x2e12, 0x5272,
- 0x5242, 0x1c2a, 0x2e5a, 0x4012, 0x0a72,
- 0x0a42, 0x2e2a, 0x405a, 0x5212, 0x1c72,
- 0x1c42, 0x402a, 0x525a, 0x0a12, 0x2e72,
- 0x2e42, 0x522a, 0x0a5a, 0x1c12, 0x4072,
- 0x4044, 0x0a2c, 0x1c5c, 0x2e14, 0x5274,
- 0x5244, 0x1c2c, 0x2e5c, 0x4014, 0x0a74,
- 0x0a44, 0x2e2c, 0x405c, 0x5214, 0x1c74,
- 0x1c44, 0x402c, 0x525c, 0x0a14, 0x2e74,
- 0x2e44, 0x522c, 0x0a5c, 0x1c14, 0x4074,
- 0x4046, 0x0a2e, 0x1c5e, 0x2e16, 0x5276,
- 0x5246, 0x1c2e, 0x2e5e, 0x4016, 0x0a76,
- 0x0a46, 0x2e2e, 0x405e, 0x5216, 0x1c76,
- 0x1c46, 0x402e, 0x525e, 0x0a16, 0x2e76,
- 0x2e46, 0x522e, 0x0a5e, 0x1c16, 0x4076,
- 0x423c, 0x0c24, 0x1e54, 0x300c, 0x546c,
- 0x543c, 0x1e24, 0x3054, 0x420c, 0x0c6c,
- 0x0c3c, 0x3024, 0x4254, 0x540c, 0x1e6c,
- 0x1e3c, 0x4224, 0x5454, 0x0c0c, 0x306c,
- 0x303c, 0x5424, 0x0c54, 0x1e0c, 0x426c,
- 0x423e, 0x0c26, 0x1e56, 0x300e, 0x546e,
- 0x543e, 0x1e26, 0x3056, 0x420e, 0x0c6e,
- 0x0c3e, 0x3026, 0x4256, 0x540e, 0x1e6e,
- 0x1e3e, 0x4226, 0x5456, 0x0c0e, 0x306e,
- 0x303e, 0x5426, 0x0c56, 0x1e0e, 0x426e,
- 0x4240, 0x0c28, 0x1e58, 0x3010, 0x5470,
- 0x5440, 0x1e28, 0x3058, 0x4210, 0x0c70,
- 0x0c40, 0x3028, 0x4258, 0x5410, 0x1e70,
- 0x1e40, 0x4228, 0x5458, 0x0c10, 0x3070,
- 0x3040, 0x5428, 0x0c58, 0x1e10, 0x4270,
- 0x4242, 0x0c2a, 0x1e5a, 0x3012, 0x5472,
- 0x5442, 0x1e2a, 0x305a, 0x4212, 0x0c72,
- 0x0c42, 0x302a, 0x425a, 0x5412, 0x1e72,
- 0x1e42, 0x422a, 0x545a, 0x0c12, 0x3072,
- 0x3042, 0x542a, 0x0c5a, 0x1e12, 0x4272,
- 0x4244, 0x0c2c, 0x1e5c, 0x3014, 0x5474,
- 0x5444, 0x1e2c, 0x305c, 0x4214, 0x0c74,
- 0x0c44, 0x302c, 0x425c, 0x5414, 0x1e74,
- 0x1e44, 0x422c, 0x545c, 0x0c14, 0x3074,
- 0x3044, 0x542c, 0x0c5c, 0x1e14, 0x4274,
- 0x4246, 0x0c2e, 0x1e5e, 0x3016, 0x5476,
- 0x5446, 0x1e2e, 0x305e, 0x4216, 0x0c76,
- 0x0c46, 0x302e, 0x425e, 0x5416, 0x1e76,
- 0x1e46, 0x422e, 0x545e, 0x0c16, 0x3076,
- 0x3046, 0x542e, 0x0c5e, 0x1e16, 0x4276,
- 0x443c, 0x0e24, 0x2054, 0x320c, 0x566c,
- 0x563c, 0x2024, 0x3254, 0x440c, 0x0e6c,
- 0x0e3c, 0x3224, 0x4454, 0x560c, 0x206c,
- 0x203c, 0x4424, 0x5654, 0x0e0c, 0x326c,
- 0x323c, 0x5624, 0x0e54, 0x200c, 0x446c,
- 0x443e, 0x0e26, 0x2056, 0x320e, 0x566e,
- 0x563e, 0x2026, 0x3256, 0x440e, 0x0e6e,
- 0x0e3e, 0x3226, 0x4456, 0x560e, 0x206e,
- 0x203e, 0x4426, 0x5656, 0x0e0e, 0x326e,
- 0x323e, 0x5626, 0x0e56, 0x200e, 0x446e,
- 0x4440, 0x0e28, 0x2058, 0x3210, 0x5670,
- 0x5640, 0x2028, 0x3258, 0x4410, 0x0e70,
- 0x0e40, 0x3228, 0x4458, 0x5610, 0x2070,
- 0x2040, 0x4428, 0x5658, 0x0e10, 0x3270,
- 0x3240, 0x5628, 0x0e58, 0x2010, 0x4470,
- 0x4442, 0x0e2a, 0x205a, 0x3212, 0x5672,
- 0x5642, 0x202a, 0x325a, 0x4412, 0x0e72,
- 0x0e42, 0x322a, 0x445a, 0x5612, 0x2072,
- 0x2042, 0x442a, 0x565a, 0x0e12, 0x3272,
- 0x3242, 0x562a, 0x0e5a, 0x2012, 0x4472,
- 0x4444, 0x0e2c, 0x205c, 0x3214, 0x5674,
- 0x5644, 0x202c, 0x325c, 0x4414, 0x0e74,
- 0x0e44, 0x322c, 0x445c, 0x5614, 0x2074,
- 0x2044, 0x442c, 0x565c, 0x0e14, 0x3274,
- 0x3244, 0x562c, 0x0e5c, 0x2014, 0x4474,
- 0x4446, 0x0e2e, 0x205e, 0x3216, 0x5676,
- 0x5646, 0x202e, 0x325e, 0x4416, 0x0e76,
- 0x0e46, 0x322e, 0x445e, 0x5616, 0x2076,
- 0x2046, 0x442e, 0x565e, 0x0e16, 0x3276,
- 0x3246, 0x562e, 0x0e5e, 0x2016, 0x4476,
- 0x463c, 0x1024, 0x2254, 0x340c, 0x586c,
- 0x583c, 0x2224, 0x3454, 0x460c, 0x106c,
- 0x103c, 0x3424, 0x4654, 0x580c, 0x226c,
- 0x223c, 0x4624, 0x5854, 0x100c, 0x346c,
- 0x343c, 0x5824, 0x1054, 0x220c, 0x466c,
- 0x463e, 0x1026, 0x2256, 0x340e, 0x586e,
- 0x583e, 0x2226, 0x3456, 0x460e, 0x106e,
- 0x103e, 0x3426, 0x4656, 0x580e, 0x226e,
- 0x223e, 0x4626, 0x5856, 0x100e, 0x346e,
- 0x343e, 0x5826, 0x1056, 0x220e, 0x466e,
- 0x4640, 0x1028, 0x2258, 0x3410, 0x5870,
- 0x5840, 0x2228, 0x3458, 0x4610, 0x1070,
- 0x1040, 0x3428, 0x4658, 0x5810, 0x2270,
- 0x2240, 0x4628, 0x5858, 0x1010, 0x3470,
- 0x3440, 0x5828, 0x1058, 0x2210, 0x4670,
- 0x4642, 0x102a, 0x225a, 0x3412, 0x5872,
- 0x5842, 0x222a, 0x345a, 0x4612, 0x1072,
- 0x1042, 0x342a, 0x465a, 0x5812, 0x2272,
- 0x2242, 0x462a, 0x585a, 0x1012, 0x3472,
- 0x3442, 0x582a, 0x105a, 0x2212, 0x4672,
- 0x4644, 0x102c, 0x225c, 0x3414, 0x5874,
- 0x5844, 0x222c, 0x345c, 0x4614, 0x1074,
- 0x1044, 0x342c, 0x465c, 0x5814, 0x2274,
- 0x2244, 0x462c, 0x585c, 0x1014, 0x3474,
- 0x3444, 0x582c, 0x105c, 0x2214, 0x4674,
- 0x4646, 0x102e, 0x225e, 0x3416, 0x5876,
- 0x5846, 0x222e, 0x345e, 0x4616, 0x1076,
- 0x1046, 0x342e, 0x465e, 0x5816, 0x2276,
- 0x2246, 0x462e, 0x585e, 0x1016, 0x3476,
- 0x3446, 0x582e, 0x105e, 0x2216, 0x4676,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
- 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
-};
-
-
 /* DV25/50 DCT coefficient weights and inverse weights */
 /* created by dvtables.py */
 static const int dv_weight_bits = 18;
@@ -6072,50 +2624,93 @@
  22017, 25191, 24457, 27962, 22733, 24600, 25971, 29642,
 };
 
-/**
- * the "inverse" DV100 weights are actually just the spec weights (zig-zagged)
- */
+/* DV100 weights are pre-zigzagged, inverted and multiplied by 2^(dv100_weight_shift)
+   (in DV100 the AC components are divided by the spec weights) */
+static const int dv100_weight_shift = 16;
+static const int dv_weight_1080_y[64] = {
+    8192, 65536, 65536, 61681, 61681, 61681, 58254, 58254,
+    58254, 58254, 58254, 58254, 55188, 58254, 58254, 55188,
+    55188, 55188, 55188, 55188, 55188, 24966, 27594, 26214,
+    26214, 26214, 27594, 24966, 23831, 24385, 25575, 25575,
+    25575, 25575, 24385, 23831, 23302, 23302, 24966, 24966,
+    24966, 23302, 23302, 21845, 22795, 24385, 24385, 22795,
+    21845, 21400, 21845, 23831, 21845, 21400, 10382, 10700,
+    10700, 10382, 10082, 9620, 10082, 9039, 9039, 8525,
+};
+static const int dv_weight_1080_c[64] = {
+    8192, 65536, 65536, 61681, 61681, 61681, 41943, 41943,
+    41943, 41943, 40330, 41943, 40330, 41943, 40330, 40330,
+    40330, 38836, 38836, 40330, 40330, 24966, 27594, 26214,
+    26214, 26214, 27594, 24966, 23831, 24385, 25575, 25575,
+    25575, 25575, 24385, 23831, 11523, 11523, 12483, 12483,
+    12483, 11523, 11523, 10923, 11275, 12193, 12193, 11275,
+    10923, 5323, 5490, 5924, 5490, 5323, 5165, 5323,
+    5323, 5165, 5017, 4788, 5017, 4520, 4520, 4263,
+};
+static const int dv_weight_720_y[64] = {
+    8192, 65536, 65536, 61681, 61681, 61681, 58254, 58254,
+    58254, 58254, 58254, 58254, 55188, 58254, 58254, 55188,
+    55188, 55188, 55188, 55188, 55188, 24966, 27594, 26214,
+    26214, 26214, 27594, 24966, 23831, 24385, 25575, 25575,
+    25575, 25575, 24385, 23831, 15420, 15420, 16644, 16644,
+    16644, 15420, 15420, 10923, 11398, 12193, 12193, 11398,
+    10923, 10700, 10923, 11916, 10923, 10700, 5191, 5350,
+    5350, 5191, 5041, 4810, 5041, 4520, 4520, 4263,
+};
+static const int dv_weight_720_c[64] = {
+    8192, 43691, 43691, 40330, 40330, 40330, 29127, 29127,
+    29127, 29127, 29127, 29127, 27594, 29127, 29127, 27594,
+    27594, 27594, 27594, 27594, 27594, 12483, 13797, 13107,
+    13107, 13107, 13797, 12483, 11916, 12193, 12788, 12788,
+    12788, 12788, 12193, 11916, 5761, 5761, 6242, 6242,
+    6242, 5761, 5761, 5461, 5638, 5461, 6096, 5638,
+    5461, 2661, 2745, 2962, 2745, 2661, 2583, 2661,
+    2661, 2583, 2509, 2394, 2509, 2260, 2260, 2131,
+};
+
+/* the "inverse" DV100 weights are actually just the spec weights (zig-zagged) */
 static const int dv_iweight_1080_y[64] = {
-    128,  16,  16,  17,  17,  17,  18,  18,
-     18,  18,  18,  18,  19,  18,  18,  19,
-     19,  19,  19,  19,  19,  42,  38,  40,
-     40,  40,  38,  42,  44,  43,  41,  41,
-     41,  41,  43,  44,  45,  45,  42,  42,
-     42,  45,  45,  48,  46,  43,  43,  46,
-     48,  49,  48,  44,  48,  49, 101,  98,
-     98, 101, 104, 109, 104, 116, 116, 123,
+    128, 16, 16, 17, 17, 17, 18, 18,
+    18, 18, 18, 18, 19, 18, 18, 19,
+    19, 19, 19, 19, 19, 42, 38, 40,
+    40, 40, 38, 42, 44, 43, 41, 41,
+    41, 41, 43, 44, 45, 45, 42, 42,
+    42, 45, 45, 48, 46, 43, 43, 46,
+    48, 49, 48, 44, 48, 49, 101, 98,
+    98, 101, 104, 109, 104, 116, 116, 123,
 };
 static const int dv_iweight_1080_c[64] = {
-    128,  16,  16,  17,  17,  17,  25,  25,
-     25,  25,  26,  25,  26,  25,  26,  26,
-     26,  27,  27,  26,  26,  42,  38,  40,
-     40,  40,  38,  42,  44,  43,  41,  41,
-     41,  41,  43,  44,  91,  91,  84,  84,
-     84,  91,  91,  96,  93,  86,  86,  93,
-     96, 197, 191, 177, 191, 197, 203, 197,
+    128, 16, 16, 17, 17, 17, 25, 25,
+    25, 25, 26, 25, 26, 25, 26, 26,
+    26, 27, 27, 26, 26, 42, 38, 40,
+    40, 40, 38, 42, 44, 43, 41, 41,
+    41, 41, 43, 44, 91, 91, 84, 84,
+    84, 91, 91, 96, 93, 86, 86, 93,
+    96, 197, 191, 177, 191, 197, 203, 197,
     197, 203, 209, 219, 209, 232, 232, 246,
 };
 static const int dv_iweight_720_y[64] = {
-    128,  16,  16,  17,  17,  17,  18,  18,
-     18,  18,  18,  18,  19,  18,  18,  19,
-     19,  19,  19,  19,  19,  42,  38,  40,
-     40,  40,  38,  42,  44,  43,  41,  41,
-     41,  41,  43,  44,  68,  68,  63,  63,
-     63,  68,  68,  96,  92,  86,  86,  92,
-     96,  98,  96,  88,  96,  98, 202, 196,
+    128, 16, 16, 17, 17, 17, 18, 18,
+    18, 18, 18, 18, 19, 18, 18, 19,
+    19, 19, 19, 19, 19, 42, 38, 40,
+    40, 40, 38, 42, 44, 43, 41, 41,
+    41, 41, 43, 44, 68, 68, 63, 63,
+    63, 68, 68, 96, 92, 86, 86, 92,
+    96, 98, 96, 88, 96, 98, 202, 196,
     196, 202, 208, 218, 208, 232, 232, 246,
 };
 static const int dv_iweight_720_c[64] = {
-    128,  24,  24,  26,  26,  26,  36,  36,
-     36,  36,  36,  36,  38,  36,  36,  38,
-     38,  38,  38,  38,  38,  84,  76,  80,
-     80,  80,  76,  84,  88,  86,  82,  82,
-     82,  82,  86,  88, 182, 182, 168, 168,
+    128, 24, 24, 26, 26, 26, 36, 36,
+    36, 36, 36, 36, 38, 36, 36, 38,
+    38, 38, 38, 38, 38, 84, 76, 80,
+    80, 80, 76, 84, 88, 86, 82, 82,
+    82, 82, 86, 88, 182, 182, 168, 168,
     168, 182, 182, 192, 186, 192, 172, 186,
     192, 394, 382, 354, 382, 394, 406, 394,
     394, 406, 418, 438, 418, 464, 464, 492,
 };
 
+
 static const uint8_t dv_audio_shuffle525[10][9] = {
   {  0, 30, 60, 20, 50, 80, 10, 40, 70 }, /* 1st channel */
   {  6, 36, 66, 26, 56, 86, 16, 46, 76 },
@@ -6150,7 +2745,6 @@
     48000, 44100, 32000,
 };
 
-/* macroblock bit budgets */
 static const uint8_t block_sizes_dv2550[8] = {
     112, 112, 112, 112, 80, 80, 0, 0,
 };
@@ -6159,23 +2753,33 @@
     80, 80, 80, 80, 80, 80, 64, 64,
 };
 
+void find_macroblock_dv25_411(const struct DVprofile *sys, int channel, int seq, int av, int seg, int mbloc[10]);
+void find_macroblock_dv25_420(const struct DVprofile *sys, int channel, int seq, int av, int seg, int mbloc[10]);
+void find_macroblock_dv50(const struct DVprofile *sys, int channel, int seq, int av, int seg, int mbloc[10]);
+void find_macroblock_dv100_1080i60(const struct DVprofile *sys, int channel, int seq, int av, int seg, int mbloc[10]);
+void find_macroblock_dv100_1080i50(const struct DVprofile *sys, int channel, int seq, int av, int seg, int mbloc[10]);
+void find_macroblock_dv100_720p60(const struct DVprofile *sys, int channel, int seq, int av, int seg, int mbloc[10]);
+
 static const DVprofile dv_profiles[] = {
     { .dsf = 0,
       .video_stype = 0x0,
       .frame_size = 120000,        /* IEC 61834, SMPTE-314M - 525/60 (NTSC) */
       .difseg_size = 10,
       .n_difchan = 1,
-      .time_base = { 1001, 30000 },
+      .frame_rate = 30000,
       .ltc_divisor = 30,
+      .frame_rate_base = 1001,
       .height = 480,
       .width = 720,
       .sar = {{10, 11}, {40, 33}},
       .video_place = dv_place_411,
+      .find_macroblock = find_macroblock_dv25_411,
       .pix_fmt = PIX_FMT_YUV411P,
       .bpm = 6,
       .block_sizes = block_sizes_dv2550,
+      .vs_total_ac_bits = (100 * 4 + 68*2) * 5,
       .audio_stride = 90,
-      .audio_min_samples  = { 1580, 1452, 1053 }, /* for 48, 44.1 and 32kHz */
+      .audio_min_samples = { 1580, 1452, 1053 }, /* for 48, 44.1 and 32Khz */
       .audio_samples_dist = { 1600, 1602, 1602, 1602, 1602 }, /* per SMPTE-314M */
       .audio_shuffle = dv_audio_shuffle525,
     },
@@ -6184,17 +2788,20 @@
       .frame_size = 144000,        /* IEC 61834 - 625/50 (PAL) */
       .difseg_size = 12,
       .n_difchan = 1,
-      .time_base = { 1, 25 },
+      .frame_rate = 25,
+      .frame_rate_base = 1,
       .ltc_divisor = 25,
       .height = 576,
       .width = 720,
       .sar = {{59, 54}, {118, 81}},
       .video_place = dv_place_420,
+      .find_macroblock = find_macroblock_dv25_420,
       .pix_fmt = PIX_FMT_YUV420P,
       .bpm = 6,
       .block_sizes = block_sizes_dv2550,
+      .vs_total_ac_bits = (100 * 4 + 68*2) * 5,
       .audio_stride = 108,
-      .audio_min_samples  = { 1896, 1742, 1264 }, /* for 48, 44.1 and 32kHz */
+      .audio_min_samples = { 1896, 1742, 1264 }, /* for 48, 44.1 and 32Khz */
       .audio_samples_dist = { 1920, 1920, 1920, 1920, 1920 },
       .audio_shuffle = dv_audio_shuffle625,
     },
@@ -6203,17 +2810,20 @@
       .frame_size = 144000,        /* SMPTE-314M - 625/50 (PAL) */
       .difseg_size = 12,
       .n_difchan = 1,
-      .time_base = { 1, 25 },
+      .frame_rate = 25,
+      .frame_rate_base = 1,
       .ltc_divisor = 25,
       .height = 576,
       .width = 720,
       .sar = {{59, 54}, {118, 81}},
       .video_place = dv_place_411P,
+      .find_macroblock = find_macroblock_dv25_411,
       .pix_fmt = PIX_FMT_YUV411P,
       .bpm = 6,
       .block_sizes = block_sizes_dv2550,
+      .vs_total_ac_bits = (100 * 4 + 68*2) * 5,
       .audio_stride = 108,
-      .audio_min_samples  = { 1896, 1742, 1264 }, /* for 48, 44.1 and 32kHz */
+      .audio_min_samples = { 1896, 1742, 1264 }, /* for 48, 44.1 and 32Khz */
       .audio_samples_dist = { 1920, 1920, 1920, 1920, 1920 },
       .audio_shuffle = dv_audio_shuffle625,
     },
@@ -6222,17 +2832,20 @@
       .frame_size = 240000,        /* SMPTE-314M - 525/60 (NTSC) 50 Mbps */
       .difseg_size = 10,           /* also known as "DVCPRO50" */
       .n_difchan = 2,
-      .time_base = { 1001, 30000 },
+      .frame_rate = 30000,
       .ltc_divisor = 30,
+      .frame_rate_base = 1001,
       .height = 480,
       .width = 720,
       .sar = {{10, 11}, {40, 33}},
       .video_place = dv_place_422_525,
+      .find_macroblock = find_macroblock_dv50,
       .pix_fmt = PIX_FMT_YUV422P,
       .bpm = 6,
       .block_sizes = block_sizes_dv2550,
+      .vs_total_ac_bits = (100 * 4 + 68*2) * 5,
       .audio_stride = 90,
-      .audio_min_samples  = { 1580, 1452, 1053 }, /* for 48, 44.1 and 32kHz */
+      .audio_min_samples = { 1580, 1452, 1053 }, /* for 48, 44.1 and 32Khz */
       .audio_samples_dist = { 1600, 1602, 1602, 1602, 1602 }, /* per SMPTE-314M */
       .audio_shuffle = dv_audio_shuffle525,
     },
@@ -6241,17 +2854,20 @@
       .frame_size = 288000,        /* SMPTE-314M - 625/50 (PAL) 50 Mbps */
       .difseg_size = 12,           /* also known as "DVCPRO50" */
       .n_difchan = 2,
-      .time_base = { 1, 25 },
+      .frame_rate = 25,
+      .frame_rate_base = 1,
       .ltc_divisor = 25,
       .height = 576,
       .width = 720,
       .sar = {{59, 54}, {118, 81}},
       .video_place = dv_place_422_625,
+      .find_macroblock = find_macroblock_dv50,
       .pix_fmt = PIX_FMT_YUV422P,
       .bpm = 6,
       .block_sizes = block_sizes_dv2550,
+      .vs_total_ac_bits = (100 * 4 + 68*2) * 5,
       .audio_stride = 108,
-      .audio_min_samples  = { 1896, 1742, 1264 }, /* for 48, 44.1 and 32kHz */
+      .audio_min_samples = { 1896, 1742, 1264 }, /* for 48, 44.1 and 32Khz */
       .audio_samples_dist = { 1920, 1920, 1920, 1920, 1920 },
       .audio_shuffle = dv_audio_shuffle625,
     },
@@ -6260,17 +2876,20 @@
       .frame_size = 480000,        /* SMPTE-370M - 1080i60 100 Mbps */
       .difseg_size = 10,           /* also known as "DVCPRO HD" */
       .n_difchan = 4,
-      .time_base = { 1001, 30000 },
+      .frame_rate = 30000,
       .ltc_divisor = 30,
+      .frame_rate_base = 1001,
       .height = 1080,
       .width = 1280,
       .sar = {{1, 1}, {1, 1}},
-      .video_place = dv_place_1080i60,
+      .video_place = 0,
+      .find_macroblock = find_macroblock_dv100_1080i60,
       .pix_fmt = PIX_FMT_YUV422P,
       .bpm = 8,
       .block_sizes = block_sizes_dv100,
+      .vs_total_ac_bits = (68*6 + 52*2) * 5,
       .audio_stride = 90,
-      .audio_min_samples  = { 1580, 1452, 1053 }, /* for 48, 44.1 and 32kHz */
+      .audio_min_samples = { 1580, 1452, 1053 }, /* for 48, 44.1 and 32Khz */
       .audio_samples_dist = { 1600, 1602, 1602, 1602, 1602 }, /* per SMPTE-314M */
       .audio_shuffle = dv_audio_shuffle525,
     },
@@ -6279,58 +2898,45 @@
       .frame_size = 576000,        /* SMPTE-370M - 1080i50 100 Mbps */
       .difseg_size = 12,           /* also known as "DVCPRO HD" */
       .n_difchan = 4,
-      .time_base = { 1, 25 },
+      .frame_rate = 25,
+      .frame_rate_base = 1,
       .ltc_divisor = 25,
       .height = 1080,
       .width = 1440,
       .sar = {{1, 1}, {1, 1}},
-      .video_place = dv_place_1080i50,
+      .video_place = 0,
+      .find_macroblock = find_macroblock_dv100_1080i50,
       .pix_fmt = PIX_FMT_YUV422P,
       .bpm = 8,
       .block_sizes = block_sizes_dv100,
+      .vs_total_ac_bits = (68*6 + 52*2) * 5,
       .audio_stride = 108,
-      .audio_min_samples  = { 1896, 1742, 1264 }, /* for 48, 44.1 and 32kHz */
+      .audio_min_samples = { 1896, 1742, 1264 }, /* for 48, 44.1 and 32Khz */
       .audio_samples_dist = { 1920, 1920, 1920, 1920, 1920 },
       .audio_shuffle = dv_audio_shuffle625,
     },
     { .dsf = 0,
       .video_stype = 0x18,
-      .frame_size = 240000,        /* SMPTE-370M - 720p60 100 Mbps */
+      .frame_size = 480000,        /* SMPTE-370M - 720p60 100 Mbps */
       .difseg_size = 10,           /* also known as "DVCPRO HD" */
-      .n_difchan = 2,
-      .time_base = { 1001, 60000 },
-      .ltc_divisor = 60,
-      .height = 720,
+      .n_difchan = 4,
+      .frame_rate = 30000,
+      .ltc_divisor = 30,
+      .frame_rate_base = 1001,
+      .height = 1440,
       .width = 960,
       .sar = {{1, 1}, {1, 1}},
-      .video_place = dv_place_720p60,
+      .video_place = 0,
+      .find_macroblock = find_macroblock_dv100_720p60,
       .pix_fmt = PIX_FMT_YUV422P,
       .bpm = 8,
       .block_sizes = block_sizes_dv100,
+      .vs_total_ac_bits = (68*6 + 52*2) * 5,
       .audio_stride = 90,
-      .audio_min_samples  = { 1580, 1452, 1053 }, /* for 48, 44.1 and 32kHz */
+      .audio_min_samples = { 1580, 1452, 1053 }, /* for 48, 44.1 and 32Khz */
       .audio_samples_dist = { 1600, 1602, 1602, 1602, 1602 }, /* per SMPTE-314M */
       .audio_shuffle = dv_audio_shuffle525,
     },
-    { .dsf = 1,
-      .video_stype = 0x18,
-      .frame_size = 288000,        /* SMPTE-370M - 720p50 100 Mbps */
-      .difseg_size = 12,           /* also known as "DVCPRO HD" */
-      .n_difchan = 2,
-      .time_base = { 1, 50 },
-      .ltc_divisor = 50,
-      .height = 720,
-      .width = 960,
-      .sar = {{1, 1}, {1, 1}},
-      .video_place = dv_place_720p50,
-      .pix_fmt = PIX_FMT_YUV422P,
-      .bpm = 8,
-      .block_sizes = block_sizes_dv100,
-      .audio_stride = 90,
-      .audio_min_samples  = { 1580, 1452, 1053 }, /* for 48, 44.1 and 32kHz */
-      .audio_samples_dist = { 1600, 1602, 1602, 1602, 1602 }, /* per SMPTE-314M */
-      .audio_shuffle = dv_audio_shuffle525,
-    }
 };
 
 enum dv_section_type {
@@ -6343,7 +2949,7 @@
 
 enum dv_pack_type {
      dv_header525     = 0x3f, /* see dv_write_pack for important details on */
-     dv_header625     = 0xbf, /* these two packs */
+     dv_header625     = 0xbf, /* these three packs */
      dv_timecode      = 0x13,
      dv_audio_source  = 0x50,
      dv_audio_control = 0x51,
@@ -6358,49 +2964,44 @@
 
 #define DV_PROFILE_IS_HD(p) ((p)->video_stype & 0x10)
 #define DV_PROFILE_IS_1080i50(p) (((p)->video_stype == 0x14) && ((p)->dsf == 1))
-#define DV_PROFILE_IS_720p50(p)  (((p)->video_stype == 0x18) && ((p)->dsf == 1))
+#define DV_PROFILE_IS_1080i60(p) (((p)->video_stype == 0x14) && ((p)->dsf == 0))
 
 /* minimum number of bytes to read from a DV stream in order to determine the profile */
 #define DV_PROFILE_BYTES (6*80) /* 6 DIF blocks */
 
-/**
- * largest possible DV frame, in bytes (1080i50)
- */
+/* largest possible DV frame, in bytes (1080i50) */
 #define DV_MAX_FRAME_SIZE 576000
 
-/**
- * maximum number of blocks per macroblock in any DV format
- */
-#define DV_MAX_BPM 8
-
 static inline const DVprofile* dv_frame_profile(const uint8_t* frame)
 {
-   int i;
+    int i;
 
-   int dsf = (frame[3] & 0x80) >> 7;
+    /* DSF flag */
+    int dsf = (frame[3] & 0x80) >> 7;
 
-   int stype = frame[80*5 + 48 + 3] & 0x1f;
+    /* VAUX stype */
+    int stype = frame[80*5 + 48 + 3] & 0x1f;
 
-   /* 576i50 25Mbps 4:1:1 is a special case */
-   if (dsf == 1 && stype == 0 && frame[5] & 0x07) {
-       return &dv_profiles[2];
-   }
+    /* 576i50 25Mbps 4:1:1 is a special case */
+    if (dsf == 1 && stype == 0 && ((frame[5] & 0x07) != 0)) {
+	return &dv_profiles[2];
+    }
 
-   for (i=0; i<sizeof(dv_profiles)/sizeof(DVprofile); i++)
-       if (dsf == dv_profiles[i].dsf && stype == dv_profiles[i].video_stype)
-           return &dv_profiles[i];
+    for (i=0; i<sizeof(dv_profiles)/sizeof(DVprofile); i++)
+	if (dsf == dv_profiles[i].dsf && stype == dv_profiles[i].video_stype)
+	    return &dv_profiles[i];
 
-   return NULL;
+    return NULL;
 }
 
-static const DVprofile* dv_codec_profile(AVCodecContext* codec)
+static inline const DVprofile* dv_codec_profile(AVCodecContext* codec)
 {
     int i;
 
     for (i=0; i<sizeof(dv_profiles)/sizeof(DVprofile); i++)
        if (codec->height == dv_profiles[i].height && codec->pix_fmt == dv_profiles[i].pix_fmt &&
-           codec->width  == dv_profiles[i].width)
-               return &dv_profiles[i];
+	   codec->width == dv_profiles[i].width)
+           return &dv_profiles[i];
 
     return NULL;
 }
@@ -6408,15 +3009,18 @@
 static inline int dv_write_dif_id(enum dv_section_type t, uint8_t chan_num, uint8_t seq_num,
                                   uint8_t dif_num, uint8_t* buf)
 {
+    int fsc = chan_num & 1;
+    int fsp = 1 - (chan_num >> 1);
+
     buf[0] = (uint8_t)t;    /* Section type */
     buf[1] = (seq_num<<4) | /* DIF seq number 0-9 for 525/60; 0-11 for 625/50 */
-             (chan_num << 3) | /* FSC: for 50Mb/s 0 - first channel; 1 - second */
-             7;             /* reserved -- always 1 */
+             (fsc << 3) |   /* FSC: for 50 and 100Mb/s 0 - first channel; 1 - second */
+	     (fsp << 2) |   /* FSP: for 100Mb/s 0 - channels 0-1; 1 - channels 2-3 */
+             3;             /* reserved -- always 1 */
     buf[2] = dif_num;       /* DIF block number Video: 0-134, Audio: 0-8 */
     return 3;
 }
 
-
 static inline int dv_write_ssyb_id(uint8_t syb_num, uint8_t fr, uint8_t* buf)
 {
     if (syb_num == 0 || syb_num == 6) {
@@ -6439,4 +3043,4 @@
     return 3;
 }
 
-#endif /* AVCODEC_DVDATA_H */
+#endif /* FFMPEG_DVDATA_H */
Index: libavformat/dvenc.c
===================================================================
--- libavformat/dvenc.c	(revision 15593)
+++ libavformat/dvenc.c	(working copy)
@@ -8,8 +8,9 @@
  * Raw DV format
  * Copyright (c) 2002 Fabrice Bellard.
  *
- * 50 Mbps (DVCPRO50) support
- * Copyright (c) 2006 Daniel Maas <dmaas@maasdigital.com>
+ * 50 Mbps (DVCPRO50) and 100 Mbps (DVCPRO HD) support
+ * Copyright (c) 2006 Maas Digital LLC (Dan Maas, <dmaas@maasdigital.com>)
+ * Funded by BBC Research & Development
  *
  * This file is part of FFmpeg.
  *
@@ -34,17 +35,9 @@
 #include "dv.h"
 #include "libavutil/fifo.h"
 
-struct DVMuxContext {
-    const DVprofile*  sys;    /* Current DV profile. E.g.: 525/60, 625/50 */
-    int         n_ast;        /* Number of stereo audio streams (up to 2) */
-    AVStream   *ast[2];       /* Stereo audio streams */
-    AVFifoBuffer  audio_data[2]; /* FIFO for storing excessive amounts of PCM */
-    int         frames;       /* Number of a current frame */
-    time_t      start_time;   /* Start time of recording */
-    int         has_audio;    /* frame under contruction has audio */
-    int         has_video;    /* frame under contruction has video */
-    uint8_t     frame_buf[DV_MAX_FRAME_SIZE]; /* frame under contruction */
-};
+/* DJM - DVMuxContext moved to dv.h for use by fastencode */
+/* DJM - for fastencode */
+const DVprofile* dv_get_codec_profile(AVCodecContext *codec) { return dv_codec_profile(codec); }
 
 static const int dv_aaux_packs_dist[12][9] = {
     { 0xff, 0xff, 0xff, 0x50, 0x51, 0x52, 0x53, 0xff, 0xff },
@@ -67,18 +60,26 @@
                                             sizeof(sys->audio_samples_dist[0]))];
 }
 
-static int dv_write_pack(enum dv_pack_type pack_id, DVMuxContext *c, uint8_t* buf, ...)
+static int dv_write_pack(enum dv_pack_type pack_id, DVMuxContext *c, uint8_t* buf, int seq)
 {
     struct tm tc;
     time_t ct;
     int ltc_frame;
-    va_list ap;
 
+    /* Its hard to tell what SMPTE requires w.r.t. APT, but Quicktime needs it.
+     * We set it based on pix_fmt value but it really should be per DV profile */
+    int apt;
+    if (DV_PROFILE_IS_HD(c->sys)) {
+        apt = 0;
+    } else {
+        apt = (c->sys->pix_fmt == PIX_FMT_YUV422P ? 1 : 0);
+    }
+
     buf[0] = (uint8_t)pack_id;
     switch (pack_id) {
     case dv_timecode:
-        ct = (time_t)av_rescale_rnd(c->frames, c->sys->time_base.num, c->sys->time_base.den,
-                                    AV_ROUND_DOWN);
+        ct = (time_t)(c->frames / ((float)c->sys->frame_rate /
+                                   (float)c->sys->frame_rate_base));
         brktimegm(ct, &tc);
         /*
          * LTC drop-frame frame counter drops two frames (0 and 1) every
@@ -101,25 +102,23 @@
                  (tc.tm_hour % 10);         /* Units of hours */
         break;
     case dv_audio_source:  /* AAUX source pack */
-        va_start(ap, buf);
-        buf[1] = (1 << 7) | /* locked mode -- SMPTE only supports locked mode */
+        buf[1] = (0 << 7) | /* locked mode       */
                  (1 << 6) | /* reserved -- always 1 */
                  (dv_audio_frame_size(c->sys, c->frames) -
                   c->sys->audio_min_samples[0]);
                             /* # of samples      */
         buf[2] = (0 << 7) | /* multi-stereo      */
                  (0 << 5) | /* #of audio channels per block: 0 -- 1 channel */
-                 (0 << 4) | /* pair bit: 0 -- one pair of channels */
-                 !!va_arg(ap, int); /* audio mode        */
+                 (1 << 4) | /* reserved */
+                 ((seq >= c->sys->difseg_size/2) ? 1 : 0); /* audio mode (1st or 2nd channel) */
         buf[3] = (1 << 7) | /* res               */
                  (1 << 6) | /* multi-language flag */
                  (c->sys->dsf << 5) | /*  system: 60fields/50fields */
-                 (c->sys->n_difchan & 2); /* definition: 0 -- 25Mbps, 2 -- 50Mbps */
+                 (DV_PROFILE_IS_HD(c->sys) ? 0x3 : (apt<<1)); /* stype */
         buf[4] = (1 << 7) | /* emphasis: 1 -- off */
                  (0 << 6) | /* emphasis time constant: 0 -- reserved */
-                 (0 << 3) | /* frequency: 0 -- 48kHz, 1 -- 44,1kHz, 2 -- 32kHz */
+                 (0 << 3) | /* frequency: 0 -- 48Khz, 1 -- 44,1Khz, 2 -- 32Khz */
                   0;        /* quantization: 0 -- 16bit linear, 1 -- 12bit nonlinear */
-        va_end(ap);
         break;
     case dv_audio_control:
         buf[1] = (0 << 6) | /* copy protection: 0 -- unrestricted */
@@ -138,8 +137,8 @@
         break;
     case dv_audio_recdate:
     case dv_video_recdate:  /* VAUX recording date */
-        ct = c->start_time + av_rescale_rnd(c->frames, c->sys->time_base.num,
-                                                       c->sys->time_base.den, AV_ROUND_DOWN);
+        ct = c->start_time + (time_t)(c->frames /
+             ((float)c->sys->frame_rate / (float)c->sys->frame_rate_base));
         brktimegm(ct, &tc);
         buf[1] = 0xff; /* ds, tm, tens of time zone, units of time zone */
                        /* 0xff is very likely to be "unknown" */
@@ -154,8 +153,8 @@
         break;
     case dv_audio_rectime:  /* AAUX recording time */
     case dv_video_rectime:  /* VAUX recording time */
-        ct = c->start_time + av_rescale_rnd(c->frames, c->sys->time_base.num,
-                                                       c->sys->time_base.den, AV_ROUND_DOWN);
+        ct = c->start_time + (time_t)(c->frames /
+             ((float)c->sys->frame_rate / (float)c->sys->frame_rate_base));
         brktimegm(ct, &tc);
         buf[1] = (3 << 6) | /* reserved -- always 1 */
                  0x3f; /* tens of frame, units of frame: 0x3f - "unknown" ? */
@@ -183,45 +182,69 @@
     for (i = 0; i < c->sys->difseg_size; i++) {
         frame_ptr += 6 * 80; /* skip DIF segment header */
         for (j = 0; j < 9; j++) {
-            dv_write_pack(dv_aaux_packs_dist[i][j], c, &frame_ptr[3], i >= c->sys->difseg_size/2);
+            dv_write_pack(dv_aaux_packs_dist[i][j], c, &frame_ptr[3], i);
             for (d = 8; d < 80; d+=2) {
                 of = c->sys->audio_shuffle[i][j] + (d - 8)/2 * c->sys->audio_stride;
                 if (of*2 >= size)
                     continue;
 
-                frame_ptr[d]   = av_fifo_peek(&c->audio_data[channel], of*2+1); // FIXME: maybe we have to admit
-                frame_ptr[d+1] = av_fifo_peek(&c->audio_data[channel], of*2);   //        that DV is a big-endian PCM
+                frame_ptr[d] = av_fifo_peek(&c->audio_data[channel], of*2+1); // FIXME: may be we have to admit
+                frame_ptr[d+1] = av_fifo_peek(&c->audio_data[channel], of*2); //        that DV is a big endian PCM
             }
             frame_ptr += 16 * 80; /* 15 Video DIFs + 1 Audio DIF */
         }
     }
 }
 
-static void dv_inject_metadata(DVMuxContext *c, uint8_t* frame)
+/* DJM - exported for fastencode */
+void dv_inject_audio_raw(DVMuxContext *c, int channel, uint8_t* frame_ptr, uint8_t *data)
 {
+    int i, j, d, of, size;
+    size = 4 * dv_audio_frame_size(c->sys, c->frames);
+    frame_ptr += channel * c->sys->difseg_size * 150 * 80;
+    for (i = 0; i < c->sys->difseg_size; i++) {
+       frame_ptr += 6 * 80; /* skip DIF segment header */
+       for (j = 0; j < 9; j++) {
+          dv_write_pack(dv_aaux_packs_dist[i][j], c, &frame_ptr[3], i);
+          for (d = 8; d < 80; d+=2) {
+             of = c->sys->audio_shuffle[i][j] + (d - 8)/2 * c->sys->audio_stride;
+             if (of*2 >= size)
+                 continue;
+
+             frame_ptr[d] = data[of*2+1];
+             frame_ptr[d+1] = data[of*2];
+          }
+          frame_ptr += 16 * 80; /* 15 Video DIFs + 1 Audio DIF */
+       }
+    }
+}
+
+void dv_inject_metadata(DVMuxContext *c, uint8_t* frame)
+{
     int j, k;
     uint8_t* buf;
+    int seq = 0;
 
-    for (buf = frame; buf < frame + c->sys->frame_size; buf += 150 * 80) {
+    for (buf = frame; buf < frame + c->sys->frame_size; buf += 150 * 80, seq++) {
         /* DV subcode: 2nd and 3d DIFs */
         for (j = 80; j < 80 * 3; j += 80) {
             for (k = 6; k < 6 * 8; k += 8)
-                dv_write_pack(dv_timecode, c, &buf[j+k]);
+                dv_write_pack(dv_timecode, c, &buf[j+k], seq);
 
             if (((long)(buf-frame)/(c->sys->frame_size/(c->sys->difseg_size*c->sys->n_difchan))%c->sys->difseg_size) > 5) { /* FIXME: is this really needed ? */
-                dv_write_pack(dv_video_recdate, c, &buf[j+14]);
-                dv_write_pack(dv_video_rectime, c, &buf[j+22]);
-                dv_write_pack(dv_video_recdate, c, &buf[j+38]);
-                dv_write_pack(dv_video_rectime, c, &buf[j+46]);
+                dv_write_pack(dv_video_recdate, c, &buf[j+14], seq);
+                dv_write_pack(dv_video_rectime, c, &buf[j+22], seq);
+                dv_write_pack(dv_video_recdate, c, &buf[j+38], seq);
+                dv_write_pack(dv_video_rectime, c, &buf[j+46], seq);
             }
         }
 
         /* DV VAUX: 4th, 5th and 6th 3DIFs */
         for (j = 80*3 + 3; j < 80*6; j += 80) {
-            dv_write_pack(dv_video_recdate, c, &buf[j+5*2]);
-            dv_write_pack(dv_video_rectime, c, &buf[j+5*3]);
-            dv_write_pack(dv_video_recdate, c, &buf[j+5*11]);
-            dv_write_pack(dv_video_rectime, c, &buf[j+5*12]);
+            dv_write_pack(dv_video_recdate, c, &buf[j+5*2], seq);
+            dv_write_pack(dv_video_rectime, c, &buf[j+5*3], seq);
+            dv_write_pack(dv_video_recdate, c, &buf[j+5*11], seq);
+            dv_write_pack(dv_video_rectime, c, &buf[j+5*12], seq);
         }
     }
 }
@@ -289,12 +312,12 @@
     AVStream *vst = NULL;
     int i;
 
-    /* we support at most 1 video and 2 audio streams */
-    if (s->nb_streams > 3)
+    /* we support at most 1 video and 4 audio streams */
+    if (s->nb_streams > 5)
         return NULL;
 
     c->n_ast = 0;
-    c->ast[0] = c->ast[1] = NULL;
+    c->ast[0] = c->ast[1] = c->ast[2] = c->ast[3] = NULL;
 
     /* We have to sort out where audio and where video stream is */
     for (i=0; i<s->nb_streams; i++) {
@@ -325,8 +348,10 @@
     if (!c->sys)
         goto bail_out;
 
-    if((c->n_ast > 1) && (c->sys->n_difchan < 2)) {
+    if(((c->n_ast > 1) && (c->sys->n_difchan < 2)) ||
+       ((c->n_ast > 2) && (c->sys->n_difchan < 4))) {
         /* only 1 stereo pair is allowed in 25Mbps mode */
+        /* only 2 stereo pairs allowed in 50Mbps mode */
         goto bail_out;
     }
 
@@ -359,14 +384,16 @@
         av_fifo_free(&c->audio_data[i]);
 }
 
-#ifdef CONFIG_DV_MUXER
+#ifdef CONFIG_MUXERS
 static int dv_write_header(AVFormatContext *s)
 {
     if (!dv_init_mux(s)) {
         av_log(s, AV_LOG_ERROR, "Can't initialize DV format!\n"
                     "Make sure that you supply exactly two streams:\n"
-                    "     video: 25fps or 29.97fps, audio: 2ch/48kHz/PCM\n"
-                    "     (50Mbps allows an optional second audio stream)\n");
+                    "     video: 25fps or 29.97fps, YUV422P, YUV420P, or YUV411P\n"
+                    "            720x576, 720x480, 1440x1080, 1280x1080, 960x1440\n"
+                    "     audio: 2ch/48Khz/PCM\n"
+                    "     (50Mbps allows an optional second audio stream, and 100Mbps allows up to four audio streams)\n");
         return -1;
     }
     return 0;
@@ -397,7 +424,9 @@
     dv_delete_mux(s->priv_data);
     return 0;
 }
+#endif /* CONFIG_MUXERS */
 
+#ifdef CONFIG_DV_MUXER
 AVOutputFormat dv_muxer = {
     "dv",
     NULL_IF_CONFIG_SMALL("DV video format"),
@@ -410,4 +439,4 @@
     dv_write_packet,
     dv_write_trailer,
 };
-#endif /* CONFIG_DV_MUXER */
+#endif
Index: libavformat/dv.c
===================================================================
--- libavformat/dv.c	(revision 15593)
+++ libavformat/dv.c	(working copy)
@@ -9,7 +9,7 @@
  * Copyright (c) 2002 Fabrice Bellard.
  *
  * 50 Mbps (DVCPRO50) and 100 Mbps (DVCPRO HD) support
- * Copyright (c) 2006 Daniel Maas <dmaas@maasdigital.com>
+ * Copyright (c) 2006 Maas Digital LLC (Dan Maas, <dmaas@maasdigital.com>)
  * Funded by BBC Research & Development
  *
  * This file is part of FFmpeg.
@@ -99,7 +99,7 @@
  * 3. Audio is always returned as 16bit linear samples: 12bit nonlinear samples
  *    are converted into 16bit linear ones.
  */
-static int dv_extract_audio(uint8_t* frame, uint8_t* ppcm[4],
+static int dv_extract_audio(uint8_t* frame, uint8_t *ppcm[4],
                             const DVprofile *sys)
 {
     int size, chan, i, j, d, of, smpls, freq, quant, half_ch;
@@ -112,7 +112,7 @@
         return 0;
 
     smpls = as_pack[1] & 0x3f; /* samples in this frame - min. samples */
-    freq = (as_pack[4] >> 3) & 0x07; /* 0 - 48kHz, 1 - 44,1kHz, 2 - 32kHz */
+    freq = (as_pack[4] >> 3) & 0x07; /* 0 - 48KHz, 1 - 44,1kHz, 2 - 32 kHz */
     quant = as_pack[4] & 0x07; /* 0 - 16bit linear, 1 - 12bit nonlinear */
 
     if (quant > 1)
@@ -121,8 +121,7 @@
     size = (sys->audio_min_samples[freq] + smpls) * 4; /* 2ch, 2bytes */
     half_ch = sys->difseg_size/2;
 
-    /* We work with 720p frames split in half, thus even frames have channels 0,1 and odd 2,3 */
-    ipcm = (sys->height == 720 && !(frame[1]&0x0C))?2:0;
+    ipcm = 0;
     pcm = ppcm[ipcm++];
 
     /* for each DIF channel */
@@ -132,9 +131,10 @@
             frame += 6 * 80; /* skip DIF segment header */
             if (quant == 1 && i == half_ch) {
                 /* next stereo channel (12bit mode only) */
-                pcm = ppcm[ipcm++];
-                if (!pcm)
-                    break;
+		assert(ipcm == 1);
+		pcm = ppcm[ipcm++];
+		if (!pcm)
+		    break;
             }
 
             /* for each AV sequence */
@@ -145,8 +145,8 @@
                         if (of*2 >= size)
                             continue;
 
-                        pcm[of*2]   = frame[d+1]; // FIXME: maybe we have to admit
-                        pcm[of*2+1] = frame[d];   //        that DV is a big-endian PCM
+                        pcm[of*2] = frame[d+1]; // FIXME: may be we have to admit
+                        pcm[of*2+1] = frame[d]; //        that DV is a big endian PCM
                         if (pcm[of*2+1] == 0x80 && pcm[of*2] == 0x00)
                             pcm[of*2+1] = 0;
                     } else {           /* 12bit quantization */
@@ -161,12 +161,12 @@
                         if (of*2 >= size)
                             continue;
 
-                        pcm[of*2]   = lc & 0xff; // FIXME: maybe we have to admit
-                        pcm[of*2+1] = lc >> 8;   //        that DV is a big-endian PCM
+                        pcm[of*2] = lc & 0xff; // FIXME: may be we have to admit
+                        pcm[of*2+1] = lc >> 8; //        that DV is a big endian PCM
                         of = sys->audio_shuffle[i%half_ch+half_ch][j] +
                             (d - 8)/3 * sys->audio_stride;
-                        pcm[of*2]   = rc & 0xff; // FIXME: maybe we have to admit
-                        pcm[of*2+1] = rc >> 8;   //        that DV is a big-endian PCM
+                        pcm[of*2] = rc & 0xff; // FIXME: may be we have to admit
+                        pcm[of*2+1] = rc >> 8; //        that DV is a big endian PCM
                         ++d;
                     }
                 }
@@ -175,10 +175,10 @@
             }
         }
 
-        /* next stereo channel (50Mbps and 100Mbps only) */
-        pcm = ppcm[ipcm++];
-        if (!pcm)
-            break;
+        /* next stereo channel (50Mbps/100Mbps only) */
+	pcm = ppcm[ipcm++];
+	if (!pcm)
+	    break;
     }
 
     return size;
@@ -196,14 +196,18 @@
     }
 
     smpls = as_pack[1] & 0x3f; /* samples in this frame - min. samples */
-    freq = (as_pack[4] >> 3) & 0x07; /* 0 - 48kHz, 1 - 44,1kHz, 2 - 32kHz */
+    freq = (as_pack[4] >> 3) & 0x07; /* 0 - 48KHz, 1 - 44,1kHz, 2 - 32 kHz */
     stype = (as_pack[3] & 0x1f); /* 0 - 2CH, 2 - 4CH, 3 - 8CH */
     quant = as_pack[4] & 0x07; /* 0 - 16bit linear, 1 - 12bit nonlinear */
 
     /* note: ach counts PAIRS of channels (i.e. stereo channels) */
-    ach = ((int[4]){  1,  0,  2,  4})[stype];
-    if (ach == 1 && quant && freq == 2)
-        ach = 2;
+    if (stype == 3) {
+	ach = 4;
+    } else if (stype == 2 || (quant && (freq == 2))) {
+	ach = 2;
+    } else {
+	ach = 1;
+    }
 
     /* Dynamic handling of the audio streams in DV */
     for (i=0; i<ach; i++) {
@@ -241,8 +245,8 @@
     if (c->sys) {
         avctx = c->vst->codec;
 
-        av_set_pts_info(c->vst, 64, c->sys->time_base.num, c->sys->time_base.den);
-        avctx->time_base= c->sys->time_base;
+        av_set_pts_info(c->vst, 64, c->sys->frame_rate_base, c->sys->frame_rate);
+        avctx->time_base= (AVRational){c->sys->frame_rate_base, c->sys->frame_rate};
         if(!avctx->width){
             avctx->width = c->sys->width;
             avctx->height = c->sys->height;
@@ -254,9 +258,10 @@
         apt = frame[4] & 0x07;
         is16_9 = (vsc_pack && ((vsc_pack[2] & 0x07) == 0x02 ||
                                (!apt && (vsc_pack[2] & 0x07) == 0x07)));
-        c->vst->sample_aspect_ratio = c->sys->sar[is16_9];
-        avctx->bit_rate = av_rescale_q(c->sys->frame_size, (AVRational){8,1},
-                                       c->sys->time_base);
+        avctx->sample_aspect_ratio = c->sys->sar[is16_9];
+        avctx->bit_rate = av_rescale(c->sys->frame_size * 8,
+                                     c->sys->frame_rate,
+                                     c->sys->frame_rate_base);
         size = c->sys->frame_size;
     }
     return size;
@@ -282,7 +287,7 @@
 
     c->sys = NULL;
     c->fctx = s;
-    memset(c->ast, 0, sizeof(c->ast));
+    c->ast[0] = c->ast[1] = c->ast[2] = c->ast[3] = NULL;
     c->ach = 0;
     c->frames = 0;
     c->abytes = 0;
@@ -316,7 +321,7 @@
                       uint8_t* buf, int buf_size)
 {
     int size, i;
-    uint8_t *ppcm[4] = {0};
+    uint8_t *ppcm[4];
 
     if (buf_size < DV_PROFILE_BYTES ||
         !(c->sys = dv_frame_profile(buf)) ||
@@ -327,6 +332,7 @@
     /* Queueing audio packet */
     /* FIXME: in case of no audio/bad audio we have to do something */
     size = dv_extract_audio_info(c, buf);
+    ppcm[0] = ppcm[1] = ppcm[2] = ppcm[3] = NULL;
     for (i=0; i<c->ach; i++) {
        c->audio_pkt[i].size = size;
        c->audio_pkt[i].pts  = c->abytes * 30000*8 / c->ast[i]->codec->bit_rate;
@@ -335,14 +341,6 @@
     dv_extract_audio(buf, ppcm, c->sys);
     c->abytes += size;
 
-    /* We work with 720p frames split in half, thus even frames have channels 0,1 and odd 2,3 */
-    if (c->sys->height == 720) {
-        if (buf[1]&0x0C)
-            c->audio_pkt[2].size = c->audio_pkt[3].size = 0;
-        else
-            c->audio_pkt[0].size = c->audio_pkt[1].size = 0;
-    }
-
     /* Now it's time to return video packet */
     size = dv_extract_video_info(c, buf);
     av_init_packet(pkt);
@@ -378,8 +376,9 @@
 {
     c->frames= frame_offset;
     if (c->ach)
-        c->abytes= av_rescale_q(c->frames, c->sys->time_base,
-                                (AVRational){8, c->ast[0]->codec->bit_rate});
+        c->abytes= av_rescale(c->frames,
+                              c->ast[0]->codec->bit_rate * (int64_t)c->sys->frame_rate_base,
+                              8*c->sys->frame_rate);
     c->audio_pkt[0].size = c->audio_pkt[1].size = 0;
     c->audio_pkt[2].size = c->audio_pkt[3].size = 0;
 }
@@ -407,13 +406,14 @@
         return AVERROR(EIO);
 
     c->dv_demux->sys = dv_frame_profile(c->buf);
-    if (!c->dv_demux->sys) {
-        av_log(s, AV_LOG_ERROR, "Can't determine profile of DV input stream.\n");
-        return -1;
+    if(!c->dv_demux->sys) {
+	av_log(s, AV_LOG_ERROR, "Can't determine profile of DV input stream.\n");
+	return -1;
     }
 
-    s->bit_rate = av_rescale_q(c->dv_demux->sys->frame_size, (AVRational){8,1},
-                               c->dv_demux->sys->time_base);
+    s->bit_rate = av_rescale(c->dv_demux->sys->frame_size * 8,
+                             c->dv_demux->sys->frame_rate,
+                             c->dv_demux->sys->frame_rate_base);
 
     return 0;
 }
Index: libavformat/dv.h
===================================================================
--- libavformat/dv.h	(revision 15593)
+++ libavformat/dv.h	(working copy)
@@ -25,10 +25,11 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
  */
 
-#ifndef AVFORMAT_DV_H
-#define AVFORMAT_DV_H
+#ifndef FFMPEG_DV_H
+#define FFMPEG_DV_H
 
 #include "avformat.h"
+#include "libavutil/fifo.h"
 
 typedef struct DVDemuxContext DVDemuxContext;
 DVDemuxContext* dv_init_demux(AVFormatContext* s);
@@ -41,4 +42,29 @@
 int dv_assemble_frame(DVMuxContext *c, AVStream*, const uint8_t*, int, uint8_t**);
 void dv_delete_mux(DVMuxContext*);
 
-#endif /* AVFORMAT_DV_H */
+/* DJM - additional public exports for use by fastencode */
+
+struct DVprofile;
+const struct DVprofile* dv_get_codec_profile(AVCodecContext*);
+
+#ifndef DV_MAX_FRAME_SIZE
+#define DV_MAX_FRAME_SIZE 576000
+#endif
+
+struct DVMuxContext {
+    const struct DVprofile* sys; /* Current DV profile. E.g.: 525/60, 625/50 */
+    int         n_ast;        /* Number of stereo audio streams (up to 4) */
+    AVStream   *ast[4];       /* Stereo audio streams */
+    AVFifoBuffer  audio_data[4]; /* Fifo for storing excessive amounts of PCM */
+
+    int         frames;       /* Number of a current frame */
+    time_t      start_time;   /* Start time of recording */
+    int         has_audio;    /* frame under contruction has audio */
+    int         has_video;    /* frame under contruction has video */
+    uint8_t     frame_buf[DV_MAX_FRAME_SIZE]; /* frame under contruction */
+};
+
+void dv_inject_metadata(DVMuxContext *c, uint8_t* frame);
+void dv_inject_audio_raw(DVMuxContext *c, int channel, uint8_t* frame_ptr, uint8_t *data);
+
+#endif /* FFMPEG_DV_H */
