    # $Id: configure.in,v 1.11 2009/02/27 12:19:16 john_f Exp $
#
AC_INIT(src/ingexgui.cpp)
AM_INIT_AUTOMAKE(ingexgui, 0.1)

AC_PROG_CXX
AC_PROG_INSTALL
AC_LIBTOOL_DLOPEN
AC_PROG_LIBTOOL

CPPFLAGS="$CPPFLAGS -Wall -g -fexceptions"
CXXFLAGS="$CXXFLAGS -Wall -g -fexceptions"

WXCONFIG=wx-config
AC_ARG_WITH(wx-config,
[[  --with-wx-config=FILE     Use the given path to wx-config when determining
                            wxWidgets configuration; defaults to "wx-config"]],
[
    if test "$withval" != "yes" -a "$withval" != ""; then
        WXCONFIG=$withval
    fi
])

wxversion=0

AC_DEFUN([WXTEST],
[
	AC_REQUIRE([AC_PROG_AWK])
	AC_MSG_CHECKING([wxWidgets version])
	if wxversion=`$WXCONFIG --version`; then
		AC_MSG_RESULT([$wxversion])
	else
		AC_MSG_RESULT([not found])
		AC_MSG_ERROR([wxWidgets is required. Try --with-wx-config.])
	fi])

# Call WXTEST func
WXTEST

# Verify minimus requires
vers=`echo $wxversion | $AWK 'BEGIN { FS = "."; } { printf "% d", ($1 * 1000 + $2) * 1000 + $3;}'`
if test -n "$vers" && test "$vers" -ge 2008000; then
	WX_CPPFLAGS="`$WXCONFIG --cppflags`"
	WX_CXXFLAGS="`$WXCONFIG --cxxflags | sed -e 's/-fno-exceptions//'`"
	WX_LIBS="`$WXCONFIG --libs`"
else
	AC_MSG_ERROR([wxWidgets 2.8.0 or newer is required])
fi

# WORKSPACE is set to the ingex top-level directory
WORKSPACE=`pwd | sed 's/\(.*\/Ingexgui\/\).*/\1/' | xargs dirname | xargs dirname | xargs dirname`

AC_DEFUN([PLAYERTEST],
[
	PLAYERLIB="libIngexPlayer.a"
	AC_MSG_CHECKING([for $PLAYERLIB])
	if test -f "$WORKSPACE/player/IngexPlayer/$PLAYERLIB"; then
		AC_MSG_RESULT([yes])
		AC_MSG_CHECKING([player for DVS card support])
		# test player lib for dvs_register_listener symbol which only exists when DVS supported is compiled in
		if test `readelf -s $WORKSPACE/player/IngexPlayer/$PLAYERLIB | grep -c dvs_register_listener` -gt 0; then
			AC_MSG_RESULT([yes])
			DVS_CPPFLAGS="-DHAVE_DVS"
			AC_MSG_CHECKING([for DVS SDK])
			# search for libdvsoem.a in common locations
			if test `uname -m` = "x86_64" ; then DVS_ARCH_PATH=linux-x86_64 ; else DVS_ARCH_PATH=linux-x86 ; fi
			DVS_LIB_PATH=`for f in /usr/local/lib /usr/local/lib64 /usr/lib /usr/lib64 $HOME/sdk3.*/$DVS_ARCH_PATH/lib $HOME/sdk2.*/lib; do test -e $f/libdvsoem.a && echo $f && break; done`
			if test -n "$DVS_LIB_PATH"; then
				AC_MSG_RESULT([yes])
				DVS_LDFLAGS="-L$DVS_LIB_PATH -ldvsoem"
			else 
				if test -n "$DVSSDK"; then
					# DVS SDK version 3
					AC_MSG_RESULT([yes])
					DVS_LDFLAGS="-L$DVSSDK/linux-x86/lib -L$DVSSDK/linux-x86_64/lib -ldvsoem"
				else
					if test -n "$DVS_SDK_INSTALL"; then
						# DVS SDK version 2
						AC_MSG_RESULT([yes])
						DVS_LDFLAGS="-L$DVS_SDK_INSTALL/linux/lib -ldvsoem"
					else
						AC_MSG_RESULT([no])
						AC_MSG_ERROR([Cannot find DVS SDK: set the DVSSDK or DVS_SDK_INSTALL environment variable to the location of your installed DVS SDK version 3 or version 2 respectively])
					fi
				fi
			fi
		else
			AC_MSG_RESULT([no])
			AC_MSG_WARN([You won't be able to play back through a DVS card to an external monitor.])
		fi
		AC_MSG_CHECKING([player for shared memory support])
		if test `readelf -s $WORKSPACE/player/IngexPlayer/$PLAYERLIB | grep -c shm_read_frame` -gt 0; then
			AC_MSG_RESULT([yes])
		else
			AC_MSG_RESULT([no])
			AC_MSG_WARN([You won't be able to use E to E mode to show incoming material with the player.])
			PLAYER_CPPFLAGS="-DDISABLE_SHARED_MEM_SOURCE"
		fi
	else
		AC_MSG_RESULT([no])
		AC_MSG_ERROR([You need to build the Ingex Player first.])
	fi
])

#Call PLAYERTEST func
PLAYERTEST

AC_DEFUN([ACETAOTEST],
[
	AC_MSG_CHECKING([for ACE_ROOT and TAO_ROOT variables])
	if test -n "$ACE_ROOT" && test -n "$TAO_ROOT"; then
		AC_MSG_RESULT([yes])
	else
		AC_MSG_RESULT([no])
		AC_MSG_WARN([You need to define ACE_ROOT and TAO_ROOT environment variables before you build the project.])
	fi
	IDLLOC="$WORKSPACE/studio/ace-tao/IDL"
	IDLLIB="libidl.a"
	AC_MSG_CHECKING([for $IDLLIB])
	if test -f "$IDLLOC/$IDLLIB"; then
		AC_MSG_RESULT([yes])
	else
		AC_MSG_RESULT([no])
		AC_MSG_ERROR([You need to build the IDL library first.])
	fi
])

#call ACETAOTEST func
ACETAOTEST

CPPFLAGS="$CPPFLAGS $WX_CPPFLAGS -I$ACE_ROOT -I$TAO_ROOT -I$TAO_ROOT/orbsvcs -I$IDLLOC/Generated -I$WORKSPACE/player/ingex_player -I$WORKSPACE/player/IngexPlayer -I$WORKSPACE/player/jogshuttle -I$WORKSPACE/libMXF/lib/include -I$WORKSPACE/libMXF/examples/avidmxfinfo $DVS_CPPFLAGS $PLAYER_CPPFLAGS"
CXXFLAGS="$CXXFLAGS $WX_CPPFLAGS"
LIBS="-lTAO -lACE -lTAO_CosNaming -lTAO_PortableServer -lTAO_AnyTypeCode -lTAO_Valuetype -lTAO_Messaging -lTAO_PI -lTAO_CodecFactory -lX11 -lXv -lpthread -lfreetype -lfontconfig -luuid -lcommon -lYUVlib -ld3mxfinfo -lavidmxfinfo -lMXFReader -lMXF -lavformat -lavcodec -lavutil -lswscale -lmp3lame -lx264 -lfaac -lfaad -lbz2 -lportaudio"
LIBDIRS="-L$ACE_ROOT/lib -L$WORKSPACE/libMXF/lib -L$WORKSPACE/libMXF/examples/avidmxfinfo -L$WORKSPACE/libMXF/examples/archive/info -L$WORKSPACE/libMXF/examples/reader -L$WORKSPACE/common -L$WORKSPACE/common/YUVlib"
LDFLAGS="$LDFLAGS $LIBS $LIBDIRS $IDLLOC/$IDLLIB $WORKSPACE/player/IngexPlayer/$PLAYERLIB $DVS_LDFLAGS"

AC_SUBST(WX_LIBS)
AC_SUBST(WORKSPACE)

AC_OUTPUT(Makefile src/Makefile)
