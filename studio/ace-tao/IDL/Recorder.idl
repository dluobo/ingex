/*
 * $Id: Recorder.idl,v 1.3 2008/09/03 14:04:24 john_f Exp $
 *
 * Interface for Recorder.
 *
 * Copyright (C) 2006  British Broadcasting Corporation.
 * All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301, USA.
 */

#ifndef Recorder_idl
#define Recorder_idl

#pragma prefix "bbc.co.uk"

#include "defs.idl"
#include "Timecode.idl"
#include "Track.idl"
#include "DataSource.idl"

#include <tao/orb.idl> // for StringSeq

module ProdAuto
{

    // Status of a recorder input.
    struct TrackStatus
    {
        boolean rec; ///< True if currently recording.
        boolean signal_present; ///< True if signal present at input.
        MxfTimecode timecode; ///< Current %Timecode relevant to this input.
    };
    typedef sequence<TrackStatus> TrackStatusList;

    /// Colour of Locator.
    module LocatorColour
    {
        enum EnumType { DEFAULT_COLOUR, WHITE, RED, YELLOW, GREEN, CYAN, BLUE, MAGENTA, BLACK };
    };

    /// A cue-point to carry through to post-production.
    struct Locator
    {
        string comment;
        LocatorColour::EnumType colour;
        MxfTimecode timecode;
    };
    typedef sequence<Locator> LocatorSeq;



    /// Interface for an audio/video recorder with a single input or
    /// with multiple inputs controlled as a group.
    interface Recorder : DataSource
    {
        enum ReturnCode { SUCCESS, PARTIAL_SUCCESS, FAILURE };

        /// Get a description of the essence format(s) which are produced.
        /// There could be many aspects to this such as whether recorder is file or
        /// tape based, what the inputs are (SD, HD, no. of audio channels), what
        /// encodings are done and whether any composites of the inputs are produced
        /// such as quad-split.
        string RecordingFormat();

        /// Edit Rate of this Recorder.
        /// All timecode and duration parameters should conform to this.
        readonly attribute Rational EditRate;

        /// Details of the tracks
        readonly attribute TrackList Tracks;

        /// Status of inputs
        readonly attribute TrackStatusList TracksStatus;

        /// List available recorder configs
        readonly attribute CORBA::StringSeq Configs;

        /// Current config
        readonly attribute string CurrentConfig;

        /// Select recorder config
        boolean SelectConfig(in string config);

        /// List currently existing project names
        readonly attribute CORBA::StringSeq ProjectNames;

        /// Add project names
        void AddProjectNames(in CORBA::StringSeq project_names);

        /// Maximum pre-roll available before StartRecord received
        readonly attribute MxfDuration MaxPreRoll;
        /// Maximum post-roll available after StopRecord received
        readonly attribute MxfDuration MaxPostRoll;

        /// Start recording.
        /// @param start_timecode Timecode to select first frame in recording after pre-roll period.
        /// If timecode has invalid flag set, the meaning is "now".
        /// The returned value is the actual first frame in the recording (i.e. including pre-roll).
        /// @param pre_roll Duration to be included at start of recording prior to start_timecode.
        /// @param rec_enable Enable for required recording tracks. Sequence should
        /// have one element for each track.
        /// @param test_only If true, test ability to record but don't actually record.
        /// @return Indication of success or failure.
        ReturnCode Start(
            inout MxfTimecode start_timecode,
            in MxfDuration pre_roll,
            in CORBA::BooleanSeq rec_enable,
            in string project,
            in boolean test_only
        );

        /// Stop recording.
        /// @param stop_timecode Timecode to select the first frame of the post-roll period
        /// of the recording.
        /// The returned value is the actual "out time" of the recording, i.e. the frame after
        /// the last frame present in the recording.
        /// If timecode has invalid flag set, the meaning is "now".
        /// @param post_roll Duration to be included at end of recording.
        /// @param project A label to be used when grouping recordings - e.g. the project name.
        /// @param description Information about this particular recording.
        /// @param locators List of cue points to carry through to post-production.
        /// @param files One filename per track.  Where multiple tracks are recorded in
        /// one file, the filename is repeated for each track.
        /// @return Indication of success or failure.
        ReturnCode Stop(
            inout MxfTimecode stop_timecode,
            in MxfDuration post_roll,
            in string description,
            in LocatorSeq locators,
            out CORBA::StringSeq files           
        );

        /// Set tape names corresponding to source package names of recorder tracks.
        /// The two sequences should be the same length.
        void SetTapeNames(in CORBA::StringSeq source_names, in CORBA::StringSeq tape_names);

        /// Instruct the recorder to re-read its configuration data.
        void UpdateConfig();
    };

};


#endif  // #ifndef Recorder_idl

