Index: libavformat/movenc.c
===================================================================
--- libavformat/movenc.c	(revision 14032)
+++ libavformat/movenc.c	(working copy)
@@ -69,6 +69,7 @@
     MOVIentry   *cluster;
     int         audio_vbr;
     int         height; ///< active picture (w/o VBI) height for D-10/IMX
+    int         tref;
 } MOVTrack;
 
 typedef struct MOVMuxContext {
@@ -707,6 +708,22 @@
     return updateSize(pb, pos);
 }
 
+static int mov_write_tmcd_tag(ByteIOContext *pb, MOVTrack *track)
+{
+    put_be32(pb, 36); /* size */
+    put_tag(pb, "tmcd");
+    put_be32(pb, 0); /* reserved */
+    put_be16(pb, 0); /* reserved */
+    put_be16(pb, 1); /* data reference index */
+    put_be32(pb, 0); /* reserved */
+    put_be32(pb, !!(track->enc->flags2 & CODEC_FLAG2_DROP_FRAME_TIMECODE)); /* flags */
+    put_be32(pb, track->timescale); /* timescale */
+    put_be32(pb, track->enc->time_base.num); /* frame duration */
+    put_byte(pb, av_rescale_rnd(track->timescale, 1, track->enc->time_base.num, AV_ROUND_UP)); /* number of frames */
+    put_be24(pb, 0); /* reserved */
+    return 36;
+}
+
 static int mov_write_stsd_tag(ByteIOContext *pb, MOVTrack *track)
 {
     int64_t pos = url_ftell(pb);
@@ -718,6 +735,9 @@
         mov_write_audio_tag(pb, track);
     else if (track->enc->codec_type == CODEC_TYPE_SUBTITLE)
         mov_write_subtitle_tag(pb, track);
+    else if (track->enc->codec_type == CODEC_TYPE_DATA &&
+             track->enc->codec_tag == MKTAG('t','m','c','d'))
+        mov_write_tmcd_tag(pb, track);
     return updateSize(pb, pos);
 }
 
@@ -857,6 +877,45 @@
     return 0x14;
 }
 
+static int mov_write_gmhd_tag_tmcd(ByteIOContext *pb, MOVTrack *track)
+{
+    int64_t pos = url_ftell(pb);
+    put_be32(pb, 0); /* size */
+    put_tag(pb, "gmhd");
+    put_be32(pb, 24); /* size */
+    put_tag(pb, "gmin");
+    put_be32(pb, 0); /* version & flags */
+    put_be16(pb, 64); /* graphic mode */
+    put_be16(pb, 32768); /* color */
+    put_be16(pb, 32768);
+    put_be16(pb, 32768);
+    put_be32(pb, 0); /* balance */
+
+    if (track->enc->codec_tag == MKTAG('t','m','c','d')) {
+        /* tmcd atom */
+        put_be32(pb, 47); /* size */
+        put_tag(pb, "tmcd");
+
+        /* tcmi atom */
+        put_be32(pb, 39); /* size */
+        put_tag(pb, "tcmi");
+        put_be32(pb, 0); /* version & flags */
+        put_be16(pb, 0); /* font */
+        put_be16(pb, 0); /* face */
+        put_be16(pb, 12); /* size */
+        put_be16(pb, 0); /* reserved */
+        put_be16(pb, 65535); /* fg color */
+        put_be16(pb, 65535); /* fg color */
+        put_be16(pb, 65535); /* fg color */
+        put_be16(pb, 0); /* bg color */
+        put_be16(pb, 0); /* bg color */
+        put_be16(pb, 0); /* bg color */
+        put_byte(pb, 6); /* font name length */
+        put_buffer(pb, "System", 6);
+    }
+    return updateSize(pb, pos);
+}
+
 static int mov_write_hdlr_tag(ByteIOContext *pb, MOVTrack *track)
 {
     const char *hdlr, *descr = NULL, *hdlr_type = NULL;
@@ -871,6 +930,10 @@
         if (track->enc->codec_type == CODEC_TYPE_VIDEO) {
             hdlr_type = "vide";
             descr = "VideoHandler";
+        } else if (track->enc->codec_type == CODEC_TYPE_DATA &&
+                   track->enc->codec_tag == MKTAG('t','m','c','d')) {
+            hdlr_type = "tmcd";
+            descr = "TimeCodeHandler";
         } else if (track->enc->codec_type == CODEC_TYPE_AUDIO) {
             hdlr_type = "soun";
             descr = "SoundHandler";
@@ -897,6 +960,8 @@
         mov_write_vmhd_tag(pb);
     else if (track->enc->codec_type == CODEC_TYPE_AUDIO)
         mov_write_smhd_tag(pb);
+    else if (track->enc->codec_type == CODEC_TYPE_DATA)
+        mov_write_gmhd_tag_tmcd(pb, track);
     else if (track->enc->codec_type == CODEC_TYPE_SUBTITLE) {
         if (track->mode == MODE_MOV) mov_write_gmhd_tag(pb);
         else                         mov_write_nmhd_tag(pb);
@@ -1038,14 +1103,26 @@
     return 0x34;
 }
 
+static int mov_write_tref_tag(ByteIOContext *pb, MOVTrack *track)
+{
+    put_be32(pb, 20); /* size */
+    put_tag(pb, "tref");
+    put_be32(pb, 12); /* size */
+    put_tag(pb, "tmcd");
+    put_be32(pb, track->tref);
+    return 20;
+}
+
 static int mov_write_trak_tag(ByteIOContext *pb, MOVTrack *track, AVStream *st)
 {
     int64_t pos = url_ftell(pb);
     put_be32(pb, 0); /* size */
     put_tag(pb, "trak");
     mov_write_tkhd_tag(pb, track, st);
-    if (track->mode == MODE_PSP || track->hasBframes)
-        mov_write_edts_tag(pb, track);  // PSP Movies require edts box
+    //if (track->mode == MODE_PSP || track->hasBframes || track->ref)
+    mov_write_edts_tag(pb, track);  // PSP/Omneon require edts box
+    if (track->tref != 0)
+        mov_write_tref_tag(pb, track);
     mov_write_mdia_tag(pb, track);
     if (track->mode == MODE_PSP)
         mov_write_uuid_tag_psp(pb,track);  // PSP Movies require this uuid box
@@ -1729,10 +1806,49 @@
 {
     MOVMuxContext *mov = s->priv_data;
     ByteIOContext *pb = s->pb;
+    int64_t moov_pos;
     int res = 0;
     int i;
 
-    int64_t moov_pos = url_ftell(pb);
+    /* VERY VERY UGLY */
+    for (i = 0; i < s->nb_streams; i++) {
+        AVStream *st = s->streams[i];
+        if (st->codec->codec_type == CODEC_TYPE_VIDEO &&
+            mov->mode == MODE_MOV && st->codec->timecode_frame_start > 0) {
+            MOVTrack *track = &mov->tracks[mov->nb_streams];
+            uint32_t time_code = AV_RB32(&st->codec->timecode_frame_start);
+            AVPacket pkt;
+
+            track->mode = MODE_MOV;
+            track->enc = avcodec_alloc_context();
+            track->enc->codec_type = CODEC_TYPE_DATA;
+            track->enc->codec_tag = MKTAG('t','m','c','d');
+            track->enc->time_base = st->codec->time_base;
+            track->enc->flags2 = st->codec->flags2;
+            track->enc->timecode_frame_start = st->codec->timecode_frame_start;
+
+            track->tag = track->enc->codec_tag;
+            track->timescale = track->enc->time_base.den;
+            track->vosData = (uint8_t *)track->enc; // hack to free enc
+            track->vosLen = sizeof(AVCodecContext);
+
+            mov->tracks[i].tref = mov->nb_streams + 1;
+
+            av_init_packet(&pkt);
+            pkt.dts = 0;
+            pkt.pts = 0;
+            pkt.size = 4;
+            pkt.data = (uint8_t *)&time_code;
+            pkt.stream_index = mov->nb_streams;
+            pkt.duration = mov->tracks[i].trackDuration;
+            mov_write_packet(s, &pkt);
+
+            mov->nb_streams++;
+            break;
+        }
+    }
+
+    moov_pos = url_ftell(pb);
 
     /* Write size of mdat tag */
     if (mov->mdat_size+8 <= UINT32_MAX) {
