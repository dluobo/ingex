--- libavcodec//dnxhdenc.c	2009-01-13 23:44:16.000000000 +0000
+++ ../ffmpeg-0.5-nonlinear-quant/libavcodec//dnxhdenc.c	2010-04-07 17:18:19.000000000 +0100
@@ -120,14 +120,14 @@
         int j = ctx->m.dsp.idct_permutation[ff_zigzag_direct[i]];
         weight_matrix[j] = ctx->cid_table->luma_weight[i];
     }
-    ff_convert_matrix(&ctx->m.dsp, ctx->qmatrix_l, ctx->qmatrix_l16, weight_matrix,
-                      ctx->m.intra_quant_bias, 1, ctx->m.avctx->qmax, 1);
+    ff_convert_matrix(&ctx->m.dsp, ctx->qmatrix_l, ctx->qmatrix_l16, NULL,
+                      weight_matrix, ctx->m.intra_quant_bias, 1, ctx->m.avctx->qmax, 1, 1);
     for (i = 1; i < 64; i++) {
         int j = ctx->m.dsp.idct_permutation[ff_zigzag_direct[i]];
         weight_matrix[j] = ctx->cid_table->chroma_weight[i];
     }
-    ff_convert_matrix(&ctx->m.dsp, ctx->qmatrix_c, ctx->qmatrix_c16, weight_matrix,
-                      ctx->m.intra_quant_bias, 1, ctx->m.avctx->qmax, 1);
+    ff_convert_matrix(&ctx->m.dsp, ctx->qmatrix_c, ctx->qmatrix_c16, NULL,
+                      weight_matrix, ctx->m.intra_quant_bias, 1, ctx->m.avctx->qmax, 1, 1);
     for (qscale = 1; qscale <= ctx->m.avctx->qmax; qscale++) {
         for (i = 0; i < 64; i++) {
             ctx->qmatrix_l  [qscale]   [i] <<= 2; ctx->qmatrix_c  [qscale]   [i] <<= 2;
--- libavcodec//mpeg12.c	2009-03-02 05:20:00.000000000 +0000
+++ ../ffmpeg-0.5-nonlinear-quant/libavcodec//mpeg12.c	2010-04-07 17:12:55.000000000 +0100
@@ -188,11 +188,7 @@
 static inline int get_qscale(MpegEncContext *s)
 {
     int qscale = get_bits(&s->gb, 5);
-    if (s->q_scale_type) {
-        return non_linear_qscale[qscale];
-    } else {
-        return qscale << 1;
-    }
+    return s->qscale_factor_table[qscale];
 }
 
 /* motion type (for MPEG-2) */
@@ -1188,6 +1184,7 @@
     s->mpeg_enc_ctx.picture_number = 0;
     s->repeat_field = 0;
     s->mpeg_enc_ctx.codec_id= avctx->codec->id;
+    s->mpeg_enc_ctx.qscale_factor_table= ff_mpeg2_linear_qscale;
     return 0;
 }
 
@@ -1540,6 +1537,8 @@
     s->chroma_420_type = get_bits1(&s->gb);
     s->progressive_frame = get_bits1(&s->gb);
 
+    s->qscale_factor_table = s->q_scale_type == 1 ? ff_mpeg2_non_linear_qscale : ff_mpeg2_linear_qscale;
+
     if(s->picture_structure == PICT_FRAME){
         s->first_field=0;
         s->v_edge_pos= 16*s->mb_height;
--- libavcodec//mpeg12data.c	2009-02-01 02:00:19.000000000 +0000
+++ ../ffmpeg-0.5-nonlinear-quant/libavcodec//mpeg12data.c	2010-04-07 17:13:00.000000000 +0100
@@ -49,6 +49,20 @@
     16, 16, 16, 16, 16, 16, 16, 16,
 };
 
+const uint8_t ff_mpeg2_linear_qscale[32] = {
+     0, 2, 4, 6, 8,10,12,14,
+    16,18,20,22,24,26,28,30,
+    32,34,36,38,40,42,44,46,
+    48,50,52,54,56,58,60,62,
+};
+
+const uint8_t ff_mpeg2_non_linear_qscale[32] = {
+    0,  1, 2, 3, 4, 5,  6,  7,
+    8, 10,12,14,16,18, 20, 22,
+    24,28,32,36,40,44, 48, 52,
+    56,64,72,80,88,96,104,112,
+};
+
 const uint16_t ff_mpeg12_vlc_dc_lum_code[12] = {
     0x4, 0x0, 0x1, 0x5, 0x6, 0xe, 0x1e, 0x3e, 0x7e, 0xfe, 0x1fe, 0x1ff,
 };
--- libavcodec//mpeg12data.h	2009-02-01 02:00:19.000000000 +0000
+++ ../ffmpeg-0.5-nonlinear-quant/libavcodec//mpeg12data.h	2010-04-07 17:13:03.000000000 +0100
@@ -35,6 +35,9 @@
 extern const uint16_t ff_mpeg1_default_intra_matrix[64];
 extern const uint16_t ff_mpeg1_default_non_intra_matrix[64];
 
+extern const uint8_t ff_mpeg2_linear_qscale[32];
+extern const uint8_t ff_mpeg2_non_linear_qscale[32];
+
 extern const uint16_t ff_mpeg12_vlc_dc_lum_code[12];
 extern const unsigned char ff_mpeg12_vlc_dc_lum_bits[12];
 extern const uint16_t ff_mpeg12_vlc_dc_chroma_code[12];
--- libavcodec//mpeg12enc.c	2009-02-01 02:00:19.000000000 +0000
+++ ../ffmpeg-0.5-nonlinear-quant/libavcodec//mpeg12enc.c	2010-04-07 17:13:08.000000000 +0100
@@ -34,11 +34,6 @@
 #include "bytestream.h"
 
 
-static const uint8_t inv_non_linear_qscale[13] = {
-    0, 2, 4, 6, 8,
-    9,10,11,12,13,14,15,16,
-};
-
 static const uint8_t svcd_scan_offset_placeholder[14] = {
     0x10, 0x0E,
     0x00, 0x80, 0x81,
@@ -316,19 +311,9 @@
              ff_mpeg12_mbAddrIncrTable[run][0]);
 }
 
-static av_always_inline void put_qscale(MpegEncContext *s)
-{
-    if(s->q_scale_type){
-        assert(s->qscale>=1 && s->qscale <=12);
-        put_bits(&s->pb, 5, inv_non_linear_qscale[s->qscale]);
-    }else{
-        put_bits(&s->pb, 5, s->qscale);
-    }
-}
-
 void ff_mpeg1_encode_slice_header(MpegEncContext *s){
     put_header(s, SLICE_MIN_START_CODE + s->mb_y);
-    put_qscale(s);
+    put_bits(&s->pb, 5, s->qscale);
     put_bits(&s->pb, 1, 0); /* slice extra information */
 }
 
@@ -474,7 +459,7 @@
         if (s->pict_type == FF_I_TYPE) {
             if(s->dquant && cbp){
                 put_mb_modes(s, 2, 1, 0, 0); /* macroblock_type : macroblock_quant = 1 */
-                put_qscale(s);
+                put_bits(&s->pb, 5, s->qscale);
             }else{
                 put_mb_modes(s, 1, 1, 0, 0); /* macroblock_type : macroblock_quant = 0 */
                 s->qscale -= s->dquant;
@@ -484,7 +469,7 @@
         } else if (s->mb_intra) {
             if(s->dquant && cbp){
                 put_mb_modes(s, 6, 0x01, 0, 0);
-                put_qscale(s);
+                put_bits(&s->pb, 5, s->qscale);
             }else{
                 put_mb_modes(s, 5, 0x03, 0, 0);
                 s->qscale -= s->dquant;
@@ -498,7 +483,7 @@
                     if ((motion_x|motion_y) == 0) {
                         if(s->dquant){
                             put_mb_modes(s, 5, 1, 0, 0); /* macroblock_pattern & quant */
-                            put_qscale(s);
+                            put_bits(&s->pb, 5, s->qscale);
                         }else{
                             put_mb_modes(s, 2, 1, 0, 0); /* macroblock_pattern only */
                         }
@@ -506,7 +491,7 @@
                     } else {
                         if(s->dquant){
                             put_mb_modes(s, 5, 2, 1, 0); /* motion + cbp */
-                            put_qscale(s);
+                            put_bits(&s->pb, 5, s->qscale);
                         }else{
                             put_mb_modes(s, 1, 1, 1, 0); /* motion + cbp */
                         }
@@ -533,7 +518,7 @@
                 if (cbp) {
                     if(s->dquant){
                         put_mb_modes(s, 5, 2, 1, 1); /* motion + cbp */
-                        put_qscale(s);
+                        put_bits(&s->pb, 5, s->qscale);
                     }else{
                         put_mb_modes(s, 1, 1, 1, 1); /* motion + cbp */
                     }
@@ -569,7 +554,7 @@
                             put_mb_modes(s, 6, 3, 1, 0);
                         else
                             put_mb_modes(s, 8-s->mv_dir, 2, 1, 0);
-                        put_qscale(s);
+                        put_bits(&s->pb, 5, s->qscale);
                     } else {
                         put_mb_modes(s, 5-s->mv_dir, 3, 1, 0);
                     }
@@ -603,7 +588,7 @@
                             put_mb_modes(s, 6, 3, 1, 1);
                         else
                             put_mb_modes(s, 8-s->mv_dir, 2, 1, 1);
-                        put_qscale(s);
+                        put_bits(&s->pb, 5, s->qscale);
                     } else {
                         put_mb_modes(s, 5-s->mv_dir, 3, 1, 1);
                     }
--- libavcodec//mpegvideo.c	2009-02-27 15:51:15.000000000 +0000
+++ ../ffmpeg-0.5-nonlinear-quant/libavcodec//mpegvideo.c	2010-04-07 17:13:14.000000000 +0100
@@ -379,6 +379,7 @@
     s->y_dc_scale_table=
     s->c_dc_scale_table= ff_mpeg1_dc_scale_table;
     s->chroma_qscale_table= ff_default_chroma_qscale_table;
+    s->qscale_factor_table= ff_default_chroma_qscale_table;
     s->progressive_frame= 1;
     s->progressive_sequence= 1;
     s->picture_structure= PICT_FRAME;
@@ -1872,10 +1873,10 @@
             /* add dct residue */
             if(s->encoding || !(   s->h263_msmpeg4 || s->codec_id==CODEC_ID_MPEG1VIDEO || s->codec_id==CODEC_ID_MPEG2VIDEO
                                 || (s->codec_id==CODEC_ID_MPEG4 && !s->mpeg_quant))){
-                add_dequant_dct(s, block[0], 0, dest_y                          , dct_linesize, s->qscale);
-                add_dequant_dct(s, block[1], 1, dest_y              + block_size, dct_linesize, s->qscale);
-                add_dequant_dct(s, block[2], 2, dest_y + dct_offset             , dct_linesize, s->qscale);
-                add_dequant_dct(s, block[3], 3, dest_y + dct_offset + block_size, dct_linesize, s->qscale);
+                add_dequant_dct(s, block[0], 0, dest_y                          , dct_linesize, s->qscale_factor);
+                add_dequant_dct(s, block[1], 1, dest_y              + block_size, dct_linesize, s->qscale_factor);
+                add_dequant_dct(s, block[2], 2, dest_y + dct_offset             , dct_linesize, s->qscale_factor);
+                add_dequant_dct(s, block[3], 3, dest_y + dct_offset + block_size, dct_linesize, s->qscale_factor);
 
                 if(!CONFIG_GRAY || !(s->flags&CODEC_FLAG_GRAY)){
                     if (s->chroma_y_shift){
@@ -1924,10 +1925,10 @@
         } else {
             /* dct only in intra block */
             if(s->encoding || !(s->codec_id==CODEC_ID_MPEG1VIDEO || s->codec_id==CODEC_ID_MPEG2VIDEO)){
-                put_dct(s, block[0], 0, dest_y                          , dct_linesize, s->qscale);
-                put_dct(s, block[1], 1, dest_y              + block_size, dct_linesize, s->qscale);
-                put_dct(s, block[2], 2, dest_y + dct_offset             , dct_linesize, s->qscale);
-                put_dct(s, block[3], 3, dest_y + dct_offset + block_size, dct_linesize, s->qscale);
+                put_dct(s, block[0], 0, dest_y                          , dct_linesize, s->qscale_factor);
+                put_dct(s, block[1], 1, dest_y              + block_size, dct_linesize, s->qscale_factor);
+                put_dct(s, block[2], 2, dest_y + dct_offset             , dct_linesize, s->qscale_factor);
+                put_dct(s, block[3], 3, dest_y + dct_offset + block_size, dct_linesize, s->qscale_factor);
 
                 if(!CONFIG_GRAY || !(s->flags&CODEC_FLAG_GRAY)){
                     if(s->chroma_y_shift){
@@ -2105,11 +2106,11 @@
         if (level) {
             if (level < 0) {
                 level = -level;
-                level = (int)(level * qscale * quant_matrix[j]) >> 3;
+                level = (int)(level * qscale * quant_matrix[j]) >> 4;
                 level = (level - 1) | 1;
                 level = -level;
             } else {
-                level = (int)(level * qscale * quant_matrix[j]) >> 3;
+                level = (int)(level * qscale * quant_matrix[j]) >> 4;
                 level = (level - 1) | 1;
             }
             block[j] = level;
@@ -2133,12 +2134,12 @@
             if (level < 0) {
                 level = -level;
                 level = (((level << 1) + 1) * qscale *
-                         ((int) (quant_matrix[j]))) >> 4;
+                         ((int) (quant_matrix[j]))) >> 5;
                 level = (level - 1) | 1;
                 level = -level;
             } else {
                 level = (((level << 1) + 1) * qscale *
-                         ((int) (quant_matrix[j]))) >> 4;
+                         ((int) (quant_matrix[j]))) >> 5;
                 level = (level - 1) | 1;
             }
             block[j] = level;
@@ -2166,10 +2167,10 @@
         if (level) {
             if (level < 0) {
                 level = -level;
-                level = (int)(level * qscale * quant_matrix[j]) >> 3;
+                level = (int)(level * qscale * quant_matrix[j]) >> 4;
                 level = -level;
             } else {
-                level = (int)(level * qscale * quant_matrix[j]) >> 3;
+                level = (int)(level * qscale * quant_matrix[j]) >> 4;
             }
             block[j] = level;
         }
@@ -2197,10 +2198,10 @@
         if (level) {
             if (level < 0) {
                 level = -level;
-                level = (int)(level * qscale * quant_matrix[j]) >> 3;
+                level = (int)(level * qscale * quant_matrix[j]) >> 4;
                 level = -level;
             } else {
-                level = (int)(level * qscale * quant_matrix[j]) >> 3;
+                level = (int)(level * qscale * quant_matrix[j]) >> 4;
             }
             block[j] = level;
             sum+=level;
@@ -2227,11 +2228,11 @@
             if (level < 0) {
                 level = -level;
                 level = (((level << 1) + 1) * qscale *
-                         ((int) (quant_matrix[j]))) >> 4;
+                         ((int) (quant_matrix[j]))) >> 5;
                 level = -level;
             } else {
                 level = (((level << 1) + 1) * qscale *
-                         ((int) (quant_matrix[j]))) >> 4;
+                         ((int) (quant_matrix[j]))) >> 5;
             }
             block[j] = level;
             sum+=level;
@@ -2315,6 +2316,7 @@
 
     s->qscale = qscale;
     s->chroma_qscale= s->chroma_qscale_table[qscale];
+    s->qscale_factor= s->qscale_factor_table[qscale];
 
     s->y_dc_scale= s->y_dc_scale_table[ qscale ];
     s->c_dc_scale= s->c_dc_scale_table[ s->chroma_qscale ];
--- libavcodec//mpegvideo_enc.c	2009-03-02 05:18:33.000000000 +0000
+++ ../ffmpeg-0.5-nonlinear-quant/libavcodec//mpegvideo_enc.c	2010-04-08 13:20:10.000000000 +0100
@@ -53,13 +53,14 @@
 static uint8_t default_mv_penalty[MAX_FCODE+1][MAX_MV*2+1];
 static uint8_t default_fcode_tab[MAX_MV*2+1];
 
-void ff_convert_matrix(DSPContext *dsp, int (*qmat)[64], uint16_t (*qmat16)[2][64],
-                           const uint16_t *quant_matrix, int bias, int qmin, int qmax, int intra)
+void ff_convert_matrix(DSPContext *dsp, int (*qmat)[64], uint16_t (*qmat16)[2][64], const uint8_t *qscale_factor_table,
+                       const uint16_t *quant_matrix, int bias, int qmin, int qmax, int intra, uint64_t numerator)
 {
     int qscale;
     int shift=0;
 
     for(qscale=qmin; qscale<=qmax; qscale++){
+        int qscale_factor = qscale_factor_table ? qscale_factor_table[qscale] : qscale;
         int i;
         if (dsp->fdct == ff_jpeg_fdct_islow
 #ifdef FAAN_POSTSCALE
@@ -73,8 +74,8 @@
                 /* (1 << 36) / 19952 >= (1 << 36) / (ff_aanscales[i] * qscale * quant_matrix[i]) >= (1 << 36) / 249205026 */
                 /* 3444240           >= (1 << 36) / (ff_aanscales[i] * qscale * quant_matrix[i]) >= 275 */
 
-                qmat[qscale][i] = (int)((UINT64_C(1) << QMAT_SHIFT) /
-                                (qscale * quant_matrix[j]));
+                qmat[qscale][i] = (int)((numerator << QMAT_SHIFT) /
+                                (qscale_factor * quant_matrix[j]));
             }
         } else if (dsp->fdct == fdct_ifast
 #ifndef FAAN_POSTSCALE
@@ -88,8 +89,8 @@
                 /* (1 << 36) / 19952 >= (1 << 36) / (ff_aanscales[i] * qscale * quant_matrix[i]) >= (1<<36)/249205026 */
                 /* 3444240           >= (1 << 36) / (ff_aanscales[i] * qscale * quant_matrix[i]) >= 275 */
 
-                qmat[qscale][i] = (int)((UINT64_C(1) << (QMAT_SHIFT + 14)) /
-                                (ff_aanscales[i] * qscale * quant_matrix[j]));
+                qmat[qscale][i] = (int)((numerator << (QMAT_SHIFT + 14)) /
+                                (ff_aanscales[i] * qscale_factor * quant_matrix[j]));
             }
         } else {
             for(i=0;i<64;i++) {
@@ -99,9 +100,8 @@
                    so (1<<19) / 16 >= (1<<19) / (qscale * quant_matrix[i]) >= (1<<19) / 7905
                    so 32768        >= (1<<19) / (qscale * quant_matrix[i]) >= 67
                 */
-                qmat[qscale][i] = (int)((UINT64_C(1) << QMAT_SHIFT) / (qscale * quant_matrix[j]));
-//                qmat  [qscale][i] = (1 << QMAT_SHIFT_MMX) / (qscale * quant_matrix[i]);
-                qmat16[qscale][0][i] = (1 << QMAT_SHIFT_MMX) / (qscale * quant_matrix[j]);
+                qmat[qscale][i] = (int)((numerator << QMAT_SHIFT) / (qscale_factor * quant_matrix[j]));
+                qmat16[qscale][0][i] = (numerator << QMAT_SHIFT_MMX) / (qscale_factor * quant_matrix[j]);
 
                 if(qmat16[qscale][0][i]==0 || qmat16[qscale][0][i]==128*256) qmat16[qscale][0][i]=128*256-1;
                 qmat16[qscale][1][i]= ROUNDED_DIV(bias<<(16-QUANT_BIAS_SHIFT), qmat16[qscale][0][i]);
@@ -424,12 +424,12 @@
     }
 
     if(s->q_scale_type == 1){
-        if(s->codec_id != CODEC_ID_MPEG2VIDEO){
+        if (s->codec_id != CODEC_ID_MPEG2VIDEO){
             av_log(avctx, AV_LOG_ERROR, "non linear quant is only available for mpeg2\n");
             return -1;
         }
-        if(avctx->qmax > 12){
-            av_log(avctx, AV_LOG_ERROR, "non linear quant only supports qmax <= 12 currently\n");
+        if (avctx->qmin < 2){
+            av_log(avctx, AV_LOG_ERROR, "qmin < 2 not yet supported for non linear quant\n");
             return -1;
         }
     }
@@ -703,10 +703,17 @@
     /* precompute matrix */
     /* for mjpeg, we do include qscale in the matrix */
     if (s->out_format != FMT_MJPEG) {
-        ff_convert_matrix(&s->dsp, s->q_intra_matrix, s->q_intra_matrix16,
-                       s->intra_matrix, s->intra_quant_bias, avctx->qmin, 31, 1);
-        ff_convert_matrix(&s->dsp, s->q_inter_matrix, s->q_inter_matrix16,
-                       s->inter_matrix, s->inter_quant_bias, avctx->qmin, 31, 0);
+        int numerator;
+        if (s->avctx->codec_id == CODEC_ID_MPEG2VIDEO) {
+            s->qscale_factor_table = s->q_scale_type ? ff_mpeg2_non_linear_qscale : ff_mpeg2_linear_qscale;
+            s->chroma_qscale_table = s->qscale_factor_table;
+            numerator = 2;
+        } else
+            numerator = 1;
+        ff_convert_matrix(&s->dsp, s->q_intra_matrix, s->q_intra_matrix16, s->qscale_factor_table,
+                          s->intra_matrix, s->intra_quant_bias, avctx->qmin, 31, 1, numerator);
+        ff_convert_matrix(&s->dsp, s->q_inter_matrix, s->q_inter_matrix16, s->qscale_factor_table,
+                          s->inter_matrix, s->inter_quant_bias, avctx->qmin, 31, 0, numerator);
     }
 
     if(ff_rate_control_init(s) < 0)
@@ -2854,8 +2861,8 @@
 
             s->intra_matrix[j] = av_clip_uint8((ff_mpeg1_default_intra_matrix[i] * s->qscale) >> 3);
         }
-        ff_convert_matrix(&s->dsp, s->q_intra_matrix, s->q_intra_matrix16,
-                       s->intra_matrix, s->intra_quant_bias, 8, 8, 1);
+        ff_convert_matrix(&s->dsp, s->q_intra_matrix, s->q_intra_matrix16, s->qscale_factor_table,
+                          s->intra_matrix, s->intra_quant_bias, 8, 8, 1, 1);
         s->qscale= 8;
     }
 
--- libavcodec//mpegvideo.h	2009-03-02 05:41:55.000000000 +0000
+++ ../ffmpeg-0.5-nonlinear-quant/libavcodec//mpegvideo.h	2010-04-08 12:56:35.000000000 +0100
@@ -285,6 +285,7 @@
     const uint8_t *y_dc_scale_table;     ///< qscale -> y_dc_scale table
     const uint8_t *c_dc_scale_table;     ///< qscale -> c_dc_scale table
     const uint8_t *chroma_qscale_table;  ///< qscale -> chroma_qscale (h263)
+    const uint8_t *qscale_factor_table;  ///< qscale -> qscale_factor (nonlinear for mpeg2)
     uint8_t *coded_block_base;
     uint8_t *coded_block;          ///< used for coded block pattern prediction (msmpeg4v3, wmv1)
     int16_t (*ac_val_base)[16];
@@ -306,6 +307,7 @@
 
     int qscale;                 ///< QP
     int chroma_qscale;          ///< chroma QP
+    int qscale_factor;          ///< qscale factor for quantization (may be nonlinear for mpeg2)
     unsigned int lambda;        ///< lagrange multipler used in rate distortion
     unsigned int lambda2;       ///< (lambda*lambda) >> FF_LAMBDA_SHIFT
     int *lambda_table;
@@ -702,8 +704,8 @@
 void ff_er_add_slice(MpegEncContext *s, int startx, int starty, int endx, int endy, int status);
 
 int ff_dct_common_init(MpegEncContext *s);
-void ff_convert_matrix(DSPContext *dsp, int (*qmat)[64], uint16_t (*qmat16)[2][64],
-                       const uint16_t *quant_matrix, int bias, int qmin, int qmax, int intra);
+void ff_convert_matrix(DSPContext *dsp, int (*qmat)[64], uint16_t (*qmat16)[2][64], const uint8_t *qscale_factor_table,
+                       const uint16_t *quant_matrix, int bias, int qmin, int qmax, int intra, uint64_t numerator);
 
 void ff_init_block_index(MpegEncContext *s);
 void ff_copy_picture(Picture *dst, Picture *src);
--- libavcodec/x86//mpegvideo_mmx.c	2009-01-19 15:46:40.000000000 +0000
+++ ../ffmpeg-0.5-nonlinear-quant/libavcodec/x86//mpegvideo_mmx.c	2010-04-07 17:13:34.000000000 +0100
@@ -378,8 +378,8 @@
                 "pxor %%mm5, %%mm5              \n\t" // FIXME slow
                 "pcmpeqw (%0, %%"REG_a"), %%mm4 \n\t" // block[i] == 0 ? -1 : 0
                 "pcmpeqw 8(%0, %%"REG_a"), %%mm5\n\t" // block[i] == 0 ? -1 : 0
-                "psraw $3, %%mm0                \n\t"
-                "psraw $3, %%mm1                \n\t"
+                "psraw $4, %%mm0                \n\t"
+                "psraw $4, %%mm1                \n\t"
                 "pxor %%mm2, %%mm0              \n\t"
                 "pxor %%mm3, %%mm1              \n\t"
                 "psubw %%mm2, %%mm0             \n\t"
@@ -443,8 +443,8 @@
                 "pxor %%mm5, %%mm5              \n\t" // FIXME slow
                 "pcmpeqw (%0, %%"REG_a"), %%mm4 \n\t" // block[i] == 0 ? -1 : 0
                 "pcmpeqw 8(%0, %%"REG_a"), %%mm5\n\t" // block[i] == 0 ? -1 : 0
-                "psrlw $4, %%mm0                \n\t"
-                "psrlw $4, %%mm1                \n\t"
+                "psrlw $5, %%mm0                \n\t"
+                "psrlw $5, %%mm1                \n\t"
                 "pxor %%mm2, %%mm0              \n\t"
                 "pxor %%mm3, %%mm1              \n\t"
                 "psubw %%mm2, %%mm0             \n\t"
